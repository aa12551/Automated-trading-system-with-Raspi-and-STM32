
Final_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ba8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011c0  08006d38  08006d38  00016d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ef8  08007ef8  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08007ef8  08007ef8  00017ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f00  08007f00  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f00  08007f00  00017f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f04  08007f04  00017f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08007f08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          00012f20  2000001c  2000001c  0002001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20012f3c  20012f3c  0002001c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017923  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033fe  00000000  00000000  0003796f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f88  00000000  00000000  0003ad70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e48  00000000  00000000  0003bcf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022e25  00000000  00000000  0003cb40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001364b  00000000  00000000  0005f965  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd6f4  00000000  00000000  00072fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001406a4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003eb4  00000000  00000000  001406f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006d20 	.word	0x08006d20

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	08006d20 	.word	0x08006d20

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96e 	b.w	80004d4 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468c      	mov	ip, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	f040 8083 	bne.w	8000326 <__udivmoddi4+0x116>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d947      	bls.n	80002b6 <__udivmoddi4+0xa6>
 8000226:	fab2 f282 	clz	r2, r2
 800022a:	b142      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022c:	f1c2 0020 	rsb	r0, r2, #32
 8000230:	fa24 f000 	lsr.w	r0, r4, r0
 8000234:	4091      	lsls	r1, r2
 8000236:	4097      	lsls	r7, r2
 8000238:	ea40 0c01 	orr.w	ip, r0, r1
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbbc f6f8 	udiv	r6, ip, r8
 8000248:	fa1f fe87 	uxth.w	lr, r7
 800024c:	fb08 c116 	mls	r1, r8, r6, ip
 8000250:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000254:	fb06 f10e 	mul.w	r1, r6, lr
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18fb      	adds	r3, r7, r3
 800025e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000262:	f080 8119 	bcs.w	8000498 <__udivmoddi4+0x288>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8116 	bls.w	8000498 <__udivmoddi4+0x288>
 800026c:	3e02      	subs	r6, #2
 800026e:	443b      	add	r3, r7
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0f8 	udiv	r0, r3, r8
 8000278:	fb08 3310 	mls	r3, r8, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fe0e 	mul.w	lr, r0, lr
 8000284:	45a6      	cmp	lr, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	193c      	adds	r4, r7, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8105 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000292:	45a6      	cmp	lr, r4
 8000294:	f240 8102 	bls.w	800049c <__udivmoddi4+0x28c>
 8000298:	3802      	subs	r0, #2
 800029a:	443c      	add	r4, r7
 800029c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a0:	eba4 040e 	sub.w	r4, r4, lr
 80002a4:	2600      	movs	r6, #0
 80002a6:	b11d      	cbz	r5, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c5 4300 	strd	r4, r3, [r5]
 80002b0:	4631      	mov	r1, r6
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	b902      	cbnz	r2, 80002ba <__udivmoddi4+0xaa>
 80002b8:	deff      	udf	#255	; 0xff
 80002ba:	fab2 f282 	clz	r2, r2
 80002be:	2a00      	cmp	r2, #0
 80002c0:	d150      	bne.n	8000364 <__udivmoddi4+0x154>
 80002c2:	1bcb      	subs	r3, r1, r7
 80002c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c8:	fa1f f887 	uxth.w	r8, r7
 80002cc:	2601      	movs	r6, #1
 80002ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80002d2:	0c21      	lsrs	r1, r4, #16
 80002d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002dc:	fb08 f30c 	mul.w	r3, r8, ip
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d907      	bls.n	80002f4 <__udivmoddi4+0xe4>
 80002e4:	1879      	adds	r1, r7, r1
 80002e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0xe2>
 80002ec:	428b      	cmp	r3, r1
 80002ee:	f200 80e9 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 80002f2:	4684      	mov	ip, r0
 80002f4:	1ac9      	subs	r1, r1, r3
 80002f6:	b2a3      	uxth	r3, r4
 80002f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000300:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000304:	fb08 f800 	mul.w	r8, r8, r0
 8000308:	45a0      	cmp	r8, r4
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x10c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x10a>
 8000314:	45a0      	cmp	r8, r4
 8000316:	f200 80d9 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 800031a:	4618      	mov	r0, r3
 800031c:	eba4 0408 	sub.w	r4, r4, r8
 8000320:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000324:	e7bf      	b.n	80002a6 <__udivmoddi4+0x96>
 8000326:	428b      	cmp	r3, r1
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x12e>
 800032a:	2d00      	cmp	r5, #0
 800032c:	f000 80b1 	beq.w	8000492 <__udivmoddi4+0x282>
 8000330:	2600      	movs	r6, #0
 8000332:	e9c5 0100 	strd	r0, r1, [r5]
 8000336:	4630      	mov	r0, r6
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	fab3 f683 	clz	r6, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d14a      	bne.n	80003dc <__udivmoddi4+0x1cc>
 8000346:	428b      	cmp	r3, r1
 8000348:	d302      	bcc.n	8000350 <__udivmoddi4+0x140>
 800034a:	4282      	cmp	r2, r0
 800034c:	f200 80b8 	bhi.w	80004c0 <__udivmoddi4+0x2b0>
 8000350:	1a84      	subs	r4, r0, r2
 8000352:	eb61 0103 	sbc.w	r1, r1, r3
 8000356:	2001      	movs	r0, #1
 8000358:	468c      	mov	ip, r1
 800035a:	2d00      	cmp	r5, #0
 800035c:	d0a8      	beq.n	80002b0 <__udivmoddi4+0xa0>
 800035e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000362:	e7a5      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000364:	f1c2 0320 	rsb	r3, r2, #32
 8000368:	fa20 f603 	lsr.w	r6, r0, r3
 800036c:	4097      	lsls	r7, r2
 800036e:	fa01 f002 	lsl.w	r0, r1, r2
 8000372:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000376:	40d9      	lsrs	r1, r3
 8000378:	4330      	orrs	r0, r6
 800037a:	0c03      	lsrs	r3, r0, #16
 800037c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000380:	fa1f f887 	uxth.w	r8, r7
 8000384:	fb0e 1116 	mls	r1, lr, r6, r1
 8000388:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800038c:	fb06 f108 	mul.w	r1, r6, r8
 8000390:	4299      	cmp	r1, r3
 8000392:	fa04 f402 	lsl.w	r4, r4, r2
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x19c>
 8000398:	18fb      	adds	r3, r7, r3
 800039a:	f106 3cff 	add.w	ip, r6, #4294967295
 800039e:	f080 808d 	bcs.w	80004bc <__udivmoddi4+0x2ac>
 80003a2:	4299      	cmp	r1, r3
 80003a4:	f240 808a 	bls.w	80004bc <__udivmoddi4+0x2ac>
 80003a8:	3e02      	subs	r6, #2
 80003aa:	443b      	add	r3, r7
 80003ac:	1a5b      	subs	r3, r3, r1
 80003ae:	b281      	uxth	r1, r0
 80003b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb00 f308 	mul.w	r3, r0, r8
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x1c4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ca:	d273      	bcs.n	80004b4 <__udivmoddi4+0x2a4>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d971      	bls.n	80004b4 <__udivmoddi4+0x2a4>
 80003d0:	3802      	subs	r0, #2
 80003d2:	4439      	add	r1, r7
 80003d4:	1acb      	subs	r3, r1, r3
 80003d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003da:	e778      	b.n	80002ce <__udivmoddi4+0xbe>
 80003dc:	f1c6 0c20 	rsb	ip, r6, #32
 80003e0:	fa03 f406 	lsl.w	r4, r3, r6
 80003e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e8:	431c      	orrs	r4, r3
 80003ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80003ee:	fa01 f306 	lsl.w	r3, r1, r6
 80003f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003fa:	431f      	orrs	r7, r3
 80003fc:	0c3b      	lsrs	r3, r7, #16
 80003fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000402:	fa1f f884 	uxth.w	r8, r4
 8000406:	fb0e 1119 	mls	r1, lr, r9, r1
 800040a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800040e:	fb09 fa08 	mul.w	sl, r9, r8
 8000412:	458a      	cmp	sl, r1
 8000414:	fa02 f206 	lsl.w	r2, r2, r6
 8000418:	fa00 f306 	lsl.w	r3, r0, r6
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x220>
 800041e:	1861      	adds	r1, r4, r1
 8000420:	f109 30ff 	add.w	r0, r9, #4294967295
 8000424:	d248      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 8000426:	458a      	cmp	sl, r1
 8000428:	d946      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800042a:	f1a9 0902 	sub.w	r9, r9, #2
 800042e:	4421      	add	r1, r4
 8000430:	eba1 010a 	sub.w	r1, r1, sl
 8000434:	b2bf      	uxth	r7, r7
 8000436:	fbb1 f0fe 	udiv	r0, r1, lr
 800043a:	fb0e 1110 	mls	r1, lr, r0, r1
 800043e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000442:	fb00 f808 	mul.w	r8, r0, r8
 8000446:	45b8      	cmp	r8, r7
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x24a>
 800044a:	19e7      	adds	r7, r4, r7
 800044c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000450:	d22e      	bcs.n	80004b0 <__udivmoddi4+0x2a0>
 8000452:	45b8      	cmp	r8, r7
 8000454:	d92c      	bls.n	80004b0 <__udivmoddi4+0x2a0>
 8000456:	3802      	subs	r0, #2
 8000458:	4427      	add	r7, r4
 800045a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800045e:	eba7 0708 	sub.w	r7, r7, r8
 8000462:	fba0 8902 	umull	r8, r9, r0, r2
 8000466:	454f      	cmp	r7, r9
 8000468:	46c6      	mov	lr, r8
 800046a:	4649      	mov	r1, r9
 800046c:	d31a      	bcc.n	80004a4 <__udivmoddi4+0x294>
 800046e:	d017      	beq.n	80004a0 <__udivmoddi4+0x290>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x27a>
 8000472:	ebb3 020e 	subs.w	r2, r3, lr
 8000476:	eb67 0701 	sbc.w	r7, r7, r1
 800047a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800047e:	40f2      	lsrs	r2, r6
 8000480:	ea4c 0202 	orr.w	r2, ip, r2
 8000484:	40f7      	lsrs	r7, r6
 8000486:	e9c5 2700 	strd	r2, r7, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e70b      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e9      	b.n	8000270 <__udivmoddi4+0x60>
 800049c:	4618      	mov	r0, r3
 800049e:	e6fd      	b.n	800029c <__udivmoddi4+0x8c>
 80004a0:	4543      	cmp	r3, r8
 80004a2:	d2e5      	bcs.n	8000470 <__udivmoddi4+0x260>
 80004a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7df      	b.n	8000470 <__udivmoddi4+0x260>
 80004b0:	4608      	mov	r0, r1
 80004b2:	e7d2      	b.n	800045a <__udivmoddi4+0x24a>
 80004b4:	4660      	mov	r0, ip
 80004b6:	e78d      	b.n	80003d4 <__udivmoddi4+0x1c4>
 80004b8:	4681      	mov	r9, r0
 80004ba:	e7b9      	b.n	8000430 <__udivmoddi4+0x220>
 80004bc:	4666      	mov	r6, ip
 80004be:	e775      	b.n	80003ac <__udivmoddi4+0x19c>
 80004c0:	4630      	mov	r0, r6
 80004c2:	e74a      	b.n	800035a <__udivmoddi4+0x14a>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	4439      	add	r1, r7
 80004ca:	e713      	b.n	80002f4 <__udivmoddi4+0xe4>
 80004cc:	3802      	subs	r0, #2
 80004ce:	443c      	add	r4, r7
 80004d0:	e724      	b.n	800031c <__udivmoddi4+0x10c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <ILI9341_DrawChar>:

	ILI9341_DrawRectangle(X0True, Y0True, xLen, yLen, color);
}

void ILI9341_DrawChar(char ch, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 80004d8:	b590      	push	{r4, r7, lr}
 80004da:	b08d      	sub	sp, #52	; 0x34
 80004dc:	af02      	add	r7, sp, #8
 80004de:	60b9      	str	r1, [r7, #8]
 80004e0:	4611      	mov	r1, r2
 80004e2:	461a      	mov	r2, r3
 80004e4:	4603      	mov	r3, r0
 80004e6:	73fb      	strb	r3, [r7, #15]
 80004e8:	460b      	mov	r3, r1
 80004ea:	81bb      	strh	r3, [r7, #12]
 80004ec:	4613      	mov	r3, r2
 80004ee:	80fb      	strh	r3, [r7, #6]
	if ((ch < 31) || (ch > 127)) return;
 80004f0:	7bfb      	ldrb	r3, [r7, #15]
 80004f2:	2b1e      	cmp	r3, #30
 80004f4:	d961      	bls.n	80005ba <ILI9341_DrawChar+0xe2>
 80004f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	db5d      	blt.n	80005ba <ILI9341_DrawChar+0xe2>

	uint8_t fOffset, fWidth, fHeight, fBPL;
	uint8_t *tempChar;

	fOffset = font[0];
 80004fe:	68bb      	ldr	r3, [r7, #8]
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	77fb      	strb	r3, [r7, #31]
	fWidth = font[1];
 8000504:	68bb      	ldr	r3, [r7, #8]
 8000506:	785b      	ldrb	r3, [r3, #1]
 8000508:	77bb      	strb	r3, [r7, #30]
	fHeight = font[2];
 800050a:	68bb      	ldr	r3, [r7, #8]
 800050c:	789b      	ldrb	r3, [r3, #2]
 800050e:	777b      	strb	r3, [r7, #29]
	fBPL = font[3];
 8000510:	68bb      	ldr	r3, [r7, #8]
 8000512:	78db      	ldrb	r3, [r3, #3]
 8000514:	773b      	strb	r3, [r7, #28]

	tempChar = (uint8_t*)&font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 8000516:	7bfb      	ldrb	r3, [r7, #15]
 8000518:	3b20      	subs	r3, #32
 800051a:	7ffa      	ldrb	r2, [r7, #31]
 800051c:	fb02 f303 	mul.w	r3, r2, r3
 8000520:	3304      	adds	r3, #4
 8000522:	68ba      	ldr	r2, [r7, #8]
 8000524:	4413      	add	r3, r2
 8000526:	61bb      	str	r3, [r7, #24]

	/* Clear background first */
	ILI9341_DrawRectangle(X, Y, fWidth, fHeight, bgcolor);
 8000528:	7fbb      	ldrb	r3, [r7, #30]
 800052a:	b29a      	uxth	r2, r3
 800052c:	7f7b      	ldrb	r3, [r7, #29]
 800052e:	b29c      	uxth	r4, r3
 8000530:	88f9      	ldrh	r1, [r7, #6]
 8000532:	89b8      	ldrh	r0, [r7, #12]
 8000534:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000536:	9300      	str	r3, [sp, #0]
 8000538:	4623      	mov	r3, r4
 800053a:	f000 fc1d 	bl	8000d78 <ILI9341_DrawRectangle>

	for (int j=0; j < fHeight; j++)
 800053e:	2300      	movs	r3, #0
 8000540:	627b      	str	r3, [r7, #36]	; 0x24
 8000542:	e035      	b.n	80005b0 <ILI9341_DrawChar+0xd8>
	{
		for (int i=0; i < fWidth; i++)
 8000544:	2300      	movs	r3, #0
 8000546:	623b      	str	r3, [r7, #32]
 8000548:	e02b      	b.n	80005a2 <ILI9341_DrawChar+0xca>
		{
			uint8_t z =  tempChar[fBPL * i + ((j & 0xF8) >> 3) + 1]; /* (j & 0xF8) >> 3, increase one by 8-bits */
 800054a:	7f3b      	ldrb	r3, [r7, #28]
 800054c:	6a3a      	ldr	r2, [r7, #32]
 800054e:	fb02 f203 	mul.w	r2, r2, r3
 8000552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000554:	10db      	asrs	r3, r3, #3
 8000556:	f003 031f 	and.w	r3, r3, #31
 800055a:	4413      	add	r3, r2
 800055c:	3301      	adds	r3, #1
 800055e:	69ba      	ldr	r2, [r7, #24]
 8000560:	4413      	add	r3, r2
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	75fb      	strb	r3, [r7, #23]
			uint8_t b = 1 << (j & 0x07);
 8000566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000568:	f003 0307 	and.w	r3, r3, #7
 800056c:	2201      	movs	r2, #1
 800056e:	fa02 f303 	lsl.w	r3, r2, r3
 8000572:	75bb      	strb	r3, [r7, #22]
			if (( z & b ) != 0x00)
 8000574:	7dfa      	ldrb	r2, [r7, #23]
 8000576:	7dbb      	ldrb	r3, [r7, #22]
 8000578:	4013      	ands	r3, r2
 800057a:	b2db      	uxtb	r3, r3
 800057c:	2b00      	cmp	r3, #0
 800057e:	d00d      	beq.n	800059c <ILI9341_DrawChar+0xc4>
			{
				ILI9341_DrawPixel(X+i, Y+j, color);
 8000580:	6a3b      	ldr	r3, [r7, #32]
 8000582:	b29a      	uxth	r2, r3
 8000584:	89bb      	ldrh	r3, [r7, #12]
 8000586:	4413      	add	r3, r2
 8000588:	b298      	uxth	r0, r3
 800058a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800058c:	b29a      	uxth	r2, r3
 800058e:	88fb      	ldrh	r3, [r7, #6]
 8000590:	4413      	add	r3, r2
 8000592:	b29b      	uxth	r3, r3
 8000594:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8000596:	4619      	mov	r1, r3
 8000598:	f000 fb88 	bl	8000cac <ILI9341_DrawPixel>
		for (int i=0; i < fWidth; i++)
 800059c:	6a3b      	ldr	r3, [r7, #32]
 800059e:	3301      	adds	r3, #1
 80005a0:	623b      	str	r3, [r7, #32]
 80005a2:	7fbb      	ldrb	r3, [r7, #30]
 80005a4:	6a3a      	ldr	r2, [r7, #32]
 80005a6:	429a      	cmp	r2, r3
 80005a8:	dbcf      	blt.n	800054a <ILI9341_DrawChar+0x72>
	for (int j=0; j < fHeight; j++)
 80005aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ac:	3301      	adds	r3, #1
 80005ae:	627b      	str	r3, [r7, #36]	; 0x24
 80005b0:	7f7b      	ldrb	r3, [r7, #29]
 80005b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005b4:	429a      	cmp	r2, r3
 80005b6:	dbc5      	blt.n	8000544 <ILI9341_DrawChar+0x6c>
 80005b8:	e000      	b.n	80005bc <ILI9341_DrawChar+0xe4>
	if ((ch < 31) || (ch > 127)) return;
 80005ba:	bf00      	nop
			}
		}
	}
}
 80005bc:	372c      	adds	r7, #44	; 0x2c
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd90      	pop	{r4, r7, pc}

080005c2 <ILI9341_DrawText>:

void ILI9341_DrawText(const char* str,int num, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 80005c2:	b580      	push	{r7, lr}
 80005c4:	b08a      	sub	sp, #40	; 0x28
 80005c6:	af02      	add	r7, sp, #8
 80005c8:	60f8      	str	r0, [r7, #12]
 80005ca:	60b9      	str	r1, [r7, #8]
 80005cc:	607a      	str	r2, [r7, #4]
 80005ce:	807b      	strh	r3, [r7, #2]
	uint8_t charWidth;			/* Width of character */
	uint8_t fOffset = font[0];	/* Offset of character */
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	76fb      	strb	r3, [r7, #27]
	uint8_t fWidth = font[1];	/* Width of font */
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	785b      	ldrb	r3, [r3, #1]
 80005da:	76bb      	strb	r3, [r7, #26]

	for(int i = 0;i<num;i++)
 80005dc:	2300      	movs	r3, #0
 80005de:	61fb      	str	r3, [r7, #28]
 80005e0:	e02f      	b.n	8000642 <ILI9341_DrawText+0x80>
	{
		ILI9341_DrawChar(str[i], font, X, Y, color, bgcolor);
 80005e2:	69fb      	ldr	r3, [r7, #28]
 80005e4:	68fa      	ldr	r2, [r7, #12]
 80005e6:	4413      	add	r3, r2
 80005e8:	7818      	ldrb	r0, [r3, #0]
 80005ea:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80005ec:	887a      	ldrh	r2, [r7, #2]
 80005ee:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80005f0:	9301      	str	r3, [sp, #4]
 80005f2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80005f4:	9300      	str	r3, [sp, #0]
 80005f6:	460b      	mov	r3, r1
 80005f8:	6879      	ldr	r1, [r7, #4]
 80005fa:	f7ff ff6d 	bl	80004d8 <ILI9341_DrawChar>

		/* Check character width and calculate proper position */
		uint8_t *tempChar = (uint8_t*)&font[((*str - 0x20) * fOffset) + 4];
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	3b20      	subs	r3, #32
 8000604:	7efa      	ldrb	r2, [r7, #27]
 8000606:	fb02 f303 	mul.w	r3, r2, r3
 800060a:	3304      	adds	r3, #4
 800060c:	687a      	ldr	r2, [r7, #4]
 800060e:	4413      	add	r3, r2
 8000610:	617b      	str	r3, [r7, #20]
		charWidth = tempChar[0];
 8000612:	697b      	ldr	r3, [r7, #20]
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	74fb      	strb	r3, [r7, #19]

		if(charWidth + 2 < fWidth)
 8000618:	7cfb      	ldrb	r3, [r7, #19]
 800061a:	1c9a      	adds	r2, r3, #2
 800061c:	7ebb      	ldrb	r3, [r7, #26]
 800061e:	429a      	cmp	r2, r3
 8000620:	da07      	bge.n	8000632 <ILI9341_DrawText+0x70>
		{
			/* If character width is smaller than font width */
			X += (charWidth + 2);
 8000622:	7cfb      	ldrb	r3, [r7, #19]
 8000624:	b29a      	uxth	r2, r3
 8000626:	887b      	ldrh	r3, [r7, #2]
 8000628:	4413      	add	r3, r2
 800062a:	b29b      	uxth	r3, r3
 800062c:	3302      	adds	r3, #2
 800062e:	807b      	strh	r3, [r7, #2]
 8000630:	e004      	b.n	800063c <ILI9341_DrawText+0x7a>
		}
		else
		{
			X += fWidth;
 8000632:	7ebb      	ldrb	r3, [r7, #26]
 8000634:	b29a      	uxth	r2, r3
 8000636:	887b      	ldrh	r3, [r7, #2]
 8000638:	4413      	add	r3, r2
 800063a:	807b      	strh	r3, [r7, #2]
	for(int i = 0;i<num;i++)
 800063c:	69fb      	ldr	r3, [r7, #28]
 800063e:	3301      	adds	r3, #1
 8000640:	61fb      	str	r3, [r7, #28]
 8000642:	69fa      	ldr	r2, [r7, #28]
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	429a      	cmp	r2, r3
 8000648:	dbcb      	blt.n	80005e2 <ILI9341_DrawText+0x20>
		}
	}
}
 800064a:	bf00      	nop
 800064c:	bf00      	nop
 800064e:	3720      	adds	r7, #32
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}

08000654 <HAL_SPI_TxCpltCallback>:
#include "task.h"
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  /* Deselect when Tx Complete */
  if(hspi == HSPI_INSTANCE)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	4a06      	ldr	r2, [pc, #24]	; (8000678 <HAL_SPI_TxCpltCallback+0x24>)
 8000660:	4293      	cmp	r3, r2
 8000662:	d104      	bne.n	800066e <HAL_SPI_TxCpltCallback+0x1a>
  {
	  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000664:	2201      	movs	r2, #1
 8000666:	2102      	movs	r1, #2
 8000668:	4804      	ldr	r0, [pc, #16]	; (800067c <HAL_SPI_TxCpltCallback+0x28>)
 800066a:	f002 f8af 	bl	80027cc <HAL_GPIO_WritePin>
  }
}
 800066e:	bf00      	nop
 8000670:	3708      	adds	r7, #8
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	20012e40 	.word	0x20012e40
 800067c:	40020800 	.word	0x40020800

08000680 <ILI9341_SPI_Tx>:

static void ILI9341_SPI_Tx(uint8_t data)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 800068a:	bf00      	nop
 800068c:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <ILI9341_SPI_Tx+0x30>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	689b      	ldr	r3, [r3, #8]
 8000692:	f003 0302 	and.w	r3, r3, #2
 8000696:	2b02      	cmp	r3, #2
 8000698:	d1f8      	bne.n	800068c <ILI9341_SPI_Tx+0xc>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, &data, 1);
 800069a:	1dfb      	adds	r3, r7, #7
 800069c:	2201      	movs	r2, #1
 800069e:	4619      	mov	r1, r3
 80006a0:	4803      	ldr	r0, [pc, #12]	; (80006b0 <ILI9341_SPI_Tx+0x30>)
 80006a2:	f003 f8f1 	bl	8003888 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
}
 80006a6:	bf00      	nop
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20012e40 	.word	0x20012e40

080006b4 <ILI9341_SPI_TxBuffer>:

static void ILI9341_SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
 80006bc:	460b      	mov	r3, r1
 80006be:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 80006c0:	bf00      	nop
 80006c2:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <ILI9341_SPI_TxBuffer+0x30>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	689b      	ldr	r3, [r3, #8]
 80006c8:	f003 0302 	and.w	r3, r3, #2
 80006cc:	2b02      	cmp	r3, #2
 80006ce:	d1f8      	bne.n	80006c2 <ILI9341_SPI_TxBuffer+0xe>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, buffer, len);
 80006d0:	887b      	ldrh	r3, [r7, #2]
 80006d2:	461a      	mov	r2, r3
 80006d4:	6879      	ldr	r1, [r7, #4]
 80006d6:	4803      	ldr	r0, [pc, #12]	; (80006e4 <ILI9341_SPI_TxBuffer+0x30>)
 80006d8:	f003 f8d6 	bl	8003888 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, 10);
}
 80006dc:	bf00      	nop
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20012e40 	.word	0x20012e40

080006e8 <ILI9341_WriteCommand>:

void ILI9341_WriteCommand(uint8_t cmd)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	//command
 80006f2:	2200      	movs	r2, #0
 80006f4:	2104      	movs	r1, #4
 80006f6:	4808      	ldr	r0, [pc, #32]	; (8000718 <ILI9341_WriteCommand+0x30>)
 80006f8:	f002 f868 	bl	80027cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 80006fc:	2200      	movs	r2, #0
 80006fe:	2102      	movs	r1, #2
 8000700:	4805      	ldr	r0, [pc, #20]	; (8000718 <ILI9341_WriteCommand+0x30>)
 8000702:	f002 f863 	bl	80027cc <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(cmd);
 8000706:	79fb      	ldrb	r3, [r7, #7]
 8000708:	4618      	mov	r0, r3
 800070a:	f7ff ffb9 	bl	8000680 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 800070e:	bf00      	nop
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40020800 	.word	0x40020800

0800071c <ILI9341_WriteData>:

void ILI9341_WriteData(uint8_t data)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8000726:	2201      	movs	r2, #1
 8000728:	2104      	movs	r1, #4
 800072a:	480a      	ldr	r0, [pc, #40]	; (8000754 <ILI9341_WriteData+0x38>)
 800072c:	f002 f84e 	bl	80027cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8000730:	2200      	movs	r2, #0
 8000732:	2102      	movs	r1, #2
 8000734:	4807      	ldr	r0, [pc, #28]	; (8000754 <ILI9341_WriteData+0x38>)
 8000736:	f002 f849 	bl	80027cc <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(data);
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	4618      	mov	r0, r3
 800073e:	f7ff ff9f 	bl	8000680 <ILI9341_SPI_Tx>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
 8000742:	2201      	movs	r2, #1
 8000744:	2102      	movs	r1, #2
 8000746:	4803      	ldr	r0, [pc, #12]	; (8000754 <ILI9341_WriteData+0x38>)
 8000748:	f002 f840 	bl	80027cc <HAL_GPIO_WritePin>
}
 800074c:	bf00      	nop
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40020800 	.word	0x40020800

08000758 <ILI9341_WriteBuffer>:

void ILI9341_WriteBuffer(uint8_t *buffer, uint16_t len)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	460b      	mov	r3, r1
 8000762:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8000764:	2201      	movs	r2, #1
 8000766:	2104      	movs	r1, #4
 8000768:	480a      	ldr	r0, [pc, #40]	; (8000794 <ILI9341_WriteBuffer+0x3c>)
 800076a:	f002 f82f 	bl	80027cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 800076e:	2200      	movs	r2, #0
 8000770:	2102      	movs	r1, #2
 8000772:	4808      	ldr	r0, [pc, #32]	; (8000794 <ILI9341_WriteBuffer+0x3c>)
 8000774:	f002 f82a 	bl	80027cc <HAL_GPIO_WritePin>
	ILI9341_SPI_TxBuffer(buffer, len);
 8000778:	887b      	ldrh	r3, [r7, #2]
 800077a:	4619      	mov	r1, r3
 800077c:	6878      	ldr	r0, [r7, #4]
 800077e:	f7ff ff99 	bl	80006b4 <ILI9341_SPI_TxBuffer>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
 8000782:	2201      	movs	r2, #1
 8000784:	2102      	movs	r1, #2
 8000786:	4803      	ldr	r0, [pc, #12]	; (8000794 <ILI9341_WriteBuffer+0x3c>)
 8000788:	f002 f820 	bl	80027cc <HAL_GPIO_WritePin>
}
 800078c:	bf00      	nop
 800078e:	3708      	adds	r7, #8
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	40020800 	.word	0x40020800

08000798 <ILI9341_SetAddress>:

void ILI9341_SetAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8000798:	b590      	push	{r4, r7, lr}
 800079a:	b085      	sub	sp, #20
 800079c:	af00      	add	r7, sp, #0
 800079e:	4604      	mov	r4, r0
 80007a0:	4608      	mov	r0, r1
 80007a2:	4611      	mov	r1, r2
 80007a4:	461a      	mov	r2, r3
 80007a6:	4623      	mov	r3, r4
 80007a8:	80fb      	strh	r3, [r7, #6]
 80007aa:	4603      	mov	r3, r0
 80007ac:	80bb      	strh	r3, [r7, #4]
 80007ae:	460b      	mov	r3, r1
 80007b0:	807b      	strh	r3, [r7, #2]
 80007b2:	4613      	mov	r3, r2
 80007b4:	803b      	strh	r3, [r7, #0]
	uint8_t buffer[4];
	buffer[0] = x1 >> 8;
 80007b6:	88fb      	ldrh	r3, [r7, #6]
 80007b8:	0a1b      	lsrs	r3, r3, #8
 80007ba:	b29b      	uxth	r3, r3
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	733b      	strb	r3, [r7, #12]
	buffer[1] = x1;
 80007c0:	88fb      	ldrh	r3, [r7, #6]
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	737b      	strb	r3, [r7, #13]
	buffer[2] = x2 >> 8;
 80007c6:	887b      	ldrh	r3, [r7, #2]
 80007c8:	0a1b      	lsrs	r3, r3, #8
 80007ca:	b29b      	uxth	r3, r3
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	73bb      	strb	r3, [r7, #14]
	buffer[3] = x2;
 80007d0:	887b      	ldrh	r3, [r7, #2]
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2A);
 80007d6:	202a      	movs	r0, #42	; 0x2a
 80007d8:	f7ff ff86 	bl	80006e8 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 80007dc:	f107 030c 	add.w	r3, r7, #12
 80007e0:	2104      	movs	r1, #4
 80007e2:	4618      	mov	r0, r3
 80007e4:	f7ff ffb8 	bl	8000758 <ILI9341_WriteBuffer>

	buffer[0] = y1 >> 8;
 80007e8:	88bb      	ldrh	r3, [r7, #4]
 80007ea:	0a1b      	lsrs	r3, r3, #8
 80007ec:	b29b      	uxth	r3, r3
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	733b      	strb	r3, [r7, #12]
	buffer[1] = y1;
 80007f2:	88bb      	ldrh	r3, [r7, #4]
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	737b      	strb	r3, [r7, #13]
	buffer[2] = y2 >> 8;
 80007f8:	883b      	ldrh	r3, [r7, #0]
 80007fa:	0a1b      	lsrs	r3, r3, #8
 80007fc:	b29b      	uxth	r3, r3
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	73bb      	strb	r3, [r7, #14]
	buffer[3] = y2;
 8000802:	883b      	ldrh	r3, [r7, #0]
 8000804:	b2db      	uxtb	r3, r3
 8000806:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2B);
 8000808:	202b      	movs	r0, #43	; 0x2b
 800080a:	f7ff ff6d 	bl	80006e8 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 800080e:	f107 030c 	add.w	r3, r7, #12
 8000812:	2104      	movs	r1, #4
 8000814:	4618      	mov	r0, r3
 8000816:	f7ff ff9f 	bl	8000758 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);
 800081a:	202c      	movs	r0, #44	; 0x2c
 800081c:	f7ff ff64 	bl	80006e8 <ILI9341_WriteCommand>
}
 8000820:	bf00      	nop
 8000822:	3714      	adds	r7, #20
 8000824:	46bd      	mov	sp, r7
 8000826:	bd90      	pop	{r4, r7, pc}

08000828 <ILI9341_Reset>:

void ILI9341_Reset(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);	//Disable
 800082c:	2200      	movs	r2, #0
 800082e:	2108      	movs	r1, #8
 8000830:	480c      	ldr	r0, [pc, #48]	; (8000864 <ILI9341_Reset+0x3c>)
 8000832:	f001 ffcb 	bl	80027cc <HAL_GPIO_WritePin>
	vTaskDelay(10);
 8000836:	200a      	movs	r0, #10
 8000838:	f004 fda6 	bl	8005388 <vTaskDelay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);		//Select
 800083c:	2200      	movs	r2, #0
 800083e:	2102      	movs	r1, #2
 8000840:	4808      	ldr	r0, [pc, #32]	; (8000864 <ILI9341_Reset+0x3c>)
 8000842:	f001 ffc3 	bl	80027cc <HAL_GPIO_WritePin>
	vTaskDelay(10);
 8000846:	200a      	movs	r0, #10
 8000848:	f004 fd9e 	bl	8005388 <vTaskDelay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 800084c:	2201      	movs	r2, #1
 800084e:	2108      	movs	r1, #8
 8000850:	4804      	ldr	r0, [pc, #16]	; (8000864 <ILI9341_Reset+0x3c>)
 8000852:	f001 ffbb 	bl	80027cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET); 		//Deselect
 8000856:	2201      	movs	r2, #1
 8000858:	2102      	movs	r1, #2
 800085a:	4802      	ldr	r0, [pc, #8]	; (8000864 <ILI9341_Reset+0x3c>)
 800085c:	f001 ffb6 	bl	80027cc <HAL_GPIO_WritePin>
}
 8000860:	bf00      	nop
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40020800 	.word	0x40020800

08000868 <ILI9341_Enable>:

void ILI9341_Enable(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 800086c:	2201      	movs	r2, #1
 800086e:	2108      	movs	r1, #8
 8000870:	4802      	ldr	r0, [pc, #8]	; (800087c <ILI9341_Enable+0x14>)
 8000872:	f001 ffab 	bl	80027cc <HAL_GPIO_WritePin>
}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40020800 	.word	0x40020800

08000880 <ILI9341_Init>:

void ILI9341_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
	ILI9341_Enable();
 8000884:	f7ff fff0 	bl	8000868 <ILI9341_Enable>
	ILI9341_Reset();
 8000888:	f7ff ffce 	bl	8000828 <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_WriteCommand(0x01);
 800088c:	2001      	movs	r0, #1
 800088e:	f7ff ff2b 	bl	80006e8 <ILI9341_WriteCommand>
	vTaskDelay(10);
 8000892:	200a      	movs	r0, #10
 8000894:	f004 fd78 	bl	8005388 <vTaskDelay>

	//POWER CONTROL A
	ILI9341_WriteCommand(0xCB);
 8000898:	20cb      	movs	r0, #203	; 0xcb
 800089a:	f7ff ff25 	bl	80006e8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x39);
 800089e:	2039      	movs	r0, #57	; 0x39
 80008a0:	f7ff ff3c 	bl	800071c <ILI9341_WriteData>
	ILI9341_WriteData(0x2C);
 80008a4:	202c      	movs	r0, #44	; 0x2c
 80008a6:	f7ff ff39 	bl	800071c <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 80008aa:	2000      	movs	r0, #0
 80008ac:	f7ff ff36 	bl	800071c <ILI9341_WriteData>
	ILI9341_WriteData(0x34);
 80008b0:	2034      	movs	r0, #52	; 0x34
 80008b2:	f7ff ff33 	bl	800071c <ILI9341_WriteData>
	ILI9341_WriteData(0x02);
 80008b6:	2002      	movs	r0, #2
 80008b8:	f7ff ff30 	bl	800071c <ILI9341_WriteData>

	//POWER CONTROL B
	ILI9341_WriteCommand(0xCF);
 80008bc:	20cf      	movs	r0, #207	; 0xcf
 80008be:	f7ff ff13 	bl	80006e8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80008c2:	2000      	movs	r0, #0
 80008c4:	f7ff ff2a 	bl	800071c <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 80008c8:	20c1      	movs	r0, #193	; 0xc1
 80008ca:	f7ff ff27 	bl	800071c <ILI9341_WriteData>
	ILI9341_WriteData(0x30);
 80008ce:	2030      	movs	r0, #48	; 0x30
 80008d0:	f7ff ff24 	bl	800071c <ILI9341_WriteData>

	//DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(0xE8);
 80008d4:	20e8      	movs	r0, #232	; 0xe8
 80008d6:	f7ff ff07 	bl	80006e8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x85);
 80008da:	2085      	movs	r0, #133	; 0x85
 80008dc:	f7ff ff1e 	bl	800071c <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 80008e0:	2000      	movs	r0, #0
 80008e2:	f7ff ff1b 	bl	800071c <ILI9341_WriteData>
	ILI9341_WriteData(0x78);
 80008e6:	2078      	movs	r0, #120	; 0x78
 80008e8:	f7ff ff18 	bl	800071c <ILI9341_WriteData>

	//DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(0xEA);
 80008ec:	20ea      	movs	r0, #234	; 0xea
 80008ee:	f7ff fefb 	bl	80006e8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80008f2:	2000      	movs	r0, #0
 80008f4:	f7ff ff12 	bl	800071c <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 80008f8:	2000      	movs	r0, #0
 80008fa:	f7ff ff0f 	bl	800071c <ILI9341_WriteData>

	//POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(0xED);
 80008fe:	20ed      	movs	r0, #237	; 0xed
 8000900:	f7ff fef2 	bl	80006e8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x64);
 8000904:	2064      	movs	r0, #100	; 0x64
 8000906:	f7ff ff09 	bl	800071c <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 800090a:	2003      	movs	r0, #3
 800090c:	f7ff ff06 	bl	800071c <ILI9341_WriteData>
	ILI9341_WriteData(0x12);
 8000910:	2012      	movs	r0, #18
 8000912:	f7ff ff03 	bl	800071c <ILI9341_WriteData>
	ILI9341_WriteData(0x81);
 8000916:	2081      	movs	r0, #129	; 0x81
 8000918:	f7ff ff00 	bl	800071c <ILI9341_WriteData>

	//PUMP RATIO CONTROL
	ILI9341_WriteCommand(0xF7);
 800091c:	20f7      	movs	r0, #247	; 0xf7
 800091e:	f7ff fee3 	bl	80006e8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x20);
 8000922:	2020      	movs	r0, #32
 8000924:	f7ff fefa 	bl	800071c <ILI9341_WriteData>

	//POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(0xC0);
 8000928:	20c0      	movs	r0, #192	; 0xc0
 800092a:	f7ff fedd 	bl	80006e8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x23);
 800092e:	2023      	movs	r0, #35	; 0x23
 8000930:	f7ff fef4 	bl	800071c <ILI9341_WriteData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(0xC1);
 8000934:	20c1      	movs	r0, #193	; 0xc1
 8000936:	f7ff fed7 	bl	80006e8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x10);
 800093a:	2010      	movs	r0, #16
 800093c:	f7ff feee 	bl	800071c <ILI9341_WriteData>

	//VCM CONTROL
	ILI9341_WriteCommand(0xC5);
 8000940:	20c5      	movs	r0, #197	; 0xc5
 8000942:	f7ff fed1 	bl	80006e8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x3E);
 8000946:	203e      	movs	r0, #62	; 0x3e
 8000948:	f7ff fee8 	bl	800071c <ILI9341_WriteData>
	ILI9341_WriteData(0x28);
 800094c:	2028      	movs	r0, #40	; 0x28
 800094e:	f7ff fee5 	bl	800071c <ILI9341_WriteData>

	//VCM CONTROL 2
	ILI9341_WriteCommand(0xC7);
 8000952:	20c7      	movs	r0, #199	; 0xc7
 8000954:	f7ff fec8 	bl	80006e8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x86);
 8000958:	2086      	movs	r0, #134	; 0x86
 800095a:	f7ff fedf 	bl	800071c <ILI9341_WriteData>

	//MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(0x36);
 800095e:	2036      	movs	r0, #54	; 0x36
 8000960:	f7ff fec2 	bl	80006e8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x48);
 8000964:	2048      	movs	r0, #72	; 0x48
 8000966:	f7ff fed9 	bl	800071c <ILI9341_WriteData>

	//PIXEL FORMAT
	ILI9341_WriteCommand(0x3A);
 800096a:	203a      	movs	r0, #58	; 0x3a
 800096c:	f7ff febc 	bl	80006e8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x55);
 8000970:	2055      	movs	r0, #85	; 0x55
 8000972:	f7ff fed3 	bl	800071c <ILI9341_WriteData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(0xB1);
 8000976:	20b1      	movs	r0, #177	; 0xb1
 8000978:	f7ff feb6 	bl	80006e8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 800097c:	2000      	movs	r0, #0
 800097e:	f7ff fecd 	bl	800071c <ILI9341_WriteData>
	ILI9341_WriteData(0x18);
 8000982:	2018      	movs	r0, #24
 8000984:	f7ff feca 	bl	800071c <ILI9341_WriteData>

	//DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(0xB6);
 8000988:	20b6      	movs	r0, #182	; 0xb6
 800098a:	f7ff fead 	bl	80006e8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x08);
 800098e:	2008      	movs	r0, #8
 8000990:	f7ff fec4 	bl	800071c <ILI9341_WriteData>
	ILI9341_WriteData(0x82);
 8000994:	2082      	movs	r0, #130	; 0x82
 8000996:	f7ff fec1 	bl	800071c <ILI9341_WriteData>
	ILI9341_WriteData(0x27);
 800099a:	2027      	movs	r0, #39	; 0x27
 800099c:	f7ff febe 	bl	800071c <ILI9341_WriteData>

	//3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(0xF2);
 80009a0:	20f2      	movs	r0, #242	; 0xf2
 80009a2:	f7ff fea1 	bl	80006e8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80009a6:	2000      	movs	r0, #0
 80009a8:	f7ff feb8 	bl	800071c <ILI9341_WriteData>

	//GAMMA CURVE SELECTED
	ILI9341_WriteCommand(0x26);
 80009ac:	2026      	movs	r0, #38	; 0x26
 80009ae:	f7ff fe9b 	bl	80006e8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x01);
 80009b2:	2001      	movs	r0, #1
 80009b4:	f7ff feb2 	bl	800071c <ILI9341_WriteData>

	//POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE0);
 80009b8:	20e0      	movs	r0, #224	; 0xe0
 80009ba:	f7ff fe95 	bl	80006e8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x0F);
 80009be:	200f      	movs	r0, #15
 80009c0:	f7ff feac 	bl	800071c <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 80009c4:	2031      	movs	r0, #49	; 0x31
 80009c6:	f7ff fea9 	bl	800071c <ILI9341_WriteData>
	ILI9341_WriteData(0x2B);
 80009ca:	202b      	movs	r0, #43	; 0x2b
 80009cc:	f7ff fea6 	bl	800071c <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 80009d0:	200c      	movs	r0, #12
 80009d2:	f7ff fea3 	bl	800071c <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 80009d6:	200e      	movs	r0, #14
 80009d8:	f7ff fea0 	bl	800071c <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 80009dc:	2008      	movs	r0, #8
 80009de:	f7ff fe9d 	bl	800071c <ILI9341_WriteData>
	ILI9341_WriteData(0x4E);
 80009e2:	204e      	movs	r0, #78	; 0x4e
 80009e4:	f7ff fe9a 	bl	800071c <ILI9341_WriteData>
	ILI9341_WriteData(0xF1);
 80009e8:	20f1      	movs	r0, #241	; 0xf1
 80009ea:	f7ff fe97 	bl	800071c <ILI9341_WriteData>
	ILI9341_WriteData(0x37);
 80009ee:	2037      	movs	r0, #55	; 0x37
 80009f0:	f7ff fe94 	bl	800071c <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 80009f4:	2007      	movs	r0, #7
 80009f6:	f7ff fe91 	bl	800071c <ILI9341_WriteData>
	ILI9341_WriteData(0x10);
 80009fa:	2010      	movs	r0, #16
 80009fc:	f7ff fe8e 	bl	800071c <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000a00:	2003      	movs	r0, #3
 8000a02:	f7ff fe8b 	bl	800071c <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000a06:	200e      	movs	r0, #14
 8000a08:	f7ff fe88 	bl	800071c <ILI9341_WriteData>
	ILI9341_WriteData(0x09);
 8000a0c:	2009      	movs	r0, #9
 8000a0e:	f7ff fe85 	bl	800071c <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000a12:	2000      	movs	r0, #0
 8000a14:	f7ff fe82 	bl	800071c <ILI9341_WriteData>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE1);
 8000a18:	20e1      	movs	r0, #225	; 0xe1
 8000a1a:	f7ff fe65 	bl	80006e8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000a1e:	2000      	movs	r0, #0
 8000a20:	f7ff fe7c 	bl	800071c <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000a24:	200e      	movs	r0, #14
 8000a26:	f7ff fe79 	bl	800071c <ILI9341_WriteData>
	ILI9341_WriteData(0x14);
 8000a2a:	2014      	movs	r0, #20
 8000a2c:	f7ff fe76 	bl	800071c <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000a30:	2003      	movs	r0, #3
 8000a32:	f7ff fe73 	bl	800071c <ILI9341_WriteData>
	ILI9341_WriteData(0x11);
 8000a36:	2011      	movs	r0, #17
 8000a38:	f7ff fe70 	bl	800071c <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8000a3c:	2007      	movs	r0, #7
 8000a3e:	f7ff fe6d 	bl	800071c <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000a42:	2031      	movs	r0, #49	; 0x31
 8000a44:	f7ff fe6a 	bl	800071c <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8000a48:	20c1      	movs	r0, #193	; 0xc1
 8000a4a:	f7ff fe67 	bl	800071c <ILI9341_WriteData>
	ILI9341_WriteData(0x48);
 8000a4e:	2048      	movs	r0, #72	; 0x48
 8000a50:	f7ff fe64 	bl	800071c <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8000a54:	2008      	movs	r0, #8
 8000a56:	f7ff fe61 	bl	800071c <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8000a5a:	200f      	movs	r0, #15
 8000a5c:	f7ff fe5e 	bl	800071c <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8000a60:	200c      	movs	r0, #12
 8000a62:	f7ff fe5b 	bl	800071c <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000a66:	2031      	movs	r0, #49	; 0x31
 8000a68:	f7ff fe58 	bl	800071c <ILI9341_WriteData>
	ILI9341_WriteData(0x36);
 8000a6c:	2036      	movs	r0, #54	; 0x36
 8000a6e:	f7ff fe55 	bl	800071c <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8000a72:	200f      	movs	r0, #15
 8000a74:	f7ff fe52 	bl	800071c <ILI9341_WriteData>

	//EXIT SLEEP
	ILI9341_WriteCommand(0x11);
 8000a78:	2011      	movs	r0, #17
 8000a7a:	f7ff fe35 	bl	80006e8 <ILI9341_WriteCommand>
	vTaskDelay(100);
 8000a7e:	2064      	movs	r0, #100	; 0x64
 8000a80:	f004 fc82 	bl	8005388 <vTaskDelay>

	//TURN ON DISPLAY
	ILI9341_WriteCommand(0x29);
 8000a84:	2029      	movs	r0, #41	; 0x29
 8000a86:	f7ff fe2f 	bl	80006e8 <ILI9341_WriteCommand>

	//STARTING ROTATION
	ILI9341_SetRotation(SCREEN_VERTICAL_2);
 8000a8a:	2002      	movs	r0, #2
 8000a8c:	f000 f802 	bl	8000a94 <ILI9341_SetRotation>
}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <ILI9341_SetRotation>:


void ILI9341_SetRotation(uint8_t rotation)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	71fb      	strb	r3, [r7, #7]
	ILI9341_WriteCommand(0x36);
 8000a9e:	2036      	movs	r0, #54	; 0x36
 8000aa0:	f7ff fe22 	bl	80006e8 <ILI9341_WriteCommand>
	vTaskDelay(1);
 8000aa4:	2001      	movs	r0, #1
 8000aa6:	f004 fc6f 	bl	8005388 <vTaskDelay>

	switch(rotation)
 8000aaa:	79fb      	ldrb	r3, [r7, #7]
 8000aac:	2b03      	cmp	r3, #3
 8000aae:	d837      	bhi.n	8000b20 <ILI9341_SetRotation+0x8c>
 8000ab0:	a201      	add	r2, pc, #4	; (adr r2, 8000ab8 <ILI9341_SetRotation+0x24>)
 8000ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ab6:	bf00      	nop
 8000ab8:	08000ac9 	.word	0x08000ac9
 8000abc:	08000adf 	.word	0x08000adf
 8000ac0:	08000af5 	.word	0x08000af5
 8000ac4:	08000b0b 	.word	0x08000b0b
	{
	case SCREEN_VERTICAL_1:
		ILI9341_WriteData(0x40|0x08);
 8000ac8:	2048      	movs	r0, #72	; 0x48
 8000aca:	f7ff fe27 	bl	800071c <ILI9341_WriteData>
		LCD_WIDTH = 320;
 8000ace:	4b17      	ldr	r3, [pc, #92]	; (8000b2c <ILI9341_SetRotation+0x98>)
 8000ad0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000ad4:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8000ad6:	4b16      	ldr	r3, [pc, #88]	; (8000b30 <ILI9341_SetRotation+0x9c>)
 8000ad8:	22f0      	movs	r2, #240	; 0xf0
 8000ada:	801a      	strh	r2, [r3, #0]
		break;
 8000adc:	e021      	b.n	8000b22 <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_1:
		ILI9341_WriteData(0x20 | 0x08);
 8000ade:	2028      	movs	r0, #40	; 0x28
 8000ae0:	f7ff fe1c 	bl	800071c <ILI9341_WriteData>
		LCD_WIDTH  = 240;
 8000ae4:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <ILI9341_SetRotation+0x98>)
 8000ae6:	22f0      	movs	r2, #240	; 0xf0
 8000ae8:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8000aea:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <ILI9341_SetRotation+0x9c>)
 8000aec:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000af0:	801a      	strh	r2, [r3, #0]
		break;
 8000af2:	e016      	b.n	8000b22 <ILI9341_SetRotation+0x8e>
	case SCREEN_VERTICAL_2:
		ILI9341_WriteData(0x80|0x08);
 8000af4:	2088      	movs	r0, #136	; 0x88
 8000af6:	f7ff fe11 	bl	800071c <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8000afa:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <ILI9341_SetRotation+0x98>)
 8000afc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000b00:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8000b02:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <ILI9341_SetRotation+0x9c>)
 8000b04:	22f0      	movs	r2, #240	; 0xf0
 8000b06:	801a      	strh	r2, [r3, #0]
		break;
 8000b08:	e00b      	b.n	8000b22 <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_2:
		ILI9341_WriteData(0x40 | 0x80 | 0x20 | 0x08);
 8000b0a:	20e8      	movs	r0, #232	; 0xe8
 8000b0c:	f7ff fe06 	bl	800071c <ILI9341_WriteData>
		LCD_WIDTH  = 240;
 8000b10:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <ILI9341_SetRotation+0x98>)
 8000b12:	22f0      	movs	r2, #240	; 0xf0
 8000b14:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8000b16:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <ILI9341_SetRotation+0x9c>)
 8000b18:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000b1c:	801a      	strh	r2, [r3, #0]
		break;
 8000b1e:	e000      	b.n	8000b22 <ILI9341_SetRotation+0x8e>
	default:
		break;
 8000b20:	bf00      	nop
	}
}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000002 	.word	0x20000002
 8000b30:	20000000 	.word	0x20000000

08000b34 <ILI9341_DrawColorBurst>:
	uint8_t buffer[2] = {color>>8, color};
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
}

void ILI9341_DrawColorBurst(uint16_t color, uint32_t size)
{
 8000b34:	b5b0      	push	{r4, r5, r7, lr}
 8000b36:	b08c      	sub	sp, #48	; 0x30
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	6039      	str	r1, [r7, #0]
 8000b3e:	80fb      	strh	r3, [r7, #6]
 8000b40:	466b      	mov	r3, sp
 8000b42:	461d      	mov	r5, r3
	uint32_t BufferSize = 0;
 8000b44:	2300      	movs	r3, #0
 8000b46:	627b      	str	r3, [r7, #36]	; 0x24

	if((size*2) < BURST_MAX_SIZE)
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	005b      	lsls	r3, r3, #1
 8000b4c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000b50:	d202      	bcs.n	8000b58 <ILI9341_DrawColorBurst+0x24>
	{
		BufferSize = size;
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	627b      	str	r3, [r7, #36]	; 0x24
 8000b56:	e002      	b.n	8000b5e <ILI9341_DrawColorBurst+0x2a>
	}
	else
	{
		BufferSize = BURST_MAX_SIZE;
 8000b58:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
	}

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8000b5e:	2201      	movs	r2, #1
 8000b60:	2104      	movs	r1, #4
 8000b62:	483d      	ldr	r0, [pc, #244]	; (8000c58 <ILI9341_DrawColorBurst+0x124>)
 8000b64:	f001 fe32 	bl	80027cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	2102      	movs	r1, #2
 8000b6c:	483a      	ldr	r0, [pc, #232]	; (8000c58 <ILI9341_DrawColorBurst+0x124>)
 8000b6e:	f001 fe2d 	bl	80027cc <HAL_GPIO_WritePin>

	uint8_t chifted = color>>8;
 8000b72:	88fb      	ldrh	r3, [r7, #6]
 8000b74:	0a1b      	lsrs	r3, r3, #8
 8000b76:	b29b      	uxth	r3, r3
 8000b78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t BurstBuffer[BufferSize];
 8000b7c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8000b7e:	4623      	mov	r3, r4
 8000b80:	3b01      	subs	r3, #1
 8000b82:	61fb      	str	r3, [r7, #28]
 8000b84:	4620      	mov	r0, r4
 8000b86:	f04f 0100 	mov.w	r1, #0
 8000b8a:	f04f 0200 	mov.w	r2, #0
 8000b8e:	f04f 0300 	mov.w	r3, #0
 8000b92:	00cb      	lsls	r3, r1, #3
 8000b94:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000b98:	00c2      	lsls	r2, r0, #3
 8000b9a:	4620      	mov	r0, r4
 8000b9c:	f04f 0100 	mov.w	r1, #0
 8000ba0:	f04f 0200 	mov.w	r2, #0
 8000ba4:	f04f 0300 	mov.w	r3, #0
 8000ba8:	00cb      	lsls	r3, r1, #3
 8000baa:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000bae:	00c2      	lsls	r2, r0, #3
 8000bb0:	1de3      	adds	r3, r4, #7
 8000bb2:	08db      	lsrs	r3, r3, #3
 8000bb4:	00db      	lsls	r3, r3, #3
 8000bb6:	ebad 0d03 	sub.w	sp, sp, r3
 8000bba:	466b      	mov	r3, sp
 8000bbc:	3300      	adds	r3, #0
 8000bbe:	61bb      	str	r3, [r7, #24]

	for(uint32_t j = 0; j < BufferSize; j+=2)
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8000bc4:	e00e      	b.n	8000be4 <ILI9341_DrawColorBurst+0xb0>
	{
		BurstBuffer[j] = chifted;
 8000bc6:	69ba      	ldr	r2, [r7, #24]
 8000bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bca:	4413      	add	r3, r2
 8000bcc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000bd0:	701a      	strb	r2, [r3, #0]
		BurstBuffer[j+1] = color;
 8000bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	88fa      	ldrh	r2, [r7, #6]
 8000bd8:	b2d1      	uxtb	r1, r2
 8000bda:	69ba      	ldr	r2, [r7, #24]
 8000bdc:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < BufferSize; j+=2)
 8000bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000be0:	3302      	adds	r3, #2
 8000be2:	62bb      	str	r3, [r7, #40]	; 0x28
 8000be4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be8:	429a      	cmp	r2, r3
 8000bea:	d3ec      	bcc.n	8000bc6 <ILI9341_DrawColorBurst+0x92>
	}

	uint32_t SendingSize = size * 2;
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	617b      	str	r3, [r7, #20]
	uint32_t SendingInBlock = SendingSize / BufferSize;
 8000bf2:	697a      	ldr	r2, [r7, #20]
 8000bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bfa:	613b      	str	r3, [r7, #16]
	uint32_t RemainderFromBlock = SendingSize % BufferSize;
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c00:	fbb3 f2f2 	udiv	r2, r3, r2
 8000c04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000c06:	fb01 f202 	mul.w	r2, r1, r2
 8000c0a:	1a9b      	subs	r3, r3, r2
 8000c0c:	60fb      	str	r3, [r7, #12]

	if(SendingInBlock != 0)
 8000c0e:	693b      	ldr	r3, [r7, #16]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d010      	beq.n	8000c36 <ILI9341_DrawColorBurst+0x102>
	{
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8000c14:	2300      	movs	r3, #0
 8000c16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c18:	e009      	b.n	8000c2e <ILI9341_DrawColorBurst+0xfa>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, BufferSize, 10);
 8000c1a:	69b9      	ldr	r1, [r7, #24]
 8000c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c1e:	b29a      	uxth	r2, r3
 8000c20:	230a      	movs	r3, #10
 8000c22:	480e      	ldr	r0, [pc, #56]	; (8000c5c <ILI9341_DrawColorBurst+0x128>)
 8000c24:	f002 fb51 	bl	80032ca <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8000c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c30:	693b      	ldr	r3, [r7, #16]
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d3f1      	bcc.n	8000c1a <ILI9341_DrawColorBurst+0xe6>
		}
	}

	HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, RemainderFromBlock, 10);
 8000c36:	69b9      	ldr	r1, [r7, #24]
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	b29a      	uxth	r2, r3
 8000c3c:	230a      	movs	r3, #10
 8000c3e:	4807      	ldr	r0, [pc, #28]	; (8000c5c <ILI9341_DrawColorBurst+0x128>)
 8000c40:	f002 fb43 	bl	80032ca <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000c44:	2201      	movs	r2, #1
 8000c46:	2102      	movs	r1, #2
 8000c48:	4803      	ldr	r0, [pc, #12]	; (8000c58 <ILI9341_DrawColorBurst+0x124>)
 8000c4a:	f001 fdbf 	bl	80027cc <HAL_GPIO_WritePin>
 8000c4e:	46ad      	mov	sp, r5
}
 8000c50:	bf00      	nop
 8000c52:	3730      	adds	r7, #48	; 0x30
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bdb0      	pop	{r4, r5, r7, pc}
 8000c58:	40020800 	.word	0x40020800
 8000c5c:	20012e40 	.word	0x20012e40

08000c60 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	80fb      	strh	r3, [r7, #6]
	ILI9341_SetAddress(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8000c6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ca4 <ILI9341_FillScreen+0x44>)
 8000c6c:	881b      	ldrh	r3, [r3, #0]
 8000c6e:	b29a      	uxth	r2, r3
 8000c70:	4b0d      	ldr	r3, [pc, #52]	; (8000ca8 <ILI9341_FillScreen+0x48>)
 8000c72:	881b      	ldrh	r3, [r3, #0]
 8000c74:	b29b      	uxth	r3, r3
 8000c76:	2100      	movs	r1, #0
 8000c78:	2000      	movs	r0, #0
 8000c7a:	f7ff fd8d 	bl	8000798 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, LCD_WIDTH*LCD_HEIGHT);
 8000c7e:	4b09      	ldr	r3, [pc, #36]	; (8000ca4 <ILI9341_FillScreen+0x44>)
 8000c80:	881b      	ldrh	r3, [r3, #0]
 8000c82:	b29b      	uxth	r3, r3
 8000c84:	461a      	mov	r2, r3
 8000c86:	4b08      	ldr	r3, [pc, #32]	; (8000ca8 <ILI9341_FillScreen+0x48>)
 8000c88:	881b      	ldrh	r3, [r3, #0]
 8000c8a:	b29b      	uxth	r3, r3
 8000c8c:	fb03 f302 	mul.w	r3, r3, r2
 8000c90:	461a      	mov	r2, r3
 8000c92:	88fb      	ldrh	r3, [r7, #6]
 8000c94:	4611      	mov	r1, r2
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff ff4c 	bl	8000b34 <ILI9341_DrawColorBurst>
}
 8000c9c:	bf00      	nop
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	20000002 	.word	0x20000002
 8000ca8:	20000000 	.word	0x20000000

08000cac <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x,uint16_t y,uint16_t color)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b086      	sub	sp, #24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	80fb      	strh	r3, [r7, #6]
 8000cb6:	460b      	mov	r3, r1
 8000cb8:	80bb      	strh	r3, [r7, #4]
 8000cba:	4613      	mov	r3, r2
 8000cbc:	807b      	strh	r3, [r7, #2]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000cbe:	4b2c      	ldr	r3, [pc, #176]	; (8000d70 <ILI9341_DrawPixel+0xc4>)
 8000cc0:	881b      	ldrh	r3, [r3, #0]
 8000cc2:	b29b      	uxth	r3, r3
 8000cc4:	88fa      	ldrh	r2, [r7, #6]
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	d24d      	bcs.n	8000d66 <ILI9341_DrawPixel+0xba>
 8000cca:	4b2a      	ldr	r3, [pc, #168]	; (8000d74 <ILI9341_DrawPixel+0xc8>)
 8000ccc:	881b      	ldrh	r3, [r3, #0]
 8000cce:	b29b      	uxth	r3, r3
 8000cd0:	88ba      	ldrh	r2, [r7, #4]
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d247      	bcs.n	8000d66 <ILI9341_DrawPixel+0xba>

	uint8_t bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 8000cd6:	88fb      	ldrh	r3, [r7, #6]
 8000cd8:	0a1b      	lsrs	r3, r3, #8
 8000cda:	b29b      	uxth	r3, r3
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	753b      	strb	r3, [r7, #20]
 8000ce0:	88fb      	ldrh	r3, [r7, #6]
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	757b      	strb	r3, [r7, #21]
 8000ce6:	88fb      	ldrh	r3, [r7, #6]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	121b      	asrs	r3, r3, #8
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	75bb      	strb	r3, [r7, #22]
 8000cf0:	88fb      	ldrh	r3, [r7, #6]
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	75fb      	strb	r3, [r7, #23]
	uint8_t bufferY[4] = {y>>8, y, (y+1)>>8, (y+1)};
 8000cfa:	88bb      	ldrh	r3, [r7, #4]
 8000cfc:	0a1b      	lsrs	r3, r3, #8
 8000cfe:	b29b      	uxth	r3, r3
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	743b      	strb	r3, [r7, #16]
 8000d04:	88bb      	ldrh	r3, [r7, #4]
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	747b      	strb	r3, [r7, #17]
 8000d0a:	88bb      	ldrh	r3, [r7, #4]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	121b      	asrs	r3, r3, #8
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	74bb      	strb	r3, [r7, #18]
 8000d14:	88bb      	ldrh	r3, [r7, #4]
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	3301      	adds	r3, #1
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	74fb      	strb	r3, [r7, #19]
	uint8_t bufferC[2] = {color>>8, color};
 8000d1e:	887b      	ldrh	r3, [r7, #2]
 8000d20:	0a1b      	lsrs	r3, r3, #8
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	733b      	strb	r3, [r7, #12]
 8000d28:	887b      	ldrh	r3, [r7, #2]
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	737b      	strb	r3, [r7, #13]

	ILI9341_WriteCommand(0x2A);						//ADDRESS
 8000d2e:	202a      	movs	r0, #42	; 0x2a
 8000d30:	f7ff fcda 	bl	80006e8 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferX, sizeof(bufferX));	//XDATA
 8000d34:	f107 0314 	add.w	r3, r7, #20
 8000d38:	2104      	movs	r1, #4
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff fd0c 	bl	8000758 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2B);						//ADDRESS
 8000d40:	202b      	movs	r0, #43	; 0x2b
 8000d42:	f7ff fcd1 	bl	80006e8 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferY, sizeof(bufferY));	//YDATA
 8000d46:	f107 0310 	add.w	r3, r7, #16
 8000d4a:	2104      	movs	r1, #4
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff fd03 	bl	8000758 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);						//ADDRESS
 8000d52:	202c      	movs	r0, #44	; 0x2c
 8000d54:	f7ff fcc8 	bl	80006e8 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferC, sizeof(bufferC));	//COLOR
 8000d58:	f107 030c 	add.w	r3, r7, #12
 8000d5c:	2102      	movs	r1, #2
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff fcfa 	bl	8000758 <ILI9341_WriteBuffer>
 8000d64:	e000      	b.n	8000d68 <ILI9341_DrawPixel+0xbc>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000d66:	bf00      	nop
}
 8000d68:	3718      	adds	r7, #24
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000002 	.word	0x20000002
 8000d74:	20000000 	.word	0x20000000

08000d78 <ILI9341_DrawRectangle>:

void ILI9341_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 8000d78:	b590      	push	{r4, r7, lr}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4604      	mov	r4, r0
 8000d80:	4608      	mov	r0, r1
 8000d82:	4611      	mov	r1, r2
 8000d84:	461a      	mov	r2, r3
 8000d86:	4623      	mov	r3, r4
 8000d88:	80fb      	strh	r3, [r7, #6]
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	80bb      	strh	r3, [r7, #4]
 8000d8e:	460b      	mov	r3, r1
 8000d90:	807b      	strh	r3, [r7, #2]
 8000d92:	4613      	mov	r3, r2
 8000d94:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000d96:	4b24      	ldr	r3, [pc, #144]	; (8000e28 <ILI9341_DrawRectangle+0xb0>)
 8000d98:	881b      	ldrh	r3, [r3, #0]
 8000d9a:	b29b      	uxth	r3, r3
 8000d9c:	88fa      	ldrh	r2, [r7, #6]
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	d23d      	bcs.n	8000e1e <ILI9341_DrawRectangle+0xa6>
 8000da2:	4b22      	ldr	r3, [pc, #136]	; (8000e2c <ILI9341_DrawRectangle+0xb4>)
 8000da4:	881b      	ldrh	r3, [r3, #0]
 8000da6:	b29b      	uxth	r3, r3
 8000da8:	88ba      	ldrh	r2, [r7, #4]
 8000daa:	429a      	cmp	r2, r3
 8000dac:	d237      	bcs.n	8000e1e <ILI9341_DrawRectangle+0xa6>

	if((x+width-1)>=LCD_WIDTH)
 8000dae:	88fa      	ldrh	r2, [r7, #6]
 8000db0:	887b      	ldrh	r3, [r7, #2]
 8000db2:	4413      	add	r3, r2
 8000db4:	4a1c      	ldr	r2, [pc, #112]	; (8000e28 <ILI9341_DrawRectangle+0xb0>)
 8000db6:	8812      	ldrh	r2, [r2, #0]
 8000db8:	b292      	uxth	r2, r2
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	dd05      	ble.n	8000dca <ILI9341_DrawRectangle+0x52>
	{
		width=LCD_WIDTH-x;
 8000dbe:	4b1a      	ldr	r3, [pc, #104]	; (8000e28 <ILI9341_DrawRectangle+0xb0>)
 8000dc0:	881b      	ldrh	r3, [r3, #0]
 8000dc2:	b29a      	uxth	r2, r3
 8000dc4:	88fb      	ldrh	r3, [r7, #6]
 8000dc6:	1ad3      	subs	r3, r2, r3
 8000dc8:	807b      	strh	r3, [r7, #2]
	}

	if((y+height-1)>=LCD_HEIGHT)
 8000dca:	88ba      	ldrh	r2, [r7, #4]
 8000dcc:	883b      	ldrh	r3, [r7, #0]
 8000dce:	4413      	add	r3, r2
 8000dd0:	4a16      	ldr	r2, [pc, #88]	; (8000e2c <ILI9341_DrawRectangle+0xb4>)
 8000dd2:	8812      	ldrh	r2, [r2, #0]
 8000dd4:	b292      	uxth	r2, r2
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	dd05      	ble.n	8000de6 <ILI9341_DrawRectangle+0x6e>
	{
		height=LCD_HEIGHT-y;
 8000dda:	4b14      	ldr	r3, [pc, #80]	; (8000e2c <ILI9341_DrawRectangle+0xb4>)
 8000ddc:	881b      	ldrh	r3, [r3, #0]
 8000dde:	b29a      	uxth	r2, r3
 8000de0:	88bb      	ldrh	r3, [r7, #4]
 8000de2:	1ad3      	subs	r3, r2, r3
 8000de4:	803b      	strh	r3, [r7, #0]
	}

	ILI9341_SetAddress(x, y, x+width-1, y+height-1);
 8000de6:	88fa      	ldrh	r2, [r7, #6]
 8000de8:	887b      	ldrh	r3, [r7, #2]
 8000dea:	4413      	add	r3, r2
 8000dec:	b29b      	uxth	r3, r3
 8000dee:	3b01      	subs	r3, #1
 8000df0:	b29c      	uxth	r4, r3
 8000df2:	88ba      	ldrh	r2, [r7, #4]
 8000df4:	883b      	ldrh	r3, [r7, #0]
 8000df6:	4413      	add	r3, r2
 8000df8:	b29b      	uxth	r3, r3
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	b29b      	uxth	r3, r3
 8000dfe:	88b9      	ldrh	r1, [r7, #4]
 8000e00:	88f8      	ldrh	r0, [r7, #6]
 8000e02:	4622      	mov	r2, r4
 8000e04:	f7ff fcc8 	bl	8000798 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height*width);
 8000e08:	883b      	ldrh	r3, [r7, #0]
 8000e0a:	887a      	ldrh	r2, [r7, #2]
 8000e0c:	fb02 f303 	mul.w	r3, r2, r3
 8000e10:	461a      	mov	r2, r3
 8000e12:	8b3b      	ldrh	r3, [r7, #24]
 8000e14:	4611      	mov	r1, r2
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff fe8c 	bl	8000b34 <ILI9341_DrawColorBurst>
 8000e1c:	e000      	b.n	8000e20 <ILI9341_DrawRectangle+0xa8>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000e1e:	bf00      	nop
}
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd90      	pop	{r4, r7, pc}
 8000e26:	bf00      	nop
 8000e28:	20000002 	.word	0x20000002
 8000e2c:	20000000 	.word	0x20000000

08000e30 <ili9341_touch_pressed>:
#include "ILI9341_Touch.h"

uint8_t ili9341_touch_pressed()
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(LCD_TOUCH_IRQ_PORT, LCD_TOUCH_IRQ_PIN))
 8000e34:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e38:	4805      	ldr	r0, [pc, #20]	; (8000e50 <ili9341_touch_pressed+0x20>)
 8000e3a:	f001 fcaf 	bl	800279c <HAL_GPIO_ReadPin>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d101      	bne.n	8000e48 <ili9341_touch_pressed+0x18>
    { return itpPressed; }
 8000e44:	2301      	movs	r3, #1
 8000e46:	e000      	b.n	8000e4a <ili9341_touch_pressed+0x1a>
  else
    { return itpNotPressed; }
 8000e48:	2300      	movs	r3, #0
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40021000 	.word	0x40021000

08000e54 <ili9341_coordinate_transform>:

void ili9341_coordinate_transform(uint32_t * x,uint32_t * y,uint8_t rotation)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b087      	sub	sp, #28
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	4613      	mov	r3, r2
 8000e60:	71fb      	strb	r3, [r7, #7]
	if(SCREEN_VERTICAL_1 == rotation)
 8000e62:	79fb      	ldrb	r3, [r7, #7]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d12b      	bne.n	8000ec0 <ili9341_coordinate_transform+0x6c>
	{
		uint32_t x_temp = *x;
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	617b      	str	r3, [r7, #20]
		uint32_t y_temp = *y;
 8000e6e:	68bb      	ldr	r3, [r7, #8]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	613b      	str	r3, [r7, #16]
		*x = (320 > (y_temp-3000)/80) ? 320-(y_temp-3000)/80 :320;
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	f6a3 33b8 	subw	r3, r3, #3000	; 0xbb8
 8000e7a:	f5b3 4fc8 	cmp.w	r3, #25600	; 0x6400
 8000e7e:	d209      	bcs.n	8000e94 <ili9341_coordinate_transform+0x40>
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	f6a3 33b8 	subw	r3, r3, #3000	; 0xbb8
 8000e86:	4a11      	ldr	r2, [pc, #68]	; (8000ecc <ili9341_coordinate_transform+0x78>)
 8000e88:	fba2 2303 	umull	r2, r3, r2, r3
 8000e8c:	099b      	lsrs	r3, r3, #6
 8000e8e:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8000e92:	e001      	b.n	8000e98 <ili9341_coordinate_transform+0x44>
 8000e94:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000e98:	68fa      	ldr	r2, [r7, #12]
 8000e9a:	6013      	str	r3, [r2, #0]
		*y = (240 > (x_temp-3000)/100) ? (x_temp-3000)/100 : 240;
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	f6a3 33b8 	subw	r3, r3, #3000	; 0xbb8
 8000ea2:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d807      	bhi.n	8000eba <ili9341_coordinate_transform+0x66>
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	f6a3 33b8 	subw	r3, r3, #3000	; 0xbb8
 8000eb0:	4a07      	ldr	r2, [pc, #28]	; (8000ed0 <ili9341_coordinate_transform+0x7c>)
 8000eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8000eb6:	095b      	lsrs	r3, r3, #5
 8000eb8:	e000      	b.n	8000ebc <ili9341_coordinate_transform+0x68>
 8000eba:	23f0      	movs	r3, #240	; 0xf0
 8000ebc:	68ba      	ldr	r2, [r7, #8]
 8000ebe:	6013      	str	r3, [r2, #0]
	}

}
 8000ec0:	bf00      	nop
 8000ec2:	371c      	adds	r7, #28
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	cccccccd 	.word	0xcccccccd
 8000ed0:	51eb851f 	.word	0x51eb851f

08000ed4 <ili9341_touch_coordinate>:
 ili9341_touch_pressed_t ili9341_touch_coordinate(uint16_t *x_pos, uint16_t *y_pos,uint8_t rotation)
 {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08c      	sub	sp, #48	; 0x30
 8000ed8:	af02      	add	r7, sp, #8
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	4613      	mov	r3, r2
 8000ee0:	71fb      	strb	r3, [r7, #7]
   // XPT2046 8-bit command patterns
   static uint8_t x_cmd[]  = { 0xD3 };
   static uint8_t y_cmd[]  = { 0x93 };
   static uint8_t sleep[]  = { 0x00 };

   uint32_t x_avg = 0U;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61fb      	str	r3, [r7, #28]
   uint32_t y_avg = 0U;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61bb      	str	r3, [r7, #24]
   uint16_t req_samples = 8U;
 8000eea:	2308      	movs	r3, #8
 8000eec:	847b      	strh	r3, [r7, #34]	; 0x22
   uint16_t sample = req_samples;
 8000eee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000ef0:	84fb      	strh	r3, [r7, #38]	; 0x26
   uint16_t num_samples = 0U;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	84bb      	strh	r3, [r7, #36]	; 0x24
   // change SPI clock to 2MHz, max rate supported by XPT2046
   // TODO: based on STM32G4, which is clocked at 170MHz. support other chips.
   MODIFY_REG(hspi1.Instance->CR1, SPI_CR1_BR, SPI_BAUDRATEPRESCALER_128);
 8000ef6:	4b45      	ldr	r3, [pc, #276]	; (800100c <ili9341_touch_coordinate+0x138>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8000f00:	4b42      	ldr	r3, [pc, #264]	; (800100c <ili9341_touch_coordinate+0x138>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8000f08:	601a      	str	r2, [r3, #0]

   HAL_GPIO_WritePin(LCD_TOUCH_CS_PORT, LCD_TOUCH_CS_PIN, GPIO_PIN_RESET);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f10:	483f      	ldr	r0, [pc, #252]	; (8001010 <ili9341_touch_coordinate+0x13c>)
 8000f12:	f001 fc5b 	bl	80027cc <HAL_GPIO_WritePin>

   while ((itpPressed == ili9341_touch_pressed()) && (sample--)) {
 8000f16:	e038      	b.n	8000f8a <ili9341_touch_coordinate+0xb6>

     uint8_t x_raw[2];
     uint8_t y_raw[2];

     HAL_SPI_Transmit(HSPI_INSTANCE, (uint8_t*)x_cmd, sizeof(x_cmd), HAL_MAX_DELAY);
 8000f18:	f04f 33ff 	mov.w	r3, #4294967295
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	493d      	ldr	r1, [pc, #244]	; (8001014 <ili9341_touch_coordinate+0x140>)
 8000f20:	483a      	ldr	r0, [pc, #232]	; (800100c <ili9341_touch_coordinate+0x138>)
 8000f22:	f002 f9d2 	bl	80032ca <HAL_SPI_Transmit>
     HAL_SPI_TransmitReceive(HSPI_INSTANCE, (uint8_t*)x_cmd, x_raw, sizeof(x_raw), HAL_MAX_DELAY);
 8000f26:	f107 0214 	add.w	r2, r7, #20
 8000f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f2e:	9300      	str	r3, [sp, #0]
 8000f30:	2302      	movs	r3, #2
 8000f32:	4938      	ldr	r1, [pc, #224]	; (8001014 <ili9341_touch_coordinate+0x140>)
 8000f34:	4835      	ldr	r0, [pc, #212]	; (800100c <ili9341_touch_coordinate+0x138>)
 8000f36:	f002 fb04 	bl	8003542 <HAL_SPI_TransmitReceive>

     HAL_SPI_Transmit(HSPI_INSTANCE, (uint8_t*)y_cmd, sizeof(y_cmd), HAL_MAX_DELAY);
 8000f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f3e:	2201      	movs	r2, #1
 8000f40:	4935      	ldr	r1, [pc, #212]	; (8001018 <ili9341_touch_coordinate+0x144>)
 8000f42:	4832      	ldr	r0, [pc, #200]	; (800100c <ili9341_touch_coordinate+0x138>)
 8000f44:	f002 f9c1 	bl	80032ca <HAL_SPI_Transmit>
     HAL_SPI_TransmitReceive(HSPI_INSTANCE, (uint8_t*)y_cmd, y_raw, sizeof(y_raw), HAL_MAX_DELAY);
 8000f48:	f107 0210 	add.w	r2, r7, #16
 8000f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f50:	9300      	str	r3, [sp, #0]
 8000f52:	2302      	movs	r3, #2
 8000f54:	4930      	ldr	r1, [pc, #192]	; (8001018 <ili9341_touch_coordinate+0x144>)
 8000f56:	482d      	ldr	r0, [pc, #180]	; (800100c <ili9341_touch_coordinate+0x138>)
 8000f58:	f002 faf3 	bl	8003542 <HAL_SPI_TransmitReceive>

     x_avg += __LEu16(x_raw) >> 3;
 8000f5c:	7d7b      	ldrb	r3, [r7, #21]
 8000f5e:	461a      	mov	r2, r3
 8000f60:	7d3b      	ldrb	r3, [r7, #20]
 8000f62:	021b      	lsls	r3, r3, #8
 8000f64:	4313      	orrs	r3, r2
 8000f66:	10db      	asrs	r3, r3, #3
 8000f68:	461a      	mov	r2, r3
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	61fb      	str	r3, [r7, #28]
     y_avg += __LEu16(y_raw) >> 3;
 8000f70:	7c7b      	ldrb	r3, [r7, #17]
 8000f72:	461a      	mov	r2, r3
 8000f74:	7c3b      	ldrb	r3, [r7, #16]
 8000f76:	021b      	lsls	r3, r3, #8
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	10db      	asrs	r3, r3, #3
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	69bb      	ldr	r3, [r7, #24]
 8000f80:	4413      	add	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]

     ++num_samples;
 8000f84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f86:	3301      	adds	r3, #1
 8000f88:	84bb      	strh	r3, [r7, #36]	; 0x24
   while ((itpPressed == ili9341_touch_pressed()) && (sample--)) {
 8000f8a:	f7ff ff51 	bl	8000e30 <ili9341_touch_pressed>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d104      	bne.n	8000f9e <ili9341_touch_coordinate+0xca>
 8000f94:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000f96:	1e5a      	subs	r2, r3, #1
 8000f98:	84fa      	strh	r2, [r7, #38]	; 0x26
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d1bc      	bne.n	8000f18 <ili9341_touch_coordinate+0x44>
   }
   HAL_SPI_Transmit(HSPI_INSTANCE, (uint8_t*)sleep, sizeof(sleep), HAL_MAX_DELAY);
 8000f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	491d      	ldr	r1, [pc, #116]	; (800101c <ili9341_touch_coordinate+0x148>)
 8000fa6:	4819      	ldr	r0, [pc, #100]	; (800100c <ili9341_touch_coordinate+0x138>)
 8000fa8:	f002 f98f 	bl	80032ca <HAL_SPI_Transmit>

   HAL_GPIO_WritePin(LCD_TOUCH_CS_PORT, LCD_TOUCH_CS_PIN, GPIO_PIN_SET);
 8000fac:	2201      	movs	r2, #1
 8000fae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fb2:	4817      	ldr	r0, [pc, #92]	; (8001010 <ili9341_touch_coordinate+0x13c>)
 8000fb4:	f001 fc0a 	bl	80027cc <HAL_GPIO_WritePin>

   // restore SPI clock to maximum for TFT
   // TODO: based on STM32G4, which is clocked at 170MHz. support other chips.
   MODIFY_REG(hspi1.Instance->CR1, SPI_CR1_BR, SPI_BAUDRATEPRESCALER_2);
 8000fb8:	4b14      	ldr	r3, [pc, #80]	; (800100c <ili9341_touch_coordinate+0x138>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	4b13      	ldr	r3, [pc, #76]	; (800100c <ili9341_touch_coordinate+0x138>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8000fc6:	601a      	str	r2, [r3, #0]
   if (num_samples < req_samples)
 8000fc8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000fca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d207      	bcs.n	8000fe0 <ili9341_touch_coordinate+0x10c>
   {
	   *x_pos = 0;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	801a      	strh	r2, [r3, #0]
	   *y_pos = 0;
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	2200      	movs	r2, #0
 8000fda:	801a      	strh	r2, [r3, #0]
	   return itpNotPressed;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	e010      	b.n	8001002 <ili9341_touch_coordinate+0x12e>
   }


   ili9341_coordinate_transform(&x_avg,&y_avg,rotation);
 8000fe0:	79fa      	ldrb	r2, [r7, #7]
 8000fe2:	f107 0118 	add.w	r1, r7, #24
 8000fe6:	f107 031c 	add.w	r3, r7, #28
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff ff32 	bl	8000e54 <ili9341_coordinate_transform>
   *x_pos = x_avg;
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	b29a      	uxth	r2, r3
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	801a      	strh	r2, [r3, #0]
   *y_pos = y_avg;
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	b29a      	uxth	r2, r3
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	801a      	strh	r2, [r3, #0]

   return itpPressed;
 8001000:	2301      	movs	r3, #1
 }
 8001002:	4618      	mov	r0, r3
 8001004:	3728      	adds	r7, #40	; 0x28
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20012e40 	.word	0x20012e40
 8001010:	40021000 	.word	0x40021000
 8001014:	20000004 	.word	0x20000004
 8001018:	20000008 	.word	0x20000008
 800101c:	20000038 	.word	0x20000038

08001020 <test>:
TaskHandle_t xHandle=NULL;
TaskHandle_t xHandle1=NULL;
TaskHandle_t xHandle2=NULL;

void test(void *pvParameters)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_13);
 8001028:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800102c:	4803      	ldr	r0, [pc, #12]	; (800103c <test+0x1c>)
 800102e:	f001 fbe6 	bl	80027fe <HAL_GPIO_TogglePin>
		vTaskDelay(200);
 8001032:	20c8      	movs	r0, #200	; 0xc8
 8001034:	f004 f9a8 	bl	8005388 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_13);
 8001038:	e7f6      	b.n	8001028 <test+0x8>
 800103a:	bf00      	nop
 800103c:	40020c00 	.word	0x40020c00

08001040 <Touch_detect>:
	}
}
void Touch_detect(void *pvParameters)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b094      	sub	sp, #80	; 0x50
 8001044:	af04      	add	r7, sp, #16
 8001046:	6078      	str	r0, [r7, #4]
	uint16_t x = 0;
 8001048:	2300      	movs	r3, #0
 800104a:	867b      	strh	r3, [r7, #50]	; 0x32
	uint16_t y = 0;
 800104c:	2300      	movs	r3, #0
 800104e:	863b      	strh	r3, [r7, #48]	; 0x30
	char test[20];
	char t[5] = "true";
 8001050:	4a2d      	ldr	r2, [pc, #180]	; (8001108 <Touch_detect+0xc8>)
 8001052:	f107 0314 	add.w	r3, r7, #20
 8001056:	e892 0003 	ldmia.w	r2, {r0, r1}
 800105a:	6018      	str	r0, [r3, #0]
 800105c:	3304      	adds	r3, #4
 800105e:	7019      	strb	r1, [r3, #0]

	while(1)
	{

		ili9341_touch_pressed_t pressed = ili9341_touch_coordinate(&x, &y, SCREEN_VERTICAL_1);
 8001060:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001064:	f107 0332 	add.w	r3, r7, #50	; 0x32
 8001068:	2200      	movs	r2, #0
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff ff32 	bl	8000ed4 <ili9341_touch_coordinate>
 8001070:	4603      	mov	r3, r0
 8001072:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		int x1 = (int) x;
 8001076:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001078:	63bb      	str	r3, [r7, #56]	; 0x38
		int y1 = (int) y;
 800107a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800107c:	637b      	str	r3, [r7, #52]	; 0x34
//		sprintf(test,"The point is %d %d %d \n\r",x1,y1,pressed);
//		HAL_UART_Transmit(&huart4,(uint8_t*)test,strlen(test),0xffff);
		if(x1 > 30 && x1 <80)
 800107e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001080:	2b1e      	cmp	r3, #30
 8001082:	dd3c      	ble.n	80010fe <Touch_detect+0xbe>
 8001084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001086:	2b4f      	cmp	r3, #79	; 0x4f
 8001088:	dc39      	bgt.n	80010fe <Touch_detect+0xbe>
		{
			char status[8] = "stop";
 800108a:	4a20      	ldr	r2, [pc, #128]	; (800110c <Touch_detect+0xcc>)
 800108c:	f107 030c 	add.w	r3, r7, #12
 8001090:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001094:	6018      	str	r0, [r3, #0]
 8001096:	3304      	adds	r3, #4
 8001098:	7019      	strb	r1, [r3, #0]
 800109a:	f107 0311 	add.w	r3, r7, #17
 800109e:	2200      	movs	r2, #0
 80010a0:	801a      	strh	r2, [r3, #0]
 80010a2:	709a      	strb	r2, [r3, #2]
			ILI9341_FillScreen(WHITE);
 80010a4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80010a8:	f7ff fdda 	bl	8000c60 <ILI9341_FillScreen>
			HAL_UART_Transmit(&huart4,(uint8_t *) status,strlen(status),0xffff);
 80010ac:	f107 030c 	add.w	r3, r7, #12
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff f88d 	bl	80001d0 <strlen>
 80010b6:	4603      	mov	r3, r0
 80010b8:	b29a      	uxth	r2, r3
 80010ba:	f107 010c 	add.w	r1, r7, #12
 80010be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010c2:	4813      	ldr	r0, [pc, #76]	; (8001110 <Touch_detect+0xd0>)
 80010c4:	f002 ff57 	bl	8003f76 <HAL_UART_Transmit>
			ILI9341_DrawRectangle(240, 150, 50, 50, ORANGE);
 80010c8:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80010cc:	9300      	str	r3, [sp, #0]
 80010ce:	2332      	movs	r3, #50	; 0x32
 80010d0:	2232      	movs	r2, #50	; 0x32
 80010d2:	2196      	movs	r1, #150	; 0x96
 80010d4:	20f0      	movs	r0, #240	; 0xf0
 80010d6:	f7ff fe4f 	bl	8000d78 <ILI9341_DrawRectangle>
			ILI9341_DrawText(status,5, FONT2, 250, 170, BLACK, ORANGE);
 80010da:	f107 000c 	add.w	r0, r7, #12
 80010de:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80010e2:	9302      	str	r3, [sp, #8]
 80010e4:	2300      	movs	r3, #0
 80010e6:	9301      	str	r3, [sp, #4]
 80010e8:	23aa      	movs	r3, #170	; 0xaa
 80010ea:	9300      	str	r3, [sp, #0]
 80010ec:	23fa      	movs	r3, #250	; 0xfa
 80010ee:	4a09      	ldr	r2, [pc, #36]	; (8001114 <Touch_detect+0xd4>)
 80010f0:	2105      	movs	r1, #5
 80010f2:	f7ff fa66 	bl	80005c2 <ILI9341_DrawText>
			vTaskDelay(500);
 80010f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010fa:	f004 f945 	bl	8005388 <vTaskDelay>
		}
		vTaskDelay(100);
 80010fe:	2064      	movs	r0, #100	; 0x64
 8001100:	f004 f942 	bl	8005388 <vTaskDelay>
	{
 8001104:	e7ac      	b.n	8001060 <Touch_detect+0x20>
 8001106:	bf00      	nop
 8001108:	08006d38 	.word	0x08006d38
 800110c:	08006d40 	.word	0x08006d40
 8001110:	20012dfc 	.word	0x20012dfc
 8001114:	08006d90 	.word	0x08006d90

08001118 <screen>:
	}
}
void screen(void *pvParameters)
{
 8001118:	b590      	push	{r4, r7, lr}
 800111a:	b0b1      	sub	sp, #196	; 0xc4
 800111c:	af04      	add	r7, sp, #16
 800111e:	6078      	str	r0, [r7, #4]
	ILI9341_Init();
 8001120:	f7ff fbae 	bl	8000880 <ILI9341_Init>
	ILI9341_SetRotation(SCREEN_VERTICAL_2);
 8001124:	2002      	movs	r0, #2
 8001126:	f7ff fcb5 	bl	8000a94 <ILI9341_SetRotation>
	ILI9341_FillScreen(YELLOW);
 800112a:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 800112e:	f7ff fd97 	bl	8000c60 <ILI9341_FillScreen>

	char data[65];
	char current_price[25];
	char target_price[29];

	int first = 1;
 8001132:	2301      	movs	r3, #1
 8001134:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	while(1)
	{
		HAL_UART_Receive(&huart2,(uint8_t*)data,strlen(data),0xffff);
 8001138:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff f847 	bl	80001d0 <strlen>
 8001142:	4603      	mov	r3, r0
 8001144:	b29a      	uxth	r2, r3
 8001146:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800114a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800114e:	4850      	ldr	r0, [pc, #320]	; (8001290 <screen+0x178>)
 8001150:	f002 ffa3 	bl	800409a <HAL_UART_Receive>
		for(int i = 0;i<24;i++)
 8001154:	2300      	movs	r3, #0
 8001156:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800115a:	e013      	b.n	8001184 <screen+0x6c>
			current_price[i] = data[i+1];
 800115c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001160:	3301      	adds	r3, #1
 8001162:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8001166:	4413      	add	r3, r2
 8001168:	f813 1c50 	ldrb.w	r1, [r3, #-80]
 800116c:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8001170:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001174:	4413      	add	r3, r2
 8001176:	460a      	mov	r2, r1
 8001178:	701a      	strb	r2, [r3, #0]
		for(int i = 0;i<24;i++)
 800117a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800117e:	3301      	adds	r3, #1
 8001180:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001184:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001188:	2b17      	cmp	r3, #23
 800118a:	dde7      	ble.n	800115c <screen+0x44>
		for(int i = 0;i<29;i++)
 800118c:	2300      	movs	r3, #0
 800118e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001192:	e013      	b.n	80011bc <screen+0xa4>
			target_price[i] = data[i+25];
 8001194:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001198:	3319      	adds	r3, #25
 800119a:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800119e:	4413      	add	r3, r2
 80011a0:	f813 1c50 	ldrb.w	r1, [r3, #-80]
 80011a4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80011a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80011ac:	4413      	add	r3, r2
 80011ae:	460a      	mov	r2, r1
 80011b0:	701a      	strb	r2, [r3, #0]
		for(int i = 0;i<29;i++)
 80011b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80011b6:	3301      	adds	r3, #1
 80011b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80011bc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80011c0:	2b1c      	cmp	r3, #28
 80011c2:	dde7      	ble.n	8001194 <screen+0x7c>
		ILI9341_DrawText(current_price,24, FONT3, 30, 10, BLACK, YELLOW);
 80011c4:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80011c8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80011cc:	9302      	str	r3, [sp, #8]
 80011ce:	2300      	movs	r3, #0
 80011d0:	9301      	str	r3, [sp, #4]
 80011d2:	230a      	movs	r3, #10
 80011d4:	9300      	str	r3, [sp, #0]
 80011d6:	231e      	movs	r3, #30
 80011d8:	4a2e      	ldr	r2, [pc, #184]	; (8001294 <screen+0x17c>)
 80011da:	2118      	movs	r1, #24
 80011dc:	f7ff f9f1 	bl	80005c2 <ILI9341_DrawText>
		ILI9341_DrawText(target_price,28, FONT3, 25, 50, BLACK, YELLOW);
 80011e0:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80011e4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80011e8:	9302      	str	r3, [sp, #8]
 80011ea:	2300      	movs	r3, #0
 80011ec:	9301      	str	r3, [sp, #4]
 80011ee:	2332      	movs	r3, #50	; 0x32
 80011f0:	9300      	str	r3, [sp, #0]
 80011f2:	2319      	movs	r3, #25
 80011f4:	4a27      	ldr	r2, [pc, #156]	; (8001294 <screen+0x17c>)
 80011f6:	211c      	movs	r1, #28
 80011f8:	f7ff f9e3 	bl	80005c2 <ILI9341_DrawText>
		if(first)
 80011fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001200:	2b00      	cmp	r3, #0
 8001202:	d041      	beq.n	8001288 <screen+0x170>
		{
			ILI9341_FillScreen(YELLOW);
 8001204:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001208:	f7ff fd2a 	bl	8000c60 <ILI9341_FillScreen>
			first = 0;
 800120c:	2300      	movs	r3, #0
 800120e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			ILI9341_DrawRectangle(240, 150, 50, 50, ORANGE);
 8001212:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8001216:	9300      	str	r3, [sp, #0]
 8001218:	2332      	movs	r3, #50	; 0x32
 800121a:	2232      	movs	r2, #50	; 0x32
 800121c:	2196      	movs	r1, #150	; 0x96
 800121e:	20f0      	movs	r0, #240	; 0xf0
 8001220:	f7ff fdaa 	bl	8000d78 <ILI9341_DrawRectangle>
			char status[8] = "stop";
 8001224:	4a1c      	ldr	r2, [pc, #112]	; (8001298 <screen+0x180>)
 8001226:	f107 031c 	add.w	r3, r7, #28
 800122a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800122e:	6018      	str	r0, [r3, #0]
 8001230:	3304      	adds	r3, #4
 8001232:	7019      	strb	r1, [r3, #0]
 8001234:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8001238:	2200      	movs	r2, #0
 800123a:	801a      	strh	r2, [r3, #0]
 800123c:	709a      	strb	r2, [r3, #2]
			ILI9341_DrawText(status,5, FONT2, 250, 170, BLACK, ORANGE);
 800123e:	f107 001c 	add.w	r0, r7, #28
 8001242:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8001246:	9302      	str	r3, [sp, #8]
 8001248:	2300      	movs	r3, #0
 800124a:	9301      	str	r3, [sp, #4]
 800124c:	23aa      	movs	r3, #170	; 0xaa
 800124e:	9300      	str	r3, [sp, #0]
 8001250:	23fa      	movs	r3, #250	; 0xfa
 8001252:	4a12      	ldr	r2, [pc, #72]	; (800129c <screen+0x184>)
 8001254:	2105      	movs	r1, #5
 8001256:	f7ff f9b4 	bl	80005c2 <ILI9341_DrawText>
			char pair[15] = "pair : btcusdt";
 800125a:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <screen+0x188>)
 800125c:	f107 040c 	add.w	r4, r7, #12
 8001260:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001262:	c407      	stmia	r4!, {r0, r1, r2}
 8001264:	8023      	strh	r3, [r4, #0]
 8001266:	3402      	adds	r4, #2
 8001268:	0c1b      	lsrs	r3, r3, #16
 800126a:	7023      	strb	r3, [r4, #0]
			ILI9341_DrawText(pair,15, FONT3, 30, 90, BLACK, YELLOW);
 800126c:	f107 000c 	add.w	r0, r7, #12
 8001270:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001274:	9302      	str	r3, [sp, #8]
 8001276:	2300      	movs	r3, #0
 8001278:	9301      	str	r3, [sp, #4]
 800127a:	235a      	movs	r3, #90	; 0x5a
 800127c:	9300      	str	r3, [sp, #0]
 800127e:	231e      	movs	r3, #30
 8001280:	4a04      	ldr	r2, [pc, #16]	; (8001294 <screen+0x17c>)
 8001282:	210f      	movs	r1, #15
 8001284:	f7ff f99d 	bl	80005c2 <ILI9341_DrawText>
		}

		vTaskDelay(100);
 8001288:	2064      	movs	r0, #100	; 0x64
 800128a:	f004 f87d 	bl	8005388 <vTaskDelay>
		HAL_UART_Receive(&huart2,(uint8_t*)data,strlen(data),0xffff);
 800128e:	e753      	b.n	8001138 <screen+0x20>
 8001290:	20012da8 	.word	0x20012da8
 8001294:	08007574 	.word	0x08007574
 8001298:	08006d40 	.word	0x08006d40
 800129c:	08006d90 	.word	0x08006d90
 80012a0:	08006d48 	.word	0x08006d48

080012a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012aa:	f000 fbd9 	bl	8001a60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012ae:	f000 f841 	bl	8001334 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012b2:	f000 f967 	bl	8001584 <MX_GPIO_Init>
  MX_DMA_Init();
 80012b6:	f000 f945 	bl	8001544 <MX_DMA_Init>
  MX_SPI1_Init();
 80012ba:	f000 f8b9 	bl	8001430 <MX_SPI1_Init>
  MX_RNG_Init();
 80012be:	f000 f8a3 	bl	8001408 <MX_RNG_Init>
  MX_USART2_UART_Init();
 80012c2:	f000 f915 	bl	80014f0 <MX_USART2_UART_Init>
  MX_UART4_Init();
 80012c6:	f000 f8e9 	bl	800149c <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
//
  xTaskCreate(
 80012ca:	4b11      	ldr	r3, [pc, #68]	; (8001310 <main+0x6c>)
 80012cc:	9301      	str	r3, [sp, #4]
 80012ce:	2301      	movs	r3, #1
 80012d0:	9300      	str	r3, [sp, #0]
 80012d2:	2300      	movs	r3, #0
 80012d4:	2280      	movs	r2, #128	; 0x80
 80012d6:	490f      	ldr	r1, [pc, #60]	; (8001314 <main+0x70>)
 80012d8:	480f      	ldr	r0, [pc, #60]	; (8001318 <main+0x74>)
 80012da:	f003 ff17 	bl	800510c <xTaskCreate>
    		  "test",
    		  128,
    		  NULL,
    		  1,
    		  &xHandle);
  xTaskCreate(
 80012de:	4b0f      	ldr	r3, [pc, #60]	; (800131c <main+0x78>)
 80012e0:	9301      	str	r3, [sp, #4]
 80012e2:	2301      	movs	r3, #1
 80012e4:	9300      	str	r3, [sp, #0]
 80012e6:	2300      	movs	r3, #0
 80012e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012ec:	490c      	ldr	r1, [pc, #48]	; (8001320 <main+0x7c>)
 80012ee:	480d      	ldr	r0, [pc, #52]	; (8001324 <main+0x80>)
 80012f0:	f003 ff0c 	bl	800510c <xTaskCreate>
      		  "Touch_detect",
      		  1024,
      		  NULL,
      		  1,
      		  &xHandle1);
  xTaskCreate(
 80012f4:	4b0c      	ldr	r3, [pc, #48]	; (8001328 <main+0x84>)
 80012f6:	9301      	str	r3, [sp, #4]
 80012f8:	2301      	movs	r3, #1
 80012fa:	9300      	str	r3, [sp, #0]
 80012fc:	2300      	movs	r3, #0
 80012fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001302:	490a      	ldr	r1, [pc, #40]	; (800132c <main+0x88>)
 8001304:	480a      	ldr	r0, [pc, #40]	; (8001330 <main+0x8c>)
 8001306:	f003 ff01 	bl	800510c <xTaskCreate>
    		  "screen",
    		  1024,
    		  NULL,
    		  1,
    		  &xHandle2);
  vTaskStartScheduler();
 800130a:	f004 f871 	bl	80053f0 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 800130e:	e7fe      	b.n	800130e <main+0x6a>
 8001310:	2000003c 	.word	0x2000003c
 8001314:	08006d58 	.word	0x08006d58
 8001318:	08001021 	.word	0x08001021
 800131c:	20000040 	.word	0x20000040
 8001320:	08006d60 	.word	0x08006d60
 8001324:	08001041 	.word	0x08001041
 8001328:	20000044 	.word	0x20000044
 800132c:	08006d70 	.word	0x08006d70
 8001330:	08001119 	.word	0x08001119

08001334 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b094      	sub	sp, #80	; 0x50
 8001338:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800133a:	f107 0320 	add.w	r3, r7, #32
 800133e:	2230      	movs	r2, #48	; 0x30
 8001340:	2100      	movs	r1, #0
 8001342:	4618      	mov	r0, r3
 8001344:	f005 fce4 	bl	8006d10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001348:	f107 030c 	add.w	r3, r7, #12
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001358:	2300      	movs	r3, #0
 800135a:	60bb      	str	r3, [r7, #8]
 800135c:	4b28      	ldr	r3, [pc, #160]	; (8001400 <SystemClock_Config+0xcc>)
 800135e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001360:	4a27      	ldr	r2, [pc, #156]	; (8001400 <SystemClock_Config+0xcc>)
 8001362:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001366:	6413      	str	r3, [r2, #64]	; 0x40
 8001368:	4b25      	ldr	r3, [pc, #148]	; (8001400 <SystemClock_Config+0xcc>)
 800136a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001370:	60bb      	str	r3, [r7, #8]
 8001372:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001374:	2300      	movs	r3, #0
 8001376:	607b      	str	r3, [r7, #4]
 8001378:	4b22      	ldr	r3, [pc, #136]	; (8001404 <SystemClock_Config+0xd0>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a21      	ldr	r2, [pc, #132]	; (8001404 <SystemClock_Config+0xd0>)
 800137e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001382:	6013      	str	r3, [r2, #0]
 8001384:	4b1f      	ldr	r3, [pc, #124]	; (8001404 <SystemClock_Config+0xd0>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800138c:	607b      	str	r3, [r7, #4]
 800138e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001390:	2302      	movs	r3, #2
 8001392:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001394:	2301      	movs	r3, #1
 8001396:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001398:	2310      	movs	r3, #16
 800139a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800139c:	2302      	movs	r3, #2
 800139e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013a0:	2300      	movs	r3, #0
 80013a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013a4:	2308      	movs	r3, #8
 80013a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80013a8:	23a8      	movs	r3, #168	; 0xa8
 80013aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013ac:	2302      	movs	r3, #2
 80013ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80013b0:	2307      	movs	r3, #7
 80013b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013b4:	f107 0320 	add.w	r3, r7, #32
 80013b8:	4618      	mov	r0, r3
 80013ba:	f001 fa5f 	bl	800287c <HAL_RCC_OscConfig>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80013c4:	f000 f96a 	bl	800169c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013c8:	230f      	movs	r3, #15
 80013ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013cc:	2302      	movs	r3, #2
 80013ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013d0:	2300      	movs	r3, #0
 80013d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013d4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80013d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013e0:	f107 030c 	add.w	r3, r7, #12
 80013e4:	2105      	movs	r1, #5
 80013e6:	4618      	mov	r0, r3
 80013e8:	f001 fcc0 	bl	8002d6c <HAL_RCC_ClockConfig>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80013f2:	f000 f953 	bl	800169c <Error_Handler>
  }
}
 80013f6:	bf00      	nop
 80013f8:	3750      	adds	r7, #80	; 0x50
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40023800 	.word	0x40023800
 8001404:	40007000 	.word	0x40007000

08001408 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800140c:	4b06      	ldr	r3, [pc, #24]	; (8001428 <MX_RNG_Init+0x20>)
 800140e:	4a07      	ldr	r2, [pc, #28]	; (800142c <MX_RNG_Init+0x24>)
 8001410:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001412:	4805      	ldr	r0, [pc, #20]	; (8001428 <MX_RNG_Init+0x20>)
 8001414:	f001 fea6 	bl	8003164 <HAL_RNG_Init>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800141e:	f000 f93d 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20012dec 	.word	0x20012dec
 800142c:	50060800 	.word	0x50060800

08001430 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001434:	4b17      	ldr	r3, [pc, #92]	; (8001494 <MX_SPI1_Init+0x64>)
 8001436:	4a18      	ldr	r2, [pc, #96]	; (8001498 <MX_SPI1_Init+0x68>)
 8001438:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800143a:	4b16      	ldr	r3, [pc, #88]	; (8001494 <MX_SPI1_Init+0x64>)
 800143c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001440:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001442:	4b14      	ldr	r3, [pc, #80]	; (8001494 <MX_SPI1_Init+0x64>)
 8001444:	2200      	movs	r2, #0
 8001446:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001448:	4b12      	ldr	r3, [pc, #72]	; (8001494 <MX_SPI1_Init+0x64>)
 800144a:	2200      	movs	r2, #0
 800144c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800144e:	4b11      	ldr	r3, [pc, #68]	; (8001494 <MX_SPI1_Init+0x64>)
 8001450:	2200      	movs	r2, #0
 8001452:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001454:	4b0f      	ldr	r3, [pc, #60]	; (8001494 <MX_SPI1_Init+0x64>)
 8001456:	2200      	movs	r2, #0
 8001458:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800145a:	4b0e      	ldr	r3, [pc, #56]	; (8001494 <MX_SPI1_Init+0x64>)
 800145c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001460:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001462:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <MX_SPI1_Init+0x64>)
 8001464:	2200      	movs	r2, #0
 8001466:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001468:	4b0a      	ldr	r3, [pc, #40]	; (8001494 <MX_SPI1_Init+0x64>)
 800146a:	2200      	movs	r2, #0
 800146c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800146e:	4b09      	ldr	r3, [pc, #36]	; (8001494 <MX_SPI1_Init+0x64>)
 8001470:	2200      	movs	r2, #0
 8001472:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001474:	4b07      	ldr	r3, [pc, #28]	; (8001494 <MX_SPI1_Init+0x64>)
 8001476:	2200      	movs	r2, #0
 8001478:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800147a:	4b06      	ldr	r3, [pc, #24]	; (8001494 <MX_SPI1_Init+0x64>)
 800147c:	220a      	movs	r2, #10
 800147e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001480:	4804      	ldr	r0, [pc, #16]	; (8001494 <MX_SPI1_Init+0x64>)
 8001482:	f001 fe99 	bl	80031b8 <HAL_SPI_Init>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800148c:	f000 f906 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001490:	bf00      	nop
 8001492:	bd80      	pop	{r7, pc}
 8001494:	20012e40 	.word	0x20012e40
 8001498:	40013000 	.word	0x40013000

0800149c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80014a0:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <MX_UART4_Init+0x4c>)
 80014a2:	4a12      	ldr	r2, [pc, #72]	; (80014ec <MX_UART4_Init+0x50>)
 80014a4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80014a6:	4b10      	ldr	r3, [pc, #64]	; (80014e8 <MX_UART4_Init+0x4c>)
 80014a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014ac:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80014ae:	4b0e      	ldr	r3, [pc, #56]	; (80014e8 <MX_UART4_Init+0x4c>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80014b4:	4b0c      	ldr	r3, [pc, #48]	; (80014e8 <MX_UART4_Init+0x4c>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80014ba:	4b0b      	ldr	r3, [pc, #44]	; (80014e8 <MX_UART4_Init+0x4c>)
 80014bc:	2200      	movs	r2, #0
 80014be:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80014c0:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <MX_UART4_Init+0x4c>)
 80014c2:	220c      	movs	r2, #12
 80014c4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014c6:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <MX_UART4_Init+0x4c>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80014cc:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <MX_UART4_Init+0x4c>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80014d2:	4805      	ldr	r0, [pc, #20]	; (80014e8 <MX_UART4_Init+0x4c>)
 80014d4:	f002 fd02 	bl	8003edc <HAL_UART_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80014de:	f000 f8dd 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20012dfc 	.word	0x20012dfc
 80014ec:	40004c00 	.word	0x40004c00

080014f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014f4:	4b11      	ldr	r3, [pc, #68]	; (800153c <MX_USART2_UART_Init+0x4c>)
 80014f6:	4a12      	ldr	r2, [pc, #72]	; (8001540 <MX_USART2_UART_Init+0x50>)
 80014f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014fa:	4b10      	ldr	r3, [pc, #64]	; (800153c <MX_USART2_UART_Init+0x4c>)
 80014fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001500:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001502:	4b0e      	ldr	r3, [pc, #56]	; (800153c <MX_USART2_UART_Init+0x4c>)
 8001504:	2200      	movs	r2, #0
 8001506:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001508:	4b0c      	ldr	r3, [pc, #48]	; (800153c <MX_USART2_UART_Init+0x4c>)
 800150a:	2200      	movs	r2, #0
 800150c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800150e:	4b0b      	ldr	r3, [pc, #44]	; (800153c <MX_USART2_UART_Init+0x4c>)
 8001510:	2200      	movs	r2, #0
 8001512:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001514:	4b09      	ldr	r3, [pc, #36]	; (800153c <MX_USART2_UART_Init+0x4c>)
 8001516:	220c      	movs	r2, #12
 8001518:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800151a:	4b08      	ldr	r3, [pc, #32]	; (800153c <MX_USART2_UART_Init+0x4c>)
 800151c:	2200      	movs	r2, #0
 800151e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001520:	4b06      	ldr	r3, [pc, #24]	; (800153c <MX_USART2_UART_Init+0x4c>)
 8001522:	2200      	movs	r2, #0
 8001524:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001526:	4805      	ldr	r0, [pc, #20]	; (800153c <MX_USART2_UART_Init+0x4c>)
 8001528:	f002 fcd8 	bl	8003edc <HAL_UART_Init>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001532:	f000 f8b3 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	20012da8 	.word	0x20012da8
 8001540:	40004400 	.word	0x40004400

08001544 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	607b      	str	r3, [r7, #4]
 800154e:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <MX_DMA_Init+0x3c>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	4a0b      	ldr	r2, [pc, #44]	; (8001580 <MX_DMA_Init+0x3c>)
 8001554:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001558:	6313      	str	r3, [r2, #48]	; 0x30
 800155a:	4b09      	ldr	r3, [pc, #36]	; (8001580 <MX_DMA_Init+0x3c>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001562:	607b      	str	r3, [r7, #4]
 8001564:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001566:	2200      	movs	r2, #0
 8001568:	2100      	movs	r1, #0
 800156a:	203b      	movs	r0, #59	; 0x3b
 800156c:	f000 fbb1 	bl	8001cd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001570:	203b      	movs	r0, #59	; 0x3b
 8001572:	f000 fbca 	bl	8001d0a <HAL_NVIC_EnableIRQ>

}
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40023800 	.word	0x40023800

08001584 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b08a      	sub	sp, #40	; 0x28
 8001588:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158a:	f107 0314 	add.w	r3, r7, #20
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	605a      	str	r2, [r3, #4]
 8001594:	609a      	str	r2, [r3, #8]
 8001596:	60da      	str	r2, [r3, #12]
 8001598:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	613b      	str	r3, [r7, #16]
 800159e:	4b3c      	ldr	r3, [pc, #240]	; (8001690 <MX_GPIO_Init+0x10c>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	4a3b      	ldr	r2, [pc, #236]	; (8001690 <MX_GPIO_Init+0x10c>)
 80015a4:	f043 0304 	orr.w	r3, r3, #4
 80015a8:	6313      	str	r3, [r2, #48]	; 0x30
 80015aa:	4b39      	ldr	r3, [pc, #228]	; (8001690 <MX_GPIO_Init+0x10c>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	f003 0304 	and.w	r3, r3, #4
 80015b2:	613b      	str	r3, [r7, #16]
 80015b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	4b35      	ldr	r3, [pc, #212]	; (8001690 <MX_GPIO_Init+0x10c>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	4a34      	ldr	r2, [pc, #208]	; (8001690 <MX_GPIO_Init+0x10c>)
 80015c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015c4:	6313      	str	r3, [r2, #48]	; 0x30
 80015c6:	4b32      	ldr	r3, [pc, #200]	; (8001690 <MX_GPIO_Init+0x10c>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	60bb      	str	r3, [r7, #8]
 80015d6:	4b2e      	ldr	r3, [pc, #184]	; (8001690 <MX_GPIO_Init+0x10c>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	4a2d      	ldr	r2, [pc, #180]	; (8001690 <MX_GPIO_Init+0x10c>)
 80015dc:	f043 0301 	orr.w	r3, r3, #1
 80015e0:	6313      	str	r3, [r2, #48]	; 0x30
 80015e2:	4b2b      	ldr	r3, [pc, #172]	; (8001690 <MX_GPIO_Init+0x10c>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	60bb      	str	r3, [r7, #8]
 80015ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	607b      	str	r3, [r7, #4]
 80015f2:	4b27      	ldr	r3, [pc, #156]	; (8001690 <MX_GPIO_Init+0x10c>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	4a26      	ldr	r2, [pc, #152]	; (8001690 <MX_GPIO_Init+0x10c>)
 80015f8:	f043 0310 	orr.w	r3, r3, #16
 80015fc:	6313      	str	r3, [r2, #48]	; 0x30
 80015fe:	4b24      	ldr	r3, [pc, #144]	; (8001690 <MX_GPIO_Init+0x10c>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	f003 0310 	and.w	r3, r3, #16
 8001606:	607b      	str	r3, [r7, #4]
 8001608:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin|LCD_DC_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 800160a:	2200      	movs	r2, #0
 800160c:	210e      	movs	r1, #14
 800160e:	4821      	ldr	r0, [pc, #132]	; (8001694 <MX_GPIO_Init+0x110>)
 8001610:	f001 f8dc 	bl	80027cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET);
 8001614:	2200      	movs	r2, #0
 8001616:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800161a:	481f      	ldr	r0, [pc, #124]	; (8001698 <MX_GPIO_Init+0x114>)
 800161c:	f001 f8d6 	bl	80027cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_CS_Pin LCD_DC_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_DC_Pin|LCD_RST_Pin;
 8001620:	230e      	movs	r3, #14
 8001622:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001624:	2301      	movs	r3, #1
 8001626:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	2300      	movs	r3, #0
 800162a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162c:	2300      	movs	r3, #0
 800162e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001630:	f107 0314 	add.w	r3, r7, #20
 8001634:	4619      	mov	r1, r3
 8001636:	4817      	ldr	r0, [pc, #92]	; (8001694 <MX_GPIO_Init+0x110>)
 8001638:	f000 ff14 	bl	8002464 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_IRQ_Pin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 800163c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001640:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001642:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001646:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 800164c:	f107 0314 	add.w	r3, r7, #20
 8001650:	4619      	mov	r1, r3
 8001652:	4811      	ldr	r0, [pc, #68]	; (8001698 <MX_GPIO_Init+0x114>)
 8001654:	f000 ff06 	bl	8002464 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_CS_Pin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin;
 8001658:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800165c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800165e:	2301      	movs	r3, #1
 8001660:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001666:	2300      	movs	r3, #0
 8001668:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TOUCH_CS_GPIO_Port, &GPIO_InitStruct);
 800166a:	f107 0314 	add.w	r3, r7, #20
 800166e:	4619      	mov	r1, r3
 8001670:	4809      	ldr	r0, [pc, #36]	; (8001698 <MX_GPIO_Init+0x114>)
 8001672:	f000 fef7 	bl	8002464 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001676:	2200      	movs	r2, #0
 8001678:	2100      	movs	r1, #0
 800167a:	2028      	movs	r0, #40	; 0x28
 800167c:	f000 fb29 	bl	8001cd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001680:	2028      	movs	r0, #40	; 0x28
 8001682:	f000 fb42 	bl	8001d0a <HAL_NVIC_EnableIRQ>

}
 8001686:	bf00      	nop
 8001688:	3728      	adds	r7, #40	; 0x28
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40023800 	.word	0x40023800
 8001694:	40020800 	.word	0x40020800
 8001698:	40021000 	.word	0x40021000

0800169c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while(1)
 80016a0:	e7fe      	b.n	80016a0 <Error_Handler+0x4>
	...

080016a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	607b      	str	r3, [r7, #4]
 80016ae:	4b10      	ldr	r3, [pc, #64]	; (80016f0 <HAL_MspInit+0x4c>)
 80016b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b2:	4a0f      	ldr	r2, [pc, #60]	; (80016f0 <HAL_MspInit+0x4c>)
 80016b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016b8:	6453      	str	r3, [r2, #68]	; 0x44
 80016ba:	4b0d      	ldr	r3, [pc, #52]	; (80016f0 <HAL_MspInit+0x4c>)
 80016bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016c2:	607b      	str	r3, [r7, #4]
 80016c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	603b      	str	r3, [r7, #0]
 80016ca:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <HAL_MspInit+0x4c>)
 80016cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ce:	4a08      	ldr	r2, [pc, #32]	; (80016f0 <HAL_MspInit+0x4c>)
 80016d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016d4:	6413      	str	r3, [r2, #64]	; 0x40
 80016d6:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <HAL_MspInit+0x4c>)
 80016d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016de:	603b      	str	r3, [r7, #0]
 80016e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	40023800 	.word	0x40023800

080016f4 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a0b      	ldr	r2, [pc, #44]	; (8001730 <HAL_RNG_MspInit+0x3c>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d10d      	bne.n	8001722 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	60fb      	str	r3, [r7, #12]
 800170a:	4b0a      	ldr	r3, [pc, #40]	; (8001734 <HAL_RNG_MspInit+0x40>)
 800170c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800170e:	4a09      	ldr	r2, [pc, #36]	; (8001734 <HAL_RNG_MspInit+0x40>)
 8001710:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001714:	6353      	str	r3, [r2, #52]	; 0x34
 8001716:	4b07      	ldr	r3, [pc, #28]	; (8001734 <HAL_RNG_MspInit+0x40>)
 8001718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800171a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8001722:	bf00      	nop
 8001724:	3714      	adds	r7, #20
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	50060800 	.word	0x50060800
 8001734:	40023800 	.word	0x40023800

08001738 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b08a      	sub	sp, #40	; 0x28
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001740:	f107 0314 	add.w	r3, r7, #20
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	60da      	str	r2, [r3, #12]
 800174e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a34      	ldr	r2, [pc, #208]	; (8001828 <HAL_SPI_MspInit+0xf0>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d161      	bne.n	800181e <HAL_SPI_MspInit+0xe6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	613b      	str	r3, [r7, #16]
 800175e:	4b33      	ldr	r3, [pc, #204]	; (800182c <HAL_SPI_MspInit+0xf4>)
 8001760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001762:	4a32      	ldr	r2, [pc, #200]	; (800182c <HAL_SPI_MspInit+0xf4>)
 8001764:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001768:	6453      	str	r3, [r2, #68]	; 0x44
 800176a:	4b30      	ldr	r3, [pc, #192]	; (800182c <HAL_SPI_MspInit+0xf4>)
 800176c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001772:	613b      	str	r3, [r7, #16]
 8001774:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	60fb      	str	r3, [r7, #12]
 800177a:	4b2c      	ldr	r3, [pc, #176]	; (800182c <HAL_SPI_MspInit+0xf4>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	4a2b      	ldr	r2, [pc, #172]	; (800182c <HAL_SPI_MspInit+0xf4>)
 8001780:	f043 0301 	orr.w	r3, r3, #1
 8001784:	6313      	str	r3, [r2, #48]	; 0x30
 8001786:	4b29      	ldr	r3, [pc, #164]	; (800182c <HAL_SPI_MspInit+0xf4>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001792:	23e0      	movs	r3, #224	; 0xe0
 8001794:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001796:	2302      	movs	r3, #2
 8001798:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800179e:	2303      	movs	r3, #3
 80017a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017a2:	2305      	movs	r3, #5
 80017a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a6:	f107 0314 	add.w	r3, r7, #20
 80017aa:	4619      	mov	r1, r3
 80017ac:	4820      	ldr	r0, [pc, #128]	; (8001830 <HAL_SPI_MspInit+0xf8>)
 80017ae:	f000 fe59 	bl	8002464 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80017b2:	4b20      	ldr	r3, [pc, #128]	; (8001834 <HAL_SPI_MspInit+0xfc>)
 80017b4:	4a20      	ldr	r2, [pc, #128]	; (8001838 <HAL_SPI_MspInit+0x100>)
 80017b6:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80017b8:	4b1e      	ldr	r3, [pc, #120]	; (8001834 <HAL_SPI_MspInit+0xfc>)
 80017ba:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80017be:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017c0:	4b1c      	ldr	r3, [pc, #112]	; (8001834 <HAL_SPI_MspInit+0xfc>)
 80017c2:	2240      	movs	r2, #64	; 0x40
 80017c4:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017c6:	4b1b      	ldr	r3, [pc, #108]	; (8001834 <HAL_SPI_MspInit+0xfc>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017cc:	4b19      	ldr	r3, [pc, #100]	; (8001834 <HAL_SPI_MspInit+0xfc>)
 80017ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017d2:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017d4:	4b17      	ldr	r3, [pc, #92]	; (8001834 <HAL_SPI_MspInit+0xfc>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017da:	4b16      	ldr	r3, [pc, #88]	; (8001834 <HAL_SPI_MspInit+0xfc>)
 80017dc:	2200      	movs	r2, #0
 80017de:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80017e0:	4b14      	ldr	r3, [pc, #80]	; (8001834 <HAL_SPI_MspInit+0xfc>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80017e6:	4b13      	ldr	r3, [pc, #76]	; (8001834 <HAL_SPI_MspInit+0xfc>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017ec:	4b11      	ldr	r3, [pc, #68]	; (8001834 <HAL_SPI_MspInit+0xfc>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80017f2:	4810      	ldr	r0, [pc, #64]	; (8001834 <HAL_SPI_MspInit+0xfc>)
 80017f4:	f000 faa4 	bl	8001d40 <HAL_DMA_Init>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 80017fe:	f7ff ff4d 	bl	800169c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a0b      	ldr	r2, [pc, #44]	; (8001834 <HAL_SPI_MspInit+0xfc>)
 8001806:	649a      	str	r2, [r3, #72]	; 0x48
 8001808:	4a0a      	ldr	r2, [pc, #40]	; (8001834 <HAL_SPI_MspInit+0xfc>)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800180e:	2200      	movs	r2, #0
 8001810:	2100      	movs	r1, #0
 8001812:	2023      	movs	r0, #35	; 0x23
 8001814:	f000 fa5d 	bl	8001cd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001818:	2023      	movs	r0, #35	; 0x23
 800181a:	f000 fa76 	bl	8001d0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800181e:	bf00      	nop
 8001820:	3728      	adds	r7, #40	; 0x28
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40013000 	.word	0x40013000
 800182c:	40023800 	.word	0x40023800
 8001830:	40020000 	.word	0x40020000
 8001834:	20012e98 	.word	0x20012e98
 8001838:	40026458 	.word	0x40026458

0800183c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b08c      	sub	sp, #48	; 0x30
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001844:	f107 031c 	add.w	r3, r7, #28
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
 8001850:	60da      	str	r2, [r3, #12]
 8001852:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a32      	ldr	r2, [pc, #200]	; (8001924 <HAL_UART_MspInit+0xe8>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d12c      	bne.n	80018b8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	61bb      	str	r3, [r7, #24]
 8001862:	4b31      	ldr	r3, [pc, #196]	; (8001928 <HAL_UART_MspInit+0xec>)
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	4a30      	ldr	r2, [pc, #192]	; (8001928 <HAL_UART_MspInit+0xec>)
 8001868:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800186c:	6413      	str	r3, [r2, #64]	; 0x40
 800186e:	4b2e      	ldr	r3, [pc, #184]	; (8001928 <HAL_UART_MspInit+0xec>)
 8001870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001872:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001876:	61bb      	str	r3, [r7, #24]
 8001878:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	617b      	str	r3, [r7, #20]
 800187e:	4b2a      	ldr	r3, [pc, #168]	; (8001928 <HAL_UART_MspInit+0xec>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	4a29      	ldr	r2, [pc, #164]	; (8001928 <HAL_UART_MspInit+0xec>)
 8001884:	f043 0301 	orr.w	r3, r3, #1
 8001888:	6313      	str	r3, [r2, #48]	; 0x30
 800188a:	4b27      	ldr	r3, [pc, #156]	; (8001928 <HAL_UART_MspInit+0xec>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	617b      	str	r3, [r7, #20]
 8001894:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001896:	2303      	movs	r3, #3
 8001898:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189a:	2302      	movs	r3, #2
 800189c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189e:	2300      	movs	r3, #0
 80018a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a2:	2303      	movs	r3, #3
 80018a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80018a6:	2308      	movs	r3, #8
 80018a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018aa:	f107 031c 	add.w	r3, r7, #28
 80018ae:	4619      	mov	r1, r3
 80018b0:	481e      	ldr	r0, [pc, #120]	; (800192c <HAL_UART_MspInit+0xf0>)
 80018b2:	f000 fdd7 	bl	8002464 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018b6:	e030      	b.n	800191a <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART2)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a1c      	ldr	r2, [pc, #112]	; (8001930 <HAL_UART_MspInit+0xf4>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d12b      	bne.n	800191a <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART2_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	613b      	str	r3, [r7, #16]
 80018c6:	4b18      	ldr	r3, [pc, #96]	; (8001928 <HAL_UART_MspInit+0xec>)
 80018c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ca:	4a17      	ldr	r2, [pc, #92]	; (8001928 <HAL_UART_MspInit+0xec>)
 80018cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018d0:	6413      	str	r3, [r2, #64]	; 0x40
 80018d2:	4b15      	ldr	r3, [pc, #84]	; (8001928 <HAL_UART_MspInit+0xec>)
 80018d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018da:	613b      	str	r3, [r7, #16]
 80018dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	60fb      	str	r3, [r7, #12]
 80018e2:	4b11      	ldr	r3, [pc, #68]	; (8001928 <HAL_UART_MspInit+0xec>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	4a10      	ldr	r2, [pc, #64]	; (8001928 <HAL_UART_MspInit+0xec>)
 80018e8:	f043 0301 	orr.w	r3, r3, #1
 80018ec:	6313      	str	r3, [r2, #48]	; 0x30
 80018ee:	4b0e      	ldr	r3, [pc, #56]	; (8001928 <HAL_UART_MspInit+0xec>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	60fb      	str	r3, [r7, #12]
 80018f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80018fa:	230c      	movs	r3, #12
 80018fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fe:	2302      	movs	r3, #2
 8001900:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001906:	2303      	movs	r3, #3
 8001908:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800190a:	2307      	movs	r3, #7
 800190c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190e:	f107 031c 	add.w	r3, r7, #28
 8001912:	4619      	mov	r1, r3
 8001914:	4805      	ldr	r0, [pc, #20]	; (800192c <HAL_UART_MspInit+0xf0>)
 8001916:	f000 fda5 	bl	8002464 <HAL_GPIO_Init>
}
 800191a:	bf00      	nop
 800191c:	3730      	adds	r7, #48	; 0x30
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40004c00 	.word	0x40004c00
 8001928:	40023800 	.word	0x40023800
 800192c:	40020000 	.word	0x40020000
 8001930:	40004400 	.word	0x40004400

08001934 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001938:	bf00      	nop
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr

08001942 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001942:	b480      	push	{r7}
 8001944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001946:	e7fe      	b.n	8001946 <HardFault_Handler+0x4>

08001948 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800194c:	e7fe      	b.n	800194c <MemManage_Handler+0x4>

0800194e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800194e:	b480      	push	{r7}
 8001950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001952:	e7fe      	b.n	8001952 <BusFault_Handler+0x4>

08001954 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001958:	e7fe      	b.n	8001958 <UsageFault_Handler+0x4>

0800195a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800195a:	b480      	push	{r7}
 800195c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800196c:	4802      	ldr	r0, [pc, #8]	; (8001978 <SPI1_IRQHandler+0x10>)
 800196e:	f002 f841 	bl	80039f4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	20012e40 	.word	0x20012e40

0800197c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOUCH_IRQ_Pin);
 8001980:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001984:	f000 ff56 	bl	8002834 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001988:	bf00      	nop
 800198a:	bd80      	pop	{r7, pc}

0800198c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001990:	4802      	ldr	r0, [pc, #8]	; (800199c <DMA2_Stream3_IRQHandler+0x10>)
 8001992:	f000 fafd 	bl	8001f90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	20012e98 	.word	0x20012e98

080019a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019a4:	4b16      	ldr	r3, [pc, #88]	; (8001a00 <SystemInit+0x60>)
 80019a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019aa:	4a15      	ldr	r2, [pc, #84]	; (8001a00 <SystemInit+0x60>)
 80019ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80019b4:	4b13      	ldr	r3, [pc, #76]	; (8001a04 <SystemInit+0x64>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a12      	ldr	r2, [pc, #72]	; (8001a04 <SystemInit+0x64>)
 80019ba:	f043 0301 	orr.w	r3, r3, #1
 80019be:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80019c0:	4b10      	ldr	r3, [pc, #64]	; (8001a04 <SystemInit+0x64>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80019c6:	4b0f      	ldr	r3, [pc, #60]	; (8001a04 <SystemInit+0x64>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a0e      	ldr	r2, [pc, #56]	; (8001a04 <SystemInit+0x64>)
 80019cc:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80019d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019d4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80019d6:	4b0b      	ldr	r3, [pc, #44]	; (8001a04 <SystemInit+0x64>)
 80019d8:	4a0b      	ldr	r2, [pc, #44]	; (8001a08 <SystemInit+0x68>)
 80019da:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80019dc:	4b09      	ldr	r3, [pc, #36]	; (8001a04 <SystemInit+0x64>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a08      	ldr	r2, [pc, #32]	; (8001a04 <SystemInit+0x64>)
 80019e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019e6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80019e8:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <SystemInit+0x64>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80019ee:	4b04      	ldr	r3, [pc, #16]	; (8001a00 <SystemInit+0x60>)
 80019f0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019f4:	609a      	str	r2, [r3, #8]
#endif
}
 80019f6:	bf00      	nop
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	e000ed00 	.word	0xe000ed00
 8001a04:	40023800 	.word	0x40023800
 8001a08:	24003010 	.word	0x24003010

08001a0c <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack     /* set stack pointer */
 8001a0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a44 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001a10:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001a12:	e003      	b.n	8001a1c <LoopCopyDataInit>

08001a14 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001a14:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001a16:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001a18:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001a1a:	3104      	adds	r1, #4

08001a1c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001a1c:	480b      	ldr	r0, [pc, #44]	; (8001a4c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001a1e:	4b0c      	ldr	r3, [pc, #48]	; (8001a50 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001a20:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001a22:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001a24:	d3f6      	bcc.n	8001a14 <CopyDataInit>
  ldr  r2, =_sbss
 8001a26:	4a0b      	ldr	r2, [pc, #44]	; (8001a54 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001a28:	e002      	b.n	8001a30 <LoopFillZerobss>

08001a2a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001a2a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001a2c:	f842 3b04 	str.w	r3, [r2], #4

08001a30 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001a30:	4b09      	ldr	r3, [pc, #36]	; (8001a58 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001a32:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001a34:	d3f9      	bcc.n	8001a2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a36:	f7ff ffb3 	bl	80019a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a3a:	f005 f937 	bl	8006cac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a3e:	f7ff fc31 	bl	80012a4 <main>
  bx  lr    
 8001a42:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack     /* set stack pointer */
 8001a44:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001a48:	08007f08 	.word	0x08007f08
  ldr  r0, =_sdata
 8001a4c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001a50:	2000001c 	.word	0x2000001c
  ldr  r2, =_sbss
 8001a54:	2000001c 	.word	0x2000001c
  ldr  r3, = _ebss
 8001a58:	20012f3c 	.word	0x20012f3c

08001a5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a5c:	e7fe      	b.n	8001a5c <ADC_IRQHandler>
	...

08001a60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a64:	4b0e      	ldr	r3, [pc, #56]	; (8001aa0 <HAL_Init+0x40>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a0d      	ldr	r2, [pc, #52]	; (8001aa0 <HAL_Init+0x40>)
 8001a6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a70:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <HAL_Init+0x40>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a0a      	ldr	r2, [pc, #40]	; (8001aa0 <HAL_Init+0x40>)
 8001a76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a7c:	4b08      	ldr	r3, [pc, #32]	; (8001aa0 <HAL_Init+0x40>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a07      	ldr	r2, [pc, #28]	; (8001aa0 <HAL_Init+0x40>)
 8001a82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a88:	2003      	movs	r0, #3
 8001a8a:	f000 f917 	bl	8001cbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a8e:	2000      	movs	r0, #0
 8001a90:	f000 f808 	bl	8001aa4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a94:	f7ff fe06 	bl	80016a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40023c00 	.word	0x40023c00

08001aa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001aac:	4b12      	ldr	r3, [pc, #72]	; (8001af8 <HAL_InitTick+0x54>)
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	4b12      	ldr	r3, [pc, #72]	; (8001afc <HAL_InitTick+0x58>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aba:	fbb3 f3f1 	udiv	r3, r3, r1
 8001abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f000 f92f 	bl	8001d26 <HAL_SYSTICK_Config>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e00e      	b.n	8001af0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2b0f      	cmp	r3, #15
 8001ad6:	d80a      	bhi.n	8001aee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ad8:	2200      	movs	r2, #0
 8001ada:	6879      	ldr	r1, [r7, #4]
 8001adc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae0:	f000 f8f7 	bl	8001cd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ae4:	4a06      	ldr	r2, [pc, #24]	; (8001b00 <HAL_InitTick+0x5c>)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aea:	2300      	movs	r3, #0
 8001aec:	e000      	b.n	8001af0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	2000000c 	.word	0x2000000c
 8001afc:	20000014 	.word	0x20000014
 8001b00:	20000010 	.word	0x20000010

08001b04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  return uwTick;
 8001b08:	4b03      	ldr	r3, [pc, #12]	; (8001b18 <HAL_GetTick+0x14>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	20012ef8 	.word	0x20012ef8

08001b1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f003 0307 	and.w	r3, r3, #7
 8001b2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b2c:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <__NVIC_SetPriorityGrouping+0x44>)
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b32:	68ba      	ldr	r2, [r7, #8]
 8001b34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b38:	4013      	ands	r3, r2
 8001b3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b4e:	4a04      	ldr	r2, [pc, #16]	; (8001b60 <__NVIC_SetPriorityGrouping+0x44>)
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	60d3      	str	r3, [r2, #12]
}
 8001b54:	bf00      	nop
 8001b56:	3714      	adds	r7, #20
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	e000ed00 	.word	0xe000ed00

08001b64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b68:	4b04      	ldr	r3, [pc, #16]	; (8001b7c <__NVIC_GetPriorityGrouping+0x18>)
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	0a1b      	lsrs	r3, r3, #8
 8001b6e:	f003 0307 	and.w	r3, r3, #7
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr
 8001b7c:	e000ed00 	.word	0xe000ed00

08001b80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	4603      	mov	r3, r0
 8001b88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	db0b      	blt.n	8001baa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b92:	79fb      	ldrb	r3, [r7, #7]
 8001b94:	f003 021f 	and.w	r2, r3, #31
 8001b98:	4907      	ldr	r1, [pc, #28]	; (8001bb8 <__NVIC_EnableIRQ+0x38>)
 8001b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9e:	095b      	lsrs	r3, r3, #5
 8001ba0:	2001      	movs	r0, #1
 8001ba2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001baa:	bf00      	nop
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	e000e100 	.word	0xe000e100

08001bbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	6039      	str	r1, [r7, #0]
 8001bc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	db0a      	blt.n	8001be6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	b2da      	uxtb	r2, r3
 8001bd4:	490c      	ldr	r1, [pc, #48]	; (8001c08 <__NVIC_SetPriority+0x4c>)
 8001bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bda:	0112      	lsls	r2, r2, #4
 8001bdc:	b2d2      	uxtb	r2, r2
 8001bde:	440b      	add	r3, r1
 8001be0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001be4:	e00a      	b.n	8001bfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	b2da      	uxtb	r2, r3
 8001bea:	4908      	ldr	r1, [pc, #32]	; (8001c0c <__NVIC_SetPriority+0x50>)
 8001bec:	79fb      	ldrb	r3, [r7, #7]
 8001bee:	f003 030f 	and.w	r3, r3, #15
 8001bf2:	3b04      	subs	r3, #4
 8001bf4:	0112      	lsls	r2, r2, #4
 8001bf6:	b2d2      	uxtb	r2, r2
 8001bf8:	440b      	add	r3, r1
 8001bfa:	761a      	strb	r2, [r3, #24]
}
 8001bfc:	bf00      	nop
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr
 8001c08:	e000e100 	.word	0xe000e100
 8001c0c:	e000ed00 	.word	0xe000ed00

08001c10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b089      	sub	sp, #36	; 0x24
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f003 0307 	and.w	r3, r3, #7
 8001c22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	f1c3 0307 	rsb	r3, r3, #7
 8001c2a:	2b04      	cmp	r3, #4
 8001c2c:	bf28      	it	cs
 8001c2e:	2304      	movcs	r3, #4
 8001c30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	3304      	adds	r3, #4
 8001c36:	2b06      	cmp	r3, #6
 8001c38:	d902      	bls.n	8001c40 <NVIC_EncodePriority+0x30>
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	3b03      	subs	r3, #3
 8001c3e:	e000      	b.n	8001c42 <NVIC_EncodePriority+0x32>
 8001c40:	2300      	movs	r3, #0
 8001c42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c44:	f04f 32ff 	mov.w	r2, #4294967295
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	43da      	mvns	r2, r3
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	401a      	ands	r2, r3
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c58:	f04f 31ff 	mov.w	r1, #4294967295
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c62:	43d9      	mvns	r1, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c68:	4313      	orrs	r3, r2
         );
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3724      	adds	r7, #36	; 0x24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
	...

08001c78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	3b01      	subs	r3, #1
 8001c84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c88:	d301      	bcc.n	8001c8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e00f      	b.n	8001cae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c8e:	4a0a      	ldr	r2, [pc, #40]	; (8001cb8 <SysTick_Config+0x40>)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	3b01      	subs	r3, #1
 8001c94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c96:	210f      	movs	r1, #15
 8001c98:	f04f 30ff 	mov.w	r0, #4294967295
 8001c9c:	f7ff ff8e 	bl	8001bbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ca0:	4b05      	ldr	r3, [pc, #20]	; (8001cb8 <SysTick_Config+0x40>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ca6:	4b04      	ldr	r3, [pc, #16]	; (8001cb8 <SysTick_Config+0x40>)
 8001ca8:	2207      	movs	r2, #7
 8001caa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	e000e010 	.word	0xe000e010

08001cbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f7ff ff29 	bl	8001b1c <__NVIC_SetPriorityGrouping>
}
 8001cca:	bf00      	nop
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b086      	sub	sp, #24
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	4603      	mov	r3, r0
 8001cda:	60b9      	str	r1, [r7, #8]
 8001cdc:	607a      	str	r2, [r7, #4]
 8001cde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ce4:	f7ff ff3e 	bl	8001b64 <__NVIC_GetPriorityGrouping>
 8001ce8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	68b9      	ldr	r1, [r7, #8]
 8001cee:	6978      	ldr	r0, [r7, #20]
 8001cf0:	f7ff ff8e 	bl	8001c10 <NVIC_EncodePriority>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cfa:	4611      	mov	r1, r2
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7ff ff5d 	bl	8001bbc <__NVIC_SetPriority>
}
 8001d02:	bf00      	nop
 8001d04:	3718      	adds	r7, #24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b082      	sub	sp, #8
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	4603      	mov	r3, r0
 8001d12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff ff31 	bl	8001b80 <__NVIC_EnableIRQ>
}
 8001d1e:	bf00      	nop
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b082      	sub	sp, #8
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f7ff ffa2 	bl	8001c78 <SysTick_Config>
 8001d34:	4603      	mov	r3, r0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
	...

08001d40 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d4c:	f7ff feda 	bl	8001b04 <HAL_GetTick>
 8001d50:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d101      	bne.n	8001d5c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e099      	b.n	8001e90 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2202      	movs	r2, #2
 8001d60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f022 0201 	bic.w	r2, r2, #1
 8001d7a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d7c:	e00f      	b.n	8001d9e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d7e:	f7ff fec1 	bl	8001b04 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b05      	cmp	r3, #5
 8001d8a:	d908      	bls.n	8001d9e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2220      	movs	r2, #32
 8001d90:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2203      	movs	r2, #3
 8001d96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e078      	b.n	8001e90 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0301 	and.w	r3, r3, #1
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d1e8      	bne.n	8001d7e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001db4:	697a      	ldr	r2, [r7, #20]
 8001db6:	4b38      	ldr	r3, [pc, #224]	; (8001e98 <HAL_DMA_Init+0x158>)
 8001db8:	4013      	ands	r3, r2
 8001dba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685a      	ldr	r2, [r3, #4]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	691b      	ldr	r3, [r3, #16]
 8001dd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001de2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a1b      	ldr	r3, [r3, #32]
 8001de8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dea:	697a      	ldr	r2, [r7, #20]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df4:	2b04      	cmp	r3, #4
 8001df6:	d107      	bne.n	8001e08 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e00:	4313      	orrs	r3, r2
 8001e02:	697a      	ldr	r2, [r7, #20]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	697a      	ldr	r2, [r7, #20]
 8001e0e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	695b      	ldr	r3, [r3, #20]
 8001e16:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	f023 0307 	bic.w	r3, r3, #7
 8001e1e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e24:	697a      	ldr	r2, [r7, #20]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2e:	2b04      	cmp	r3, #4
 8001e30:	d117      	bne.n	8001e62 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e36:	697a      	ldr	r2, [r7, #20]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d00e      	beq.n	8001e62 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f000 fa91 	bl	800236c <DMA_CheckFifoParam>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d008      	beq.n	8001e62 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2240      	movs	r2, #64	; 0x40
 8001e54:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e016      	b.n	8001e90 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	697a      	ldr	r2, [r7, #20]
 8001e68:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 fa48 	bl	8002300 <DMA_CalcBaseAndBitshift>
 8001e70:	4603      	mov	r3, r0
 8001e72:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e78:	223f      	movs	r2, #63	; 0x3f
 8001e7a:	409a      	lsls	r2, r3
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3718      	adds	r7, #24
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	f010803f 	.word	0xf010803f

08001e9c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	60f8      	str	r0, [r7, #12]
 8001ea4:	60b9      	str	r1, [r7, #8]
 8001ea6:	607a      	str	r2, [r7, #4]
 8001ea8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d101      	bne.n	8001ec2 <HAL_DMA_Start_IT+0x26>
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	e040      	b.n	8001f44 <HAL_DMA_Start_IT+0xa8>
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d12f      	bne.n	8001f36 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2202      	movs	r2, #2
 8001eda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	68b9      	ldr	r1, [r7, #8]
 8001eea:	68f8      	ldr	r0, [r7, #12]
 8001eec:	f000 f9da 	bl	80022a4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef4:	223f      	movs	r2, #63	; 0x3f
 8001ef6:	409a      	lsls	r2, r3
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f042 0216 	orr.w	r2, r2, #22
 8001f0a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d007      	beq.n	8001f24 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f042 0208 	orr.w	r2, r2, #8
 8001f22:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f042 0201 	orr.w	r2, r2, #1
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	e005      	b.n	8001f42 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f3e:	2302      	movs	r3, #2
 8001f40:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f42:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3718      	adds	r7, #24
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d004      	beq.n	8001f6a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2280      	movs	r2, #128	; 0x80
 8001f64:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e00c      	b.n	8001f84 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2205      	movs	r2, #5
 8001f6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f022 0201 	bic.w	r2, r2, #1
 8001f80:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f9c:	4b92      	ldr	r3, [pc, #584]	; (80021e8 <HAL_DMA_IRQHandler+0x258>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a92      	ldr	r2, [pc, #584]	; (80021ec <HAL_DMA_IRQHandler+0x25c>)
 8001fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa6:	0a9b      	lsrs	r3, r3, #10
 8001fa8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fba:	2208      	movs	r2, #8
 8001fbc:	409a      	lsls	r2, r3
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d01a      	beq.n	8001ffc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0304 	and.w	r3, r3, #4
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d013      	beq.n	8001ffc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f022 0204 	bic.w	r2, r2, #4
 8001fe2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe8:	2208      	movs	r2, #8
 8001fea:	409a      	lsls	r2, r3
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff4:	f043 0201 	orr.w	r2, r3, #1
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002000:	2201      	movs	r2, #1
 8002002:	409a      	lsls	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	4013      	ands	r3, r2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d012      	beq.n	8002032 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	695b      	ldr	r3, [r3, #20]
 8002012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002016:	2b00      	cmp	r3, #0
 8002018:	d00b      	beq.n	8002032 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800201e:	2201      	movs	r2, #1
 8002020:	409a      	lsls	r2, r3
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800202a:	f043 0202 	orr.w	r2, r3, #2
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002036:	2204      	movs	r2, #4
 8002038:	409a      	lsls	r2, r3
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	4013      	ands	r3, r2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d012      	beq.n	8002068 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d00b      	beq.n	8002068 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002054:	2204      	movs	r2, #4
 8002056:	409a      	lsls	r2, r3
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002060:	f043 0204 	orr.w	r2, r3, #4
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800206c:	2210      	movs	r2, #16
 800206e:	409a      	lsls	r2, r3
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	4013      	ands	r3, r2
 8002074:	2b00      	cmp	r3, #0
 8002076:	d043      	beq.n	8002100 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0308 	and.w	r3, r3, #8
 8002082:	2b00      	cmp	r3, #0
 8002084:	d03c      	beq.n	8002100 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800208a:	2210      	movs	r2, #16
 800208c:	409a      	lsls	r2, r3
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d018      	beq.n	80020d2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d108      	bne.n	80020c0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d024      	beq.n	8002100 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	4798      	blx	r3
 80020be:	e01f      	b.n	8002100 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d01b      	beq.n	8002100 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	4798      	blx	r3
 80020d0:	e016      	b.n	8002100 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d107      	bne.n	80020f0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f022 0208 	bic.w	r2, r2, #8
 80020ee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d003      	beq.n	8002100 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002104:	2220      	movs	r2, #32
 8002106:	409a      	lsls	r2, r3
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	4013      	ands	r3, r2
 800210c:	2b00      	cmp	r3, #0
 800210e:	f000 808e 	beq.w	800222e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0310 	and.w	r3, r3, #16
 800211c:	2b00      	cmp	r3, #0
 800211e:	f000 8086 	beq.w	800222e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002126:	2220      	movs	r2, #32
 8002128:	409a      	lsls	r2, r3
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002134:	b2db      	uxtb	r3, r3
 8002136:	2b05      	cmp	r3, #5
 8002138:	d136      	bne.n	80021a8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f022 0216 	bic.w	r2, r2, #22
 8002148:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	695a      	ldr	r2, [r3, #20]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002158:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	2b00      	cmp	r3, #0
 8002160:	d103      	bne.n	800216a <HAL_DMA_IRQHandler+0x1da>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002166:	2b00      	cmp	r3, #0
 8002168:	d007      	beq.n	800217a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 0208 	bic.w	r2, r2, #8
 8002178:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800217e:	223f      	movs	r2, #63	; 0x3f
 8002180:	409a      	lsls	r2, r3
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2201      	movs	r2, #1
 800218a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800219a:	2b00      	cmp	r3, #0
 800219c:	d07d      	beq.n	800229a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	4798      	blx	r3
        }
        return;
 80021a6:	e078      	b.n	800229a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d01c      	beq.n	80021f0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d108      	bne.n	80021d6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d030      	beq.n	800222e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	4798      	blx	r3
 80021d4:	e02b      	b.n	800222e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d027      	beq.n	800222e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	4798      	blx	r3
 80021e6:	e022      	b.n	800222e <HAL_DMA_IRQHandler+0x29e>
 80021e8:	2000000c 	.word	0x2000000c
 80021ec:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d10f      	bne.n	800221e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f022 0210 	bic.w	r2, r2, #16
 800220c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2201      	movs	r2, #1
 8002212:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002222:	2b00      	cmp	r3, #0
 8002224:	d003      	beq.n	800222e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002232:	2b00      	cmp	r3, #0
 8002234:	d032      	beq.n	800229c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b00      	cmp	r3, #0
 8002240:	d022      	beq.n	8002288 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2205      	movs	r2, #5
 8002246:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f022 0201 	bic.w	r2, r2, #1
 8002258:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	3301      	adds	r3, #1
 800225e:	60bb      	str	r3, [r7, #8]
 8002260:	697a      	ldr	r2, [r7, #20]
 8002262:	429a      	cmp	r2, r3
 8002264:	d307      	bcc.n	8002276 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0301 	and.w	r3, r3, #1
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1f2      	bne.n	800225a <HAL_DMA_IRQHandler+0x2ca>
 8002274:	e000      	b.n	8002278 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002276:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800228c:	2b00      	cmp	r3, #0
 800228e:	d005      	beq.n	800229c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	4798      	blx	r3
 8002298:	e000      	b.n	800229c <HAL_DMA_IRQHandler+0x30c>
        return;
 800229a:	bf00      	nop
    }
  }
}
 800229c:	3718      	adds	r7, #24
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop

080022a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
 80022b0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80022c0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	2b40      	cmp	r3, #64	; 0x40
 80022d0:	d108      	bne.n	80022e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	68ba      	ldr	r2, [r7, #8]
 80022e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80022e2:	e007      	b.n	80022f4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68ba      	ldr	r2, [r7, #8]
 80022ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	60da      	str	r2, [r3, #12]
}
 80022f4:	bf00      	nop
 80022f6:	3714      	adds	r7, #20
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002300:	b480      	push	{r7}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	b2db      	uxtb	r3, r3
 800230e:	3b10      	subs	r3, #16
 8002310:	4a14      	ldr	r2, [pc, #80]	; (8002364 <DMA_CalcBaseAndBitshift+0x64>)
 8002312:	fba2 2303 	umull	r2, r3, r2, r3
 8002316:	091b      	lsrs	r3, r3, #4
 8002318:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800231a:	4a13      	ldr	r2, [pc, #76]	; (8002368 <DMA_CalcBaseAndBitshift+0x68>)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	4413      	add	r3, r2
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	461a      	mov	r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2b03      	cmp	r3, #3
 800232c:	d909      	bls.n	8002342 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002336:	f023 0303 	bic.w	r3, r3, #3
 800233a:	1d1a      	adds	r2, r3, #4
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	659a      	str	r2, [r3, #88]	; 0x58
 8002340:	e007      	b.n	8002352 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800234a:	f023 0303 	bic.w	r3, r3, #3
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002356:	4618      	mov	r0, r3
 8002358:	3714      	adds	r7, #20
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	aaaaaaab 	.word	0xaaaaaaab
 8002368:	08007ef0 	.word	0x08007ef0

0800236c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800236c:	b480      	push	{r7}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002374:	2300      	movs	r3, #0
 8002376:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d11f      	bne.n	80023c6 <DMA_CheckFifoParam+0x5a>
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	2b03      	cmp	r3, #3
 800238a:	d856      	bhi.n	800243a <DMA_CheckFifoParam+0xce>
 800238c:	a201      	add	r2, pc, #4	; (adr r2, 8002394 <DMA_CheckFifoParam+0x28>)
 800238e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002392:	bf00      	nop
 8002394:	080023a5 	.word	0x080023a5
 8002398:	080023b7 	.word	0x080023b7
 800239c:	080023a5 	.word	0x080023a5
 80023a0:	0800243b 	.word	0x0800243b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d046      	beq.n	800243e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023b4:	e043      	b.n	800243e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023be:	d140      	bne.n	8002442 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023c4:	e03d      	b.n	8002442 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	699b      	ldr	r3, [r3, #24]
 80023ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023ce:	d121      	bne.n	8002414 <DMA_CheckFifoParam+0xa8>
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	2b03      	cmp	r3, #3
 80023d4:	d837      	bhi.n	8002446 <DMA_CheckFifoParam+0xda>
 80023d6:	a201      	add	r2, pc, #4	; (adr r2, 80023dc <DMA_CheckFifoParam+0x70>)
 80023d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023dc:	080023ed 	.word	0x080023ed
 80023e0:	080023f3 	.word	0x080023f3
 80023e4:	080023ed 	.word	0x080023ed
 80023e8:	08002405 	.word	0x08002405
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	73fb      	strb	r3, [r7, #15]
      break;
 80023f0:	e030      	b.n	8002454 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d025      	beq.n	800244a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002402:	e022      	b.n	800244a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002408:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800240c:	d11f      	bne.n	800244e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002412:	e01c      	b.n	800244e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	2b02      	cmp	r3, #2
 8002418:	d903      	bls.n	8002422 <DMA_CheckFifoParam+0xb6>
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	2b03      	cmp	r3, #3
 800241e:	d003      	beq.n	8002428 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002420:	e018      	b.n	8002454 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	73fb      	strb	r3, [r7, #15]
      break;
 8002426:	e015      	b.n	8002454 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800242c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00e      	beq.n	8002452 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	73fb      	strb	r3, [r7, #15]
      break;
 8002438:	e00b      	b.n	8002452 <DMA_CheckFifoParam+0xe6>
      break;
 800243a:	bf00      	nop
 800243c:	e00a      	b.n	8002454 <DMA_CheckFifoParam+0xe8>
      break;
 800243e:	bf00      	nop
 8002440:	e008      	b.n	8002454 <DMA_CheckFifoParam+0xe8>
      break;
 8002442:	bf00      	nop
 8002444:	e006      	b.n	8002454 <DMA_CheckFifoParam+0xe8>
      break;
 8002446:	bf00      	nop
 8002448:	e004      	b.n	8002454 <DMA_CheckFifoParam+0xe8>
      break;
 800244a:	bf00      	nop
 800244c:	e002      	b.n	8002454 <DMA_CheckFifoParam+0xe8>
      break;   
 800244e:	bf00      	nop
 8002450:	e000      	b.n	8002454 <DMA_CheckFifoParam+0xe8>
      break;
 8002452:	bf00      	nop
    }
  } 
  
  return status; 
 8002454:	7bfb      	ldrb	r3, [r7, #15]
}
 8002456:	4618      	mov	r0, r3
 8002458:	3714      	adds	r7, #20
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop

08002464 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002464:	b480      	push	{r7}
 8002466:	b089      	sub	sp, #36	; 0x24
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800246e:	2300      	movs	r3, #0
 8002470:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002472:	2300      	movs	r3, #0
 8002474:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002476:	2300      	movs	r3, #0
 8002478:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800247a:	2300      	movs	r3, #0
 800247c:	61fb      	str	r3, [r7, #28]
 800247e:	e16b      	b.n	8002758 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002480:	2201      	movs	r2, #1
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	697a      	ldr	r2, [r7, #20]
 8002490:	4013      	ands	r3, r2
 8002492:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002494:	693a      	ldr	r2, [r7, #16]
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	429a      	cmp	r2, r3
 800249a:	f040 815a 	bne.w	8002752 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f003 0303 	and.w	r3, r3, #3
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d005      	beq.n	80024b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d130      	bne.n	8002518 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	2203      	movs	r2, #3
 80024c2:	fa02 f303 	lsl.w	r3, r2, r3
 80024c6:	43db      	mvns	r3, r3
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	4013      	ands	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	68da      	ldr	r2, [r3, #12]
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	fa02 f303 	lsl.w	r3, r2, r3
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	4313      	orrs	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024ec:	2201      	movs	r2, #1
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	43db      	mvns	r3, r3
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	4013      	ands	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	091b      	lsrs	r3, r3, #4
 8002502:	f003 0201 	and.w	r2, r3, #1
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	4313      	orrs	r3, r2
 8002510:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f003 0303 	and.w	r3, r3, #3
 8002520:	2b03      	cmp	r3, #3
 8002522:	d017      	beq.n	8002554 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	2203      	movs	r2, #3
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	43db      	mvns	r3, r3
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	4013      	ands	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	4313      	orrs	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f003 0303 	and.w	r3, r3, #3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d123      	bne.n	80025a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	08da      	lsrs	r2, r3, #3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	3208      	adds	r2, #8
 8002568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800256c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	f003 0307 	and.w	r3, r3, #7
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	220f      	movs	r2, #15
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	43db      	mvns	r3, r3
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	4013      	ands	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	691a      	ldr	r2, [r3, #16]
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	f003 0307 	and.w	r3, r3, #7
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	4313      	orrs	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	08da      	lsrs	r2, r3, #3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	3208      	adds	r2, #8
 80025a2:	69b9      	ldr	r1, [r7, #24]
 80025a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	2203      	movs	r2, #3
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	43db      	mvns	r3, r3
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	4013      	ands	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f003 0203 	and.w	r2, r3, #3
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	f000 80b4 	beq.w	8002752 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ea:	2300      	movs	r3, #0
 80025ec:	60fb      	str	r3, [r7, #12]
 80025ee:	4b60      	ldr	r3, [pc, #384]	; (8002770 <HAL_GPIO_Init+0x30c>)
 80025f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f2:	4a5f      	ldr	r2, [pc, #380]	; (8002770 <HAL_GPIO_Init+0x30c>)
 80025f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025f8:	6453      	str	r3, [r2, #68]	; 0x44
 80025fa:	4b5d      	ldr	r3, [pc, #372]	; (8002770 <HAL_GPIO_Init+0x30c>)
 80025fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002602:	60fb      	str	r3, [r7, #12]
 8002604:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002606:	4a5b      	ldr	r2, [pc, #364]	; (8002774 <HAL_GPIO_Init+0x310>)
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	089b      	lsrs	r3, r3, #2
 800260c:	3302      	adds	r3, #2
 800260e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002612:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	f003 0303 	and.w	r3, r3, #3
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	220f      	movs	r2, #15
 800261e:	fa02 f303 	lsl.w	r3, r2, r3
 8002622:	43db      	mvns	r3, r3
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	4013      	ands	r3, r2
 8002628:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a52      	ldr	r2, [pc, #328]	; (8002778 <HAL_GPIO_Init+0x314>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d02b      	beq.n	800268a <HAL_GPIO_Init+0x226>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a51      	ldr	r2, [pc, #324]	; (800277c <HAL_GPIO_Init+0x318>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d025      	beq.n	8002686 <HAL_GPIO_Init+0x222>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a50      	ldr	r2, [pc, #320]	; (8002780 <HAL_GPIO_Init+0x31c>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d01f      	beq.n	8002682 <HAL_GPIO_Init+0x21e>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a4f      	ldr	r2, [pc, #316]	; (8002784 <HAL_GPIO_Init+0x320>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d019      	beq.n	800267e <HAL_GPIO_Init+0x21a>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a4e      	ldr	r2, [pc, #312]	; (8002788 <HAL_GPIO_Init+0x324>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d013      	beq.n	800267a <HAL_GPIO_Init+0x216>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a4d      	ldr	r2, [pc, #308]	; (800278c <HAL_GPIO_Init+0x328>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d00d      	beq.n	8002676 <HAL_GPIO_Init+0x212>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a4c      	ldr	r2, [pc, #304]	; (8002790 <HAL_GPIO_Init+0x32c>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d007      	beq.n	8002672 <HAL_GPIO_Init+0x20e>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a4b      	ldr	r2, [pc, #300]	; (8002794 <HAL_GPIO_Init+0x330>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d101      	bne.n	800266e <HAL_GPIO_Init+0x20a>
 800266a:	2307      	movs	r3, #7
 800266c:	e00e      	b.n	800268c <HAL_GPIO_Init+0x228>
 800266e:	2308      	movs	r3, #8
 8002670:	e00c      	b.n	800268c <HAL_GPIO_Init+0x228>
 8002672:	2306      	movs	r3, #6
 8002674:	e00a      	b.n	800268c <HAL_GPIO_Init+0x228>
 8002676:	2305      	movs	r3, #5
 8002678:	e008      	b.n	800268c <HAL_GPIO_Init+0x228>
 800267a:	2304      	movs	r3, #4
 800267c:	e006      	b.n	800268c <HAL_GPIO_Init+0x228>
 800267e:	2303      	movs	r3, #3
 8002680:	e004      	b.n	800268c <HAL_GPIO_Init+0x228>
 8002682:	2302      	movs	r3, #2
 8002684:	e002      	b.n	800268c <HAL_GPIO_Init+0x228>
 8002686:	2301      	movs	r3, #1
 8002688:	e000      	b.n	800268c <HAL_GPIO_Init+0x228>
 800268a:	2300      	movs	r3, #0
 800268c:	69fa      	ldr	r2, [r7, #28]
 800268e:	f002 0203 	and.w	r2, r2, #3
 8002692:	0092      	lsls	r2, r2, #2
 8002694:	4093      	lsls	r3, r2
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	4313      	orrs	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800269c:	4935      	ldr	r1, [pc, #212]	; (8002774 <HAL_GPIO_Init+0x310>)
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	089b      	lsrs	r3, r3, #2
 80026a2:	3302      	adds	r3, #2
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026aa:	4b3b      	ldr	r3, [pc, #236]	; (8002798 <HAL_GPIO_Init+0x334>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	43db      	mvns	r3, r3
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	4013      	ands	r3, r2
 80026b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d003      	beq.n	80026ce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026ce:	4a32      	ldr	r2, [pc, #200]	; (8002798 <HAL_GPIO_Init+0x334>)
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80026d4:	4b30      	ldr	r3, [pc, #192]	; (8002798 <HAL_GPIO_Init+0x334>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	43db      	mvns	r3, r3
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	4013      	ands	r3, r2
 80026e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d003      	beq.n	80026f8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026f8:	4a27      	ldr	r2, [pc, #156]	; (8002798 <HAL_GPIO_Init+0x334>)
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026fe:	4b26      	ldr	r3, [pc, #152]	; (8002798 <HAL_GPIO_Init+0x334>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	43db      	mvns	r3, r3
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	4013      	ands	r3, r2
 800270c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d003      	beq.n	8002722 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	4313      	orrs	r3, r2
 8002720:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002722:	4a1d      	ldr	r2, [pc, #116]	; (8002798 <HAL_GPIO_Init+0x334>)
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002728:	4b1b      	ldr	r3, [pc, #108]	; (8002798 <HAL_GPIO_Init+0x334>)
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	43db      	mvns	r3, r3
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	4013      	ands	r3, r2
 8002736:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d003      	beq.n	800274c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	4313      	orrs	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800274c:	4a12      	ldr	r2, [pc, #72]	; (8002798 <HAL_GPIO_Init+0x334>)
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	3301      	adds	r3, #1
 8002756:	61fb      	str	r3, [r7, #28]
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	2b0f      	cmp	r3, #15
 800275c:	f67f ae90 	bls.w	8002480 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002760:	bf00      	nop
 8002762:	bf00      	nop
 8002764:	3724      	adds	r7, #36	; 0x24
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	40023800 	.word	0x40023800
 8002774:	40013800 	.word	0x40013800
 8002778:	40020000 	.word	0x40020000
 800277c:	40020400 	.word	0x40020400
 8002780:	40020800 	.word	0x40020800
 8002784:	40020c00 	.word	0x40020c00
 8002788:	40021000 	.word	0x40021000
 800278c:	40021400 	.word	0x40021400
 8002790:	40021800 	.word	0x40021800
 8002794:	40021c00 	.word	0x40021c00
 8002798:	40013c00 	.word	0x40013c00

0800279c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800279c:	b480      	push	{r7}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	460b      	mov	r3, r1
 80027a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	691a      	ldr	r2, [r3, #16]
 80027ac:	887b      	ldrh	r3, [r7, #2]
 80027ae:	4013      	ands	r3, r2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d002      	beq.n	80027ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027b4:	2301      	movs	r3, #1
 80027b6:	73fb      	strb	r3, [r7, #15]
 80027b8:	e001      	b.n	80027be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027ba:	2300      	movs	r3, #0
 80027bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027be:	7bfb      	ldrb	r3, [r7, #15]
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3714      	adds	r7, #20
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	460b      	mov	r3, r1
 80027d6:	807b      	strh	r3, [r7, #2]
 80027d8:	4613      	mov	r3, r2
 80027da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027dc:	787b      	ldrb	r3, [r7, #1]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d003      	beq.n	80027ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027e2:	887a      	ldrh	r2, [r7, #2]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027e8:	e003      	b.n	80027f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027ea:	887b      	ldrh	r3, [r7, #2]
 80027ec:	041a      	lsls	r2, r3, #16
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	619a      	str	r2, [r3, #24]
}
 80027f2:	bf00      	nop
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr

080027fe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027fe:	b480      	push	{r7}
 8002800:	b085      	sub	sp, #20
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
 8002806:	460b      	mov	r3, r1
 8002808:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002810:	887a      	ldrh	r2, [r7, #2]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	4013      	ands	r3, r2
 8002816:	041a      	lsls	r2, r3, #16
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	43d9      	mvns	r1, r3
 800281c:	887b      	ldrh	r3, [r7, #2]
 800281e:	400b      	ands	r3, r1
 8002820:	431a      	orrs	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	619a      	str	r2, [r3, #24]
}
 8002826:	bf00      	nop
 8002828:	3714      	adds	r7, #20
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
	...

08002834 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	4603      	mov	r3, r0
 800283c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800283e:	4b08      	ldr	r3, [pc, #32]	; (8002860 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002840:	695a      	ldr	r2, [r3, #20]
 8002842:	88fb      	ldrh	r3, [r7, #6]
 8002844:	4013      	ands	r3, r2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d006      	beq.n	8002858 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800284a:	4a05      	ldr	r2, [pc, #20]	; (8002860 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800284c:	88fb      	ldrh	r3, [r7, #6]
 800284e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002850:	88fb      	ldrh	r3, [r7, #6]
 8002852:	4618      	mov	r0, r3
 8002854:	f000 f806 	bl	8002864 <HAL_GPIO_EXTI_Callback>
  }
}
 8002858:	bf00      	nop
 800285a:	3708      	adds	r7, #8
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	40013c00 	.word	0x40013c00

08002864 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	4603      	mov	r3, r0
 800286c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800286e:	bf00      	nop
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
	...

0800287c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b086      	sub	sp, #24
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e264      	b.n	8002d58 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	2b00      	cmp	r3, #0
 8002898:	d075      	beq.n	8002986 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800289a:	4ba3      	ldr	r3, [pc, #652]	; (8002b28 <HAL_RCC_OscConfig+0x2ac>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f003 030c 	and.w	r3, r3, #12
 80028a2:	2b04      	cmp	r3, #4
 80028a4:	d00c      	beq.n	80028c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028a6:	4ba0      	ldr	r3, [pc, #640]	; (8002b28 <HAL_RCC_OscConfig+0x2ac>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028ae:	2b08      	cmp	r3, #8
 80028b0:	d112      	bne.n	80028d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028b2:	4b9d      	ldr	r3, [pc, #628]	; (8002b28 <HAL_RCC_OscConfig+0x2ac>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028be:	d10b      	bne.n	80028d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028c0:	4b99      	ldr	r3, [pc, #612]	; (8002b28 <HAL_RCC_OscConfig+0x2ac>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d05b      	beq.n	8002984 <HAL_RCC_OscConfig+0x108>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d157      	bne.n	8002984 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e23f      	b.n	8002d58 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028e0:	d106      	bne.n	80028f0 <HAL_RCC_OscConfig+0x74>
 80028e2:	4b91      	ldr	r3, [pc, #580]	; (8002b28 <HAL_RCC_OscConfig+0x2ac>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a90      	ldr	r2, [pc, #576]	; (8002b28 <HAL_RCC_OscConfig+0x2ac>)
 80028e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ec:	6013      	str	r3, [r2, #0]
 80028ee:	e01d      	b.n	800292c <HAL_RCC_OscConfig+0xb0>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028f8:	d10c      	bne.n	8002914 <HAL_RCC_OscConfig+0x98>
 80028fa:	4b8b      	ldr	r3, [pc, #556]	; (8002b28 <HAL_RCC_OscConfig+0x2ac>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a8a      	ldr	r2, [pc, #552]	; (8002b28 <HAL_RCC_OscConfig+0x2ac>)
 8002900:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002904:	6013      	str	r3, [r2, #0]
 8002906:	4b88      	ldr	r3, [pc, #544]	; (8002b28 <HAL_RCC_OscConfig+0x2ac>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a87      	ldr	r2, [pc, #540]	; (8002b28 <HAL_RCC_OscConfig+0x2ac>)
 800290c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002910:	6013      	str	r3, [r2, #0]
 8002912:	e00b      	b.n	800292c <HAL_RCC_OscConfig+0xb0>
 8002914:	4b84      	ldr	r3, [pc, #528]	; (8002b28 <HAL_RCC_OscConfig+0x2ac>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a83      	ldr	r2, [pc, #524]	; (8002b28 <HAL_RCC_OscConfig+0x2ac>)
 800291a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800291e:	6013      	str	r3, [r2, #0]
 8002920:	4b81      	ldr	r3, [pc, #516]	; (8002b28 <HAL_RCC_OscConfig+0x2ac>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a80      	ldr	r2, [pc, #512]	; (8002b28 <HAL_RCC_OscConfig+0x2ac>)
 8002926:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800292a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d013      	beq.n	800295c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002934:	f7ff f8e6 	bl	8001b04 <HAL_GetTick>
 8002938:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800293a:	e008      	b.n	800294e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800293c:	f7ff f8e2 	bl	8001b04 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b64      	cmp	r3, #100	; 0x64
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e204      	b.n	8002d58 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800294e:	4b76      	ldr	r3, [pc, #472]	; (8002b28 <HAL_RCC_OscConfig+0x2ac>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d0f0      	beq.n	800293c <HAL_RCC_OscConfig+0xc0>
 800295a:	e014      	b.n	8002986 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800295c:	f7ff f8d2 	bl	8001b04 <HAL_GetTick>
 8002960:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002962:	e008      	b.n	8002976 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002964:	f7ff f8ce 	bl	8001b04 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b64      	cmp	r3, #100	; 0x64
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e1f0      	b.n	8002d58 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002976:	4b6c      	ldr	r3, [pc, #432]	; (8002b28 <HAL_RCC_OscConfig+0x2ac>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1f0      	bne.n	8002964 <HAL_RCC_OscConfig+0xe8>
 8002982:	e000      	b.n	8002986 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002984:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d063      	beq.n	8002a5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002992:	4b65      	ldr	r3, [pc, #404]	; (8002b28 <HAL_RCC_OscConfig+0x2ac>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f003 030c 	and.w	r3, r3, #12
 800299a:	2b00      	cmp	r3, #0
 800299c:	d00b      	beq.n	80029b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800299e:	4b62      	ldr	r3, [pc, #392]	; (8002b28 <HAL_RCC_OscConfig+0x2ac>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029a6:	2b08      	cmp	r3, #8
 80029a8:	d11c      	bne.n	80029e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029aa:	4b5f      	ldr	r3, [pc, #380]	; (8002b28 <HAL_RCC_OscConfig+0x2ac>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d116      	bne.n	80029e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029b6:	4b5c      	ldr	r3, [pc, #368]	; (8002b28 <HAL_RCC_OscConfig+0x2ac>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d005      	beq.n	80029ce <HAL_RCC_OscConfig+0x152>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d001      	beq.n	80029ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e1c4      	b.n	8002d58 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ce:	4b56      	ldr	r3, [pc, #344]	; (8002b28 <HAL_RCC_OscConfig+0x2ac>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	4952      	ldr	r1, [pc, #328]	; (8002b28 <HAL_RCC_OscConfig+0x2ac>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029e2:	e03a      	b.n	8002a5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d020      	beq.n	8002a2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029ec:	4b4f      	ldr	r3, [pc, #316]	; (8002b2c <HAL_RCC_OscConfig+0x2b0>)
 80029ee:	2201      	movs	r2, #1
 80029f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f2:	f7ff f887 	bl	8001b04 <HAL_GetTick>
 80029f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f8:	e008      	b.n	8002a0c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029fa:	f7ff f883 	bl	8001b04 <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d901      	bls.n	8002a0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e1a5      	b.n	8002d58 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a0c:	4b46      	ldr	r3, [pc, #280]	; (8002b28 <HAL_RCC_OscConfig+0x2ac>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d0f0      	beq.n	80029fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a18:	4b43      	ldr	r3, [pc, #268]	; (8002b28 <HAL_RCC_OscConfig+0x2ac>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	00db      	lsls	r3, r3, #3
 8002a26:	4940      	ldr	r1, [pc, #256]	; (8002b28 <HAL_RCC_OscConfig+0x2ac>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	600b      	str	r3, [r1, #0]
 8002a2c:	e015      	b.n	8002a5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a2e:	4b3f      	ldr	r3, [pc, #252]	; (8002b2c <HAL_RCC_OscConfig+0x2b0>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a34:	f7ff f866 	bl	8001b04 <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a3c:	f7ff f862 	bl	8001b04 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e184      	b.n	8002d58 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a4e:	4b36      	ldr	r3, [pc, #216]	; (8002b28 <HAL_RCC_OscConfig+0x2ac>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1f0      	bne.n	8002a3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0308 	and.w	r3, r3, #8
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d030      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d016      	beq.n	8002a9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a6e:	4b30      	ldr	r3, [pc, #192]	; (8002b30 <HAL_RCC_OscConfig+0x2b4>)
 8002a70:	2201      	movs	r2, #1
 8002a72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a74:	f7ff f846 	bl	8001b04 <HAL_GetTick>
 8002a78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a7a:	e008      	b.n	8002a8e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a7c:	f7ff f842 	bl	8001b04 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e164      	b.n	8002d58 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a8e:	4b26      	ldr	r3, [pc, #152]	; (8002b28 <HAL_RCC_OscConfig+0x2ac>)
 8002a90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d0f0      	beq.n	8002a7c <HAL_RCC_OscConfig+0x200>
 8002a9a:	e015      	b.n	8002ac8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a9c:	4b24      	ldr	r3, [pc, #144]	; (8002b30 <HAL_RCC_OscConfig+0x2b4>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aa2:	f7ff f82f 	bl	8001b04 <HAL_GetTick>
 8002aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aa8:	e008      	b.n	8002abc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002aaa:	f7ff f82b 	bl	8001b04 <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d901      	bls.n	8002abc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e14d      	b.n	8002d58 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002abc:	4b1a      	ldr	r3, [pc, #104]	; (8002b28 <HAL_RCC_OscConfig+0x2ac>)
 8002abe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d1f0      	bne.n	8002aaa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0304 	and.w	r3, r3, #4
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f000 80a0 	beq.w	8002c16 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ada:	4b13      	ldr	r3, [pc, #76]	; (8002b28 <HAL_RCC_OscConfig+0x2ac>)
 8002adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d10f      	bne.n	8002b06 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	60bb      	str	r3, [r7, #8]
 8002aea:	4b0f      	ldr	r3, [pc, #60]	; (8002b28 <HAL_RCC_OscConfig+0x2ac>)
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	4a0e      	ldr	r2, [pc, #56]	; (8002b28 <HAL_RCC_OscConfig+0x2ac>)
 8002af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002af4:	6413      	str	r3, [r2, #64]	; 0x40
 8002af6:	4b0c      	ldr	r3, [pc, #48]	; (8002b28 <HAL_RCC_OscConfig+0x2ac>)
 8002af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002afe:	60bb      	str	r3, [r7, #8]
 8002b00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b02:	2301      	movs	r3, #1
 8002b04:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b06:	4b0b      	ldr	r3, [pc, #44]	; (8002b34 <HAL_RCC_OscConfig+0x2b8>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d121      	bne.n	8002b56 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b12:	4b08      	ldr	r3, [pc, #32]	; (8002b34 <HAL_RCC_OscConfig+0x2b8>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a07      	ldr	r2, [pc, #28]	; (8002b34 <HAL_RCC_OscConfig+0x2b8>)
 8002b18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b1e:	f7fe fff1 	bl	8001b04 <HAL_GetTick>
 8002b22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b24:	e011      	b.n	8002b4a <HAL_RCC_OscConfig+0x2ce>
 8002b26:	bf00      	nop
 8002b28:	40023800 	.word	0x40023800
 8002b2c:	42470000 	.word	0x42470000
 8002b30:	42470e80 	.word	0x42470e80
 8002b34:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b38:	f7fe ffe4 	bl	8001b04 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e106      	b.n	8002d58 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b4a:	4b85      	ldr	r3, [pc, #532]	; (8002d60 <HAL_RCC_OscConfig+0x4e4>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d0f0      	beq.n	8002b38 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d106      	bne.n	8002b6c <HAL_RCC_OscConfig+0x2f0>
 8002b5e:	4b81      	ldr	r3, [pc, #516]	; (8002d64 <HAL_RCC_OscConfig+0x4e8>)
 8002b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b62:	4a80      	ldr	r2, [pc, #512]	; (8002d64 <HAL_RCC_OscConfig+0x4e8>)
 8002b64:	f043 0301 	orr.w	r3, r3, #1
 8002b68:	6713      	str	r3, [r2, #112]	; 0x70
 8002b6a:	e01c      	b.n	8002ba6 <HAL_RCC_OscConfig+0x32a>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	2b05      	cmp	r3, #5
 8002b72:	d10c      	bne.n	8002b8e <HAL_RCC_OscConfig+0x312>
 8002b74:	4b7b      	ldr	r3, [pc, #492]	; (8002d64 <HAL_RCC_OscConfig+0x4e8>)
 8002b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b78:	4a7a      	ldr	r2, [pc, #488]	; (8002d64 <HAL_RCC_OscConfig+0x4e8>)
 8002b7a:	f043 0304 	orr.w	r3, r3, #4
 8002b7e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b80:	4b78      	ldr	r3, [pc, #480]	; (8002d64 <HAL_RCC_OscConfig+0x4e8>)
 8002b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b84:	4a77      	ldr	r2, [pc, #476]	; (8002d64 <HAL_RCC_OscConfig+0x4e8>)
 8002b86:	f043 0301 	orr.w	r3, r3, #1
 8002b8a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b8c:	e00b      	b.n	8002ba6 <HAL_RCC_OscConfig+0x32a>
 8002b8e:	4b75      	ldr	r3, [pc, #468]	; (8002d64 <HAL_RCC_OscConfig+0x4e8>)
 8002b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b92:	4a74      	ldr	r2, [pc, #464]	; (8002d64 <HAL_RCC_OscConfig+0x4e8>)
 8002b94:	f023 0301 	bic.w	r3, r3, #1
 8002b98:	6713      	str	r3, [r2, #112]	; 0x70
 8002b9a:	4b72      	ldr	r3, [pc, #456]	; (8002d64 <HAL_RCC_OscConfig+0x4e8>)
 8002b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b9e:	4a71      	ldr	r2, [pc, #452]	; (8002d64 <HAL_RCC_OscConfig+0x4e8>)
 8002ba0:	f023 0304 	bic.w	r3, r3, #4
 8002ba4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d015      	beq.n	8002bda <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bae:	f7fe ffa9 	bl	8001b04 <HAL_GetTick>
 8002bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bb4:	e00a      	b.n	8002bcc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bb6:	f7fe ffa5 	bl	8001b04 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d901      	bls.n	8002bcc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e0c5      	b.n	8002d58 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bcc:	4b65      	ldr	r3, [pc, #404]	; (8002d64 <HAL_RCC_OscConfig+0x4e8>)
 8002bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d0ee      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x33a>
 8002bd8:	e014      	b.n	8002c04 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bda:	f7fe ff93 	bl	8001b04 <HAL_GetTick>
 8002bde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002be0:	e00a      	b.n	8002bf8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002be2:	f7fe ff8f 	bl	8001b04 <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e0af      	b.n	8002d58 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bf8:	4b5a      	ldr	r3, [pc, #360]	; (8002d64 <HAL_RCC_OscConfig+0x4e8>)
 8002bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d1ee      	bne.n	8002be2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c04:	7dfb      	ldrb	r3, [r7, #23]
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d105      	bne.n	8002c16 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c0a:	4b56      	ldr	r3, [pc, #344]	; (8002d64 <HAL_RCC_OscConfig+0x4e8>)
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0e:	4a55      	ldr	r2, [pc, #340]	; (8002d64 <HAL_RCC_OscConfig+0x4e8>)
 8002c10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c14:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	f000 809b 	beq.w	8002d56 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c20:	4b50      	ldr	r3, [pc, #320]	; (8002d64 <HAL_RCC_OscConfig+0x4e8>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f003 030c 	and.w	r3, r3, #12
 8002c28:	2b08      	cmp	r3, #8
 8002c2a:	d05c      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d141      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c34:	4b4c      	ldr	r3, [pc, #304]	; (8002d68 <HAL_RCC_OscConfig+0x4ec>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3a:	f7fe ff63 	bl	8001b04 <HAL_GetTick>
 8002c3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c40:	e008      	b.n	8002c54 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c42:	f7fe ff5f 	bl	8001b04 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d901      	bls.n	8002c54 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e081      	b.n	8002d58 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c54:	4b43      	ldr	r3, [pc, #268]	; (8002d64 <HAL_RCC_OscConfig+0x4e8>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1f0      	bne.n	8002c42 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	69da      	ldr	r2, [r3, #28]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a1b      	ldr	r3, [r3, #32]
 8002c68:	431a      	orrs	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6e:	019b      	lsls	r3, r3, #6
 8002c70:	431a      	orrs	r2, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c76:	085b      	lsrs	r3, r3, #1
 8002c78:	3b01      	subs	r3, #1
 8002c7a:	041b      	lsls	r3, r3, #16
 8002c7c:	431a      	orrs	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c82:	061b      	lsls	r3, r3, #24
 8002c84:	4937      	ldr	r1, [pc, #220]	; (8002d64 <HAL_RCC_OscConfig+0x4e8>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c8a:	4b37      	ldr	r3, [pc, #220]	; (8002d68 <HAL_RCC_OscConfig+0x4ec>)
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c90:	f7fe ff38 	bl	8001b04 <HAL_GetTick>
 8002c94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c96:	e008      	b.n	8002caa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c98:	f7fe ff34 	bl	8001b04 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e056      	b.n	8002d58 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002caa:	4b2e      	ldr	r3, [pc, #184]	; (8002d64 <HAL_RCC_OscConfig+0x4e8>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d0f0      	beq.n	8002c98 <HAL_RCC_OscConfig+0x41c>
 8002cb6:	e04e      	b.n	8002d56 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cb8:	4b2b      	ldr	r3, [pc, #172]	; (8002d68 <HAL_RCC_OscConfig+0x4ec>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cbe:	f7fe ff21 	bl	8001b04 <HAL_GetTick>
 8002cc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cc4:	e008      	b.n	8002cd8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cc6:	f7fe ff1d 	bl	8001b04 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d901      	bls.n	8002cd8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e03f      	b.n	8002d58 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cd8:	4b22      	ldr	r3, [pc, #136]	; (8002d64 <HAL_RCC_OscConfig+0x4e8>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d1f0      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x44a>
 8002ce4:	e037      	b.n	8002d56 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	699b      	ldr	r3, [r3, #24]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d101      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e032      	b.n	8002d58 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cf2:	4b1c      	ldr	r3, [pc, #112]	; (8002d64 <HAL_RCC_OscConfig+0x4e8>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d028      	beq.n	8002d52 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d121      	bne.n	8002d52 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d11a      	bne.n	8002d52 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d22:	4013      	ands	r3, r2
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d28:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d111      	bne.n	8002d52 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d38:	085b      	lsrs	r3, r3, #1
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d107      	bne.n	8002d52 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d4c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d001      	beq.n	8002d56 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e000      	b.n	8002d58 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3718      	adds	r7, #24
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	40007000 	.word	0x40007000
 8002d64:	40023800 	.word	0x40023800
 8002d68:	42470060 	.word	0x42470060

08002d6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d101      	bne.n	8002d80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e0cc      	b.n	8002f1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d80:	4b68      	ldr	r3, [pc, #416]	; (8002f24 <HAL_RCC_ClockConfig+0x1b8>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0307 	and.w	r3, r3, #7
 8002d88:	683a      	ldr	r2, [r7, #0]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d90c      	bls.n	8002da8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d8e:	4b65      	ldr	r3, [pc, #404]	; (8002f24 <HAL_RCC_ClockConfig+0x1b8>)
 8002d90:	683a      	ldr	r2, [r7, #0]
 8002d92:	b2d2      	uxtb	r2, r2
 8002d94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d96:	4b63      	ldr	r3, [pc, #396]	; (8002f24 <HAL_RCC_ClockConfig+0x1b8>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0307 	and.w	r3, r3, #7
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d001      	beq.n	8002da8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e0b8      	b.n	8002f1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d020      	beq.n	8002df6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0304 	and.w	r3, r3, #4
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d005      	beq.n	8002dcc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dc0:	4b59      	ldr	r3, [pc, #356]	; (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	4a58      	ldr	r2, [pc, #352]	; (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002dca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0308 	and.w	r3, r3, #8
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d005      	beq.n	8002de4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002dd8:	4b53      	ldr	r3, [pc, #332]	; (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	4a52      	ldr	r2, [pc, #328]	; (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002dde:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002de2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002de4:	4b50      	ldr	r3, [pc, #320]	; (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	494d      	ldr	r1, [pc, #308]	; (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0301 	and.w	r3, r3, #1
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d044      	beq.n	8002e8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d107      	bne.n	8002e1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e0a:	4b47      	ldr	r3, [pc, #284]	; (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d119      	bne.n	8002e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e07f      	b.n	8002f1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d003      	beq.n	8002e2a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e26:	2b03      	cmp	r3, #3
 8002e28:	d107      	bne.n	8002e3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e2a:	4b3f      	ldr	r3, [pc, #252]	; (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d109      	bne.n	8002e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e06f      	b.n	8002f1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e3a:	4b3b      	ldr	r3, [pc, #236]	; (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d101      	bne.n	8002e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e067      	b.n	8002f1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e4a:	4b37      	ldr	r3, [pc, #220]	; (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f023 0203 	bic.w	r2, r3, #3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	4934      	ldr	r1, [pc, #208]	; (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e5c:	f7fe fe52 	bl	8001b04 <HAL_GetTick>
 8002e60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e62:	e00a      	b.n	8002e7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e64:	f7fe fe4e 	bl	8001b04 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e04f      	b.n	8002f1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e7a:	4b2b      	ldr	r3, [pc, #172]	; (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f003 020c 	and.w	r2, r3, #12
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d1eb      	bne.n	8002e64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e8c:	4b25      	ldr	r3, [pc, #148]	; (8002f24 <HAL_RCC_ClockConfig+0x1b8>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0307 	and.w	r3, r3, #7
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d20c      	bcs.n	8002eb4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e9a:	4b22      	ldr	r3, [pc, #136]	; (8002f24 <HAL_RCC_ClockConfig+0x1b8>)
 8002e9c:	683a      	ldr	r2, [r7, #0]
 8002e9e:	b2d2      	uxtb	r2, r2
 8002ea0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ea2:	4b20      	ldr	r3, [pc, #128]	; (8002f24 <HAL_RCC_ClockConfig+0x1b8>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0307 	and.w	r3, r3, #7
 8002eaa:	683a      	ldr	r2, [r7, #0]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d001      	beq.n	8002eb4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e032      	b.n	8002f1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0304 	and.w	r3, r3, #4
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d008      	beq.n	8002ed2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ec0:	4b19      	ldr	r3, [pc, #100]	; (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	4916      	ldr	r1, [pc, #88]	; (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0308 	and.w	r3, r3, #8
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d009      	beq.n	8002ef2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ede:	4b12      	ldr	r3, [pc, #72]	; (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	00db      	lsls	r3, r3, #3
 8002eec:	490e      	ldr	r1, [pc, #56]	; (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ef2:	f000 f821 	bl	8002f38 <HAL_RCC_GetSysClockFreq>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	4b0b      	ldr	r3, [pc, #44]	; (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	091b      	lsrs	r3, r3, #4
 8002efe:	f003 030f 	and.w	r3, r3, #15
 8002f02:	490a      	ldr	r1, [pc, #40]	; (8002f2c <HAL_RCC_ClockConfig+0x1c0>)
 8002f04:	5ccb      	ldrb	r3, [r1, r3]
 8002f06:	fa22 f303 	lsr.w	r3, r2, r3
 8002f0a:	4a09      	ldr	r2, [pc, #36]	; (8002f30 <HAL_RCC_ClockConfig+0x1c4>)
 8002f0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f0e:	4b09      	ldr	r3, [pc, #36]	; (8002f34 <HAL_RCC_ClockConfig+0x1c8>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7fe fdc6 	bl	8001aa4 <HAL_InitTick>

  return HAL_OK;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3710      	adds	r7, #16
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	40023c00 	.word	0x40023c00
 8002f28:	40023800 	.word	0x40023800
 8002f2c:	08007ed8 	.word	0x08007ed8
 8002f30:	2000000c 	.word	0x2000000c
 8002f34:	20000010 	.word	0x20000010

08002f38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f38:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002f3c:	b084      	sub	sp, #16
 8002f3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f40:	2300      	movs	r3, #0
 8002f42:	607b      	str	r3, [r7, #4]
 8002f44:	2300      	movs	r3, #0
 8002f46:	60fb      	str	r3, [r7, #12]
 8002f48:	2300      	movs	r3, #0
 8002f4a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f50:	4b67      	ldr	r3, [pc, #412]	; (80030f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f003 030c 	and.w	r3, r3, #12
 8002f58:	2b08      	cmp	r3, #8
 8002f5a:	d00d      	beq.n	8002f78 <HAL_RCC_GetSysClockFreq+0x40>
 8002f5c:	2b08      	cmp	r3, #8
 8002f5e:	f200 80bd 	bhi.w	80030dc <HAL_RCC_GetSysClockFreq+0x1a4>
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d002      	beq.n	8002f6c <HAL_RCC_GetSysClockFreq+0x34>
 8002f66:	2b04      	cmp	r3, #4
 8002f68:	d003      	beq.n	8002f72 <HAL_RCC_GetSysClockFreq+0x3a>
 8002f6a:	e0b7      	b.n	80030dc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f6c:	4b61      	ldr	r3, [pc, #388]	; (80030f4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002f6e:	60bb      	str	r3, [r7, #8]
       break;
 8002f70:	e0b7      	b.n	80030e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f72:	4b61      	ldr	r3, [pc, #388]	; (80030f8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002f74:	60bb      	str	r3, [r7, #8]
      break;
 8002f76:	e0b4      	b.n	80030e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f78:	4b5d      	ldr	r3, [pc, #372]	; (80030f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f80:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f82:	4b5b      	ldr	r3, [pc, #364]	; (80030f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d04d      	beq.n	800302a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f8e:	4b58      	ldr	r3, [pc, #352]	; (80030f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	099b      	lsrs	r3, r3, #6
 8002f94:	461a      	mov	r2, r3
 8002f96:	f04f 0300 	mov.w	r3, #0
 8002f9a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002f9e:	f04f 0100 	mov.w	r1, #0
 8002fa2:	ea02 0800 	and.w	r8, r2, r0
 8002fa6:	ea03 0901 	and.w	r9, r3, r1
 8002faa:	4640      	mov	r0, r8
 8002fac:	4649      	mov	r1, r9
 8002fae:	f04f 0200 	mov.w	r2, #0
 8002fb2:	f04f 0300 	mov.w	r3, #0
 8002fb6:	014b      	lsls	r3, r1, #5
 8002fb8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002fbc:	0142      	lsls	r2, r0, #5
 8002fbe:	4610      	mov	r0, r2
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	ebb0 0008 	subs.w	r0, r0, r8
 8002fc6:	eb61 0109 	sbc.w	r1, r1, r9
 8002fca:	f04f 0200 	mov.w	r2, #0
 8002fce:	f04f 0300 	mov.w	r3, #0
 8002fd2:	018b      	lsls	r3, r1, #6
 8002fd4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002fd8:	0182      	lsls	r2, r0, #6
 8002fda:	1a12      	subs	r2, r2, r0
 8002fdc:	eb63 0301 	sbc.w	r3, r3, r1
 8002fe0:	f04f 0000 	mov.w	r0, #0
 8002fe4:	f04f 0100 	mov.w	r1, #0
 8002fe8:	00d9      	lsls	r1, r3, #3
 8002fea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002fee:	00d0      	lsls	r0, r2, #3
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	460b      	mov	r3, r1
 8002ff4:	eb12 0208 	adds.w	r2, r2, r8
 8002ff8:	eb43 0309 	adc.w	r3, r3, r9
 8002ffc:	f04f 0000 	mov.w	r0, #0
 8003000:	f04f 0100 	mov.w	r1, #0
 8003004:	0259      	lsls	r1, r3, #9
 8003006:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800300a:	0250      	lsls	r0, r2, #9
 800300c:	4602      	mov	r2, r0
 800300e:	460b      	mov	r3, r1
 8003010:	4610      	mov	r0, r2
 8003012:	4619      	mov	r1, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	461a      	mov	r2, r3
 8003018:	f04f 0300 	mov.w	r3, #0
 800301c:	f7fd f8e0 	bl	80001e0 <__aeabi_uldivmod>
 8003020:	4602      	mov	r2, r0
 8003022:	460b      	mov	r3, r1
 8003024:	4613      	mov	r3, r2
 8003026:	60fb      	str	r3, [r7, #12]
 8003028:	e04a      	b.n	80030c0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800302a:	4b31      	ldr	r3, [pc, #196]	; (80030f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	099b      	lsrs	r3, r3, #6
 8003030:	461a      	mov	r2, r3
 8003032:	f04f 0300 	mov.w	r3, #0
 8003036:	f240 10ff 	movw	r0, #511	; 0x1ff
 800303a:	f04f 0100 	mov.w	r1, #0
 800303e:	ea02 0400 	and.w	r4, r2, r0
 8003042:	ea03 0501 	and.w	r5, r3, r1
 8003046:	4620      	mov	r0, r4
 8003048:	4629      	mov	r1, r5
 800304a:	f04f 0200 	mov.w	r2, #0
 800304e:	f04f 0300 	mov.w	r3, #0
 8003052:	014b      	lsls	r3, r1, #5
 8003054:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003058:	0142      	lsls	r2, r0, #5
 800305a:	4610      	mov	r0, r2
 800305c:	4619      	mov	r1, r3
 800305e:	1b00      	subs	r0, r0, r4
 8003060:	eb61 0105 	sbc.w	r1, r1, r5
 8003064:	f04f 0200 	mov.w	r2, #0
 8003068:	f04f 0300 	mov.w	r3, #0
 800306c:	018b      	lsls	r3, r1, #6
 800306e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003072:	0182      	lsls	r2, r0, #6
 8003074:	1a12      	subs	r2, r2, r0
 8003076:	eb63 0301 	sbc.w	r3, r3, r1
 800307a:	f04f 0000 	mov.w	r0, #0
 800307e:	f04f 0100 	mov.w	r1, #0
 8003082:	00d9      	lsls	r1, r3, #3
 8003084:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003088:	00d0      	lsls	r0, r2, #3
 800308a:	4602      	mov	r2, r0
 800308c:	460b      	mov	r3, r1
 800308e:	1912      	adds	r2, r2, r4
 8003090:	eb45 0303 	adc.w	r3, r5, r3
 8003094:	f04f 0000 	mov.w	r0, #0
 8003098:	f04f 0100 	mov.w	r1, #0
 800309c:	0299      	lsls	r1, r3, #10
 800309e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80030a2:	0290      	lsls	r0, r2, #10
 80030a4:	4602      	mov	r2, r0
 80030a6:	460b      	mov	r3, r1
 80030a8:	4610      	mov	r0, r2
 80030aa:	4619      	mov	r1, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	461a      	mov	r2, r3
 80030b0:	f04f 0300 	mov.w	r3, #0
 80030b4:	f7fd f894 	bl	80001e0 <__aeabi_uldivmod>
 80030b8:	4602      	mov	r2, r0
 80030ba:	460b      	mov	r3, r1
 80030bc:	4613      	mov	r3, r2
 80030be:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80030c0:	4b0b      	ldr	r3, [pc, #44]	; (80030f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	0c1b      	lsrs	r3, r3, #16
 80030c6:	f003 0303 	and.w	r3, r3, #3
 80030ca:	3301      	adds	r3, #1
 80030cc:	005b      	lsls	r3, r3, #1
 80030ce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80030d0:	68fa      	ldr	r2, [r7, #12]
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d8:	60bb      	str	r3, [r7, #8]
      break;
 80030da:	e002      	b.n	80030e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030dc:	4b05      	ldr	r3, [pc, #20]	; (80030f4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80030de:	60bb      	str	r3, [r7, #8]
      break;
 80030e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030e2:	68bb      	ldr	r3, [r7, #8]
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3710      	adds	r7, #16
 80030e8:	46bd      	mov	sp, r7
 80030ea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80030ee:	bf00      	nop
 80030f0:	40023800 	.word	0x40023800
 80030f4:	00f42400 	.word	0x00f42400
 80030f8:	007a1200 	.word	0x007a1200

080030fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003100:	4b03      	ldr	r3, [pc, #12]	; (8003110 <HAL_RCC_GetHCLKFreq+0x14>)
 8003102:	681b      	ldr	r3, [r3, #0]
}
 8003104:	4618      	mov	r0, r3
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	2000000c 	.word	0x2000000c

08003114 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003118:	f7ff fff0 	bl	80030fc <HAL_RCC_GetHCLKFreq>
 800311c:	4602      	mov	r2, r0
 800311e:	4b05      	ldr	r3, [pc, #20]	; (8003134 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	0a9b      	lsrs	r3, r3, #10
 8003124:	f003 0307 	and.w	r3, r3, #7
 8003128:	4903      	ldr	r1, [pc, #12]	; (8003138 <HAL_RCC_GetPCLK1Freq+0x24>)
 800312a:	5ccb      	ldrb	r3, [r1, r3]
 800312c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003130:	4618      	mov	r0, r3
 8003132:	bd80      	pop	{r7, pc}
 8003134:	40023800 	.word	0x40023800
 8003138:	08007ee8 	.word	0x08007ee8

0800313c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003140:	f7ff ffdc 	bl	80030fc <HAL_RCC_GetHCLKFreq>
 8003144:	4602      	mov	r2, r0
 8003146:	4b05      	ldr	r3, [pc, #20]	; (800315c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	0b5b      	lsrs	r3, r3, #13
 800314c:	f003 0307 	and.w	r3, r3, #7
 8003150:	4903      	ldr	r1, [pc, #12]	; (8003160 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003152:	5ccb      	ldrb	r3, [r1, r3]
 8003154:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003158:	4618      	mov	r0, r3
 800315a:	bd80      	pop	{r7, pc}
 800315c:	40023800 	.word	0x40023800
 8003160:	08007ee8 	.word	0x08007ee8

08003164 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d101      	bne.n	8003176 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e01c      	b.n	80031b0 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	795b      	ldrb	r3, [r3, #5]
 800317a:	b2db      	uxtb	r3, r3
 800317c:	2b00      	cmp	r3, #0
 800317e:	d105      	bne.n	800318c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f7fe fab4 	bl	80016f4 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2202      	movs	r2, #2
 8003190:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f042 0204 	orr.w	r2, r2, #4
 80031a0:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2201      	movs	r2, #1
 80031a6:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3708      	adds	r7, #8
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e07b      	b.n	80032c2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d108      	bne.n	80031e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031da:	d009      	beq.n	80031f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	61da      	str	r2, [r3, #28]
 80031e2:	e005      	b.n	80031f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d106      	bne.n	8003210 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7fe fa94 	bl	8001738 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2202      	movs	r2, #2
 8003214:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003226:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003238:	431a      	orrs	r2, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003242:	431a      	orrs	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	691b      	ldr	r3, [r3, #16]
 8003248:	f003 0302 	and.w	r3, r3, #2
 800324c:	431a      	orrs	r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	431a      	orrs	r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003260:	431a      	orrs	r2, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	69db      	ldr	r3, [r3, #28]
 8003266:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800326a:	431a      	orrs	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a1b      	ldr	r3, [r3, #32]
 8003270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003274:	ea42 0103 	orr.w	r1, r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800327c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	430a      	orrs	r2, r1
 8003286:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	0c1b      	lsrs	r3, r3, #16
 800328e:	f003 0104 	and.w	r1, r3, #4
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003296:	f003 0210 	and.w	r2, r3, #16
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	430a      	orrs	r2, r1
 80032a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	69da      	ldr	r2, [r3, #28]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}

080032ca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b088      	sub	sp, #32
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	60f8      	str	r0, [r7, #12]
 80032d2:	60b9      	str	r1, [r7, #8]
 80032d4:	603b      	str	r3, [r7, #0]
 80032d6:	4613      	mov	r3, r2
 80032d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80032da:	2300      	movs	r3, #0
 80032dc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d101      	bne.n	80032ec <HAL_SPI_Transmit+0x22>
 80032e8:	2302      	movs	r3, #2
 80032ea:	e126      	b.n	800353a <HAL_SPI_Transmit+0x270>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032f4:	f7fe fc06 	bl	8001b04 <HAL_GetTick>
 80032f8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80032fa:	88fb      	ldrh	r3, [r7, #6]
 80032fc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b01      	cmp	r3, #1
 8003308:	d002      	beq.n	8003310 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800330a:	2302      	movs	r3, #2
 800330c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800330e:	e10b      	b.n	8003528 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d002      	beq.n	800331c <HAL_SPI_Transmit+0x52>
 8003316:	88fb      	ldrh	r3, [r7, #6]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d102      	bne.n	8003322 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003320:	e102      	b.n	8003528 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2203      	movs	r2, #3
 8003326:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2200      	movs	r2, #0
 800332e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	68ba      	ldr	r2, [r7, #8]
 8003334:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	88fa      	ldrh	r2, [r7, #6]
 800333a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	88fa      	ldrh	r2, [r7, #6]
 8003340:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003368:	d10f      	bne.n	800338a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003378:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003388:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003394:	2b40      	cmp	r3, #64	; 0x40
 8003396:	d007      	beq.n	80033a8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033b0:	d14b      	bne.n	800344a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d002      	beq.n	80033c0 <HAL_SPI_Transmit+0xf6>
 80033ba:	8afb      	ldrh	r3, [r7, #22]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d13e      	bne.n	800343e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c4:	881a      	ldrh	r2, [r3, #0]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d0:	1c9a      	adds	r2, r3, #2
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033da:	b29b      	uxth	r3, r3
 80033dc:	3b01      	subs	r3, #1
 80033de:	b29a      	uxth	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80033e4:	e02b      	b.n	800343e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d112      	bne.n	800341a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f8:	881a      	ldrh	r2, [r3, #0]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003404:	1c9a      	adds	r2, r3, #2
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800340e:	b29b      	uxth	r3, r3
 8003410:	3b01      	subs	r3, #1
 8003412:	b29a      	uxth	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	86da      	strh	r2, [r3, #54]	; 0x36
 8003418:	e011      	b.n	800343e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800341a:	f7fe fb73 	bl	8001b04 <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	683a      	ldr	r2, [r7, #0]
 8003426:	429a      	cmp	r2, r3
 8003428:	d803      	bhi.n	8003432 <HAL_SPI_Transmit+0x168>
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003430:	d102      	bne.n	8003438 <HAL_SPI_Transmit+0x16e>
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d102      	bne.n	800343e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800343c:	e074      	b.n	8003528 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003442:	b29b      	uxth	r3, r3
 8003444:	2b00      	cmp	r3, #0
 8003446:	d1ce      	bne.n	80033e6 <HAL_SPI_Transmit+0x11c>
 8003448:	e04c      	b.n	80034e4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d002      	beq.n	8003458 <HAL_SPI_Transmit+0x18e>
 8003452:	8afb      	ldrh	r3, [r7, #22]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d140      	bne.n	80034da <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	330c      	adds	r3, #12
 8003462:	7812      	ldrb	r2, [r2, #0]
 8003464:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346a:	1c5a      	adds	r2, r3, #1
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003474:	b29b      	uxth	r3, r3
 8003476:	3b01      	subs	r3, #1
 8003478:	b29a      	uxth	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800347e:	e02c      	b.n	80034da <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	2b02      	cmp	r3, #2
 800348c:	d113      	bne.n	80034b6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	330c      	adds	r3, #12
 8003498:	7812      	ldrb	r2, [r2, #0]
 800349a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a0:	1c5a      	adds	r2, r3, #1
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	3b01      	subs	r3, #1
 80034ae:	b29a      	uxth	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	86da      	strh	r2, [r3, #54]	; 0x36
 80034b4:	e011      	b.n	80034da <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034b6:	f7fe fb25 	bl	8001b04 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d803      	bhi.n	80034ce <HAL_SPI_Transmit+0x204>
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034cc:	d102      	bne.n	80034d4 <HAL_SPI_Transmit+0x20a>
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d102      	bne.n	80034da <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80034d8:	e026      	b.n	8003528 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034de:	b29b      	uxth	r3, r3
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d1cd      	bne.n	8003480 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	6839      	ldr	r1, [r7, #0]
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	f000 fcb5 	bl	8003e58 <SPI_EndRxTxTransaction>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d002      	beq.n	80034fa <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2220      	movs	r2, #32
 80034f8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10a      	bne.n	8003518 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003502:	2300      	movs	r3, #0
 8003504:	613b      	str	r3, [r7, #16]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	613b      	str	r3, [r7, #16]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	613b      	str	r3, [r7, #16]
 8003516:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800351c:	2b00      	cmp	r3, #0
 800351e:	d002      	beq.n	8003526 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	77fb      	strb	r3, [r7, #31]
 8003524:	e000      	b.n	8003528 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003526:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003538:	7ffb      	ldrb	r3, [r7, #31]
}
 800353a:	4618      	mov	r0, r3
 800353c:	3720      	adds	r7, #32
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003542:	b580      	push	{r7, lr}
 8003544:	b08c      	sub	sp, #48	; 0x30
 8003546:	af00      	add	r7, sp, #0
 8003548:	60f8      	str	r0, [r7, #12]
 800354a:	60b9      	str	r1, [r7, #8]
 800354c:	607a      	str	r2, [r7, #4]
 800354e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003550:	2301      	movs	r3, #1
 8003552:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003554:	2300      	movs	r3, #0
 8003556:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003560:	2b01      	cmp	r3, #1
 8003562:	d101      	bne.n	8003568 <HAL_SPI_TransmitReceive+0x26>
 8003564:	2302      	movs	r3, #2
 8003566:	e18a      	b.n	800387e <HAL_SPI_TransmitReceive+0x33c>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003570:	f7fe fac8 	bl	8001b04 <HAL_GetTick>
 8003574:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800357c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003586:	887b      	ldrh	r3, [r7, #2]
 8003588:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800358a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800358e:	2b01      	cmp	r3, #1
 8003590:	d00f      	beq.n	80035b2 <HAL_SPI_TransmitReceive+0x70>
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003598:	d107      	bne.n	80035aa <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d103      	bne.n	80035aa <HAL_SPI_TransmitReceive+0x68>
 80035a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80035a6:	2b04      	cmp	r3, #4
 80035a8:	d003      	beq.n	80035b2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80035aa:	2302      	movs	r3, #2
 80035ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80035b0:	e15b      	b.n	800386a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d005      	beq.n	80035c4 <HAL_SPI_TransmitReceive+0x82>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d002      	beq.n	80035c4 <HAL_SPI_TransmitReceive+0x82>
 80035be:	887b      	ldrh	r3, [r7, #2]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d103      	bne.n	80035cc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80035ca:	e14e      	b.n	800386a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	2b04      	cmp	r3, #4
 80035d6:	d003      	beq.n	80035e0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2205      	movs	r2, #5
 80035dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2200      	movs	r2, #0
 80035e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	887a      	ldrh	r2, [r7, #2]
 80035f0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	887a      	ldrh	r2, [r7, #2]
 80035f6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	68ba      	ldr	r2, [r7, #8]
 80035fc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	887a      	ldrh	r2, [r7, #2]
 8003602:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	887a      	ldrh	r2, [r7, #2]
 8003608:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003620:	2b40      	cmp	r3, #64	; 0x40
 8003622:	d007      	beq.n	8003634 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003632:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800363c:	d178      	bne.n	8003730 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d002      	beq.n	800364c <HAL_SPI_TransmitReceive+0x10a>
 8003646:	8b7b      	ldrh	r3, [r7, #26]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d166      	bne.n	800371a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003650:	881a      	ldrh	r2, [r3, #0]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365c:	1c9a      	adds	r2, r3, #2
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003666:	b29b      	uxth	r3, r3
 8003668:	3b01      	subs	r3, #1
 800366a:	b29a      	uxth	r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003670:	e053      	b.n	800371a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f003 0302 	and.w	r3, r3, #2
 800367c:	2b02      	cmp	r3, #2
 800367e:	d11b      	bne.n	80036b8 <HAL_SPI_TransmitReceive+0x176>
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003684:	b29b      	uxth	r3, r3
 8003686:	2b00      	cmp	r3, #0
 8003688:	d016      	beq.n	80036b8 <HAL_SPI_TransmitReceive+0x176>
 800368a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800368c:	2b01      	cmp	r3, #1
 800368e:	d113      	bne.n	80036b8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003694:	881a      	ldrh	r2, [r3, #0]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a0:	1c9a      	adds	r2, r3, #2
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	3b01      	subs	r3, #1
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80036b4:	2300      	movs	r3, #0
 80036b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d119      	bne.n	80036fa <HAL_SPI_TransmitReceive+0x1b8>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d014      	beq.n	80036fa <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	68da      	ldr	r2, [r3, #12]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036da:	b292      	uxth	r2, r2
 80036dc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e2:	1c9a      	adds	r2, r3, #2
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	3b01      	subs	r3, #1
 80036f0:	b29a      	uxth	r2, r3
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80036f6:	2301      	movs	r3, #1
 80036f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80036fa:	f7fe fa03 	bl	8001b04 <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003706:	429a      	cmp	r2, r3
 8003708:	d807      	bhi.n	800371a <HAL_SPI_TransmitReceive+0x1d8>
 800370a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800370c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003710:	d003      	beq.n	800371a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003718:	e0a7      	b.n	800386a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800371e:	b29b      	uxth	r3, r3
 8003720:	2b00      	cmp	r3, #0
 8003722:	d1a6      	bne.n	8003672 <HAL_SPI_TransmitReceive+0x130>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003728:	b29b      	uxth	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1a1      	bne.n	8003672 <HAL_SPI_TransmitReceive+0x130>
 800372e:	e07c      	b.n	800382a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d002      	beq.n	800373e <HAL_SPI_TransmitReceive+0x1fc>
 8003738:	8b7b      	ldrh	r3, [r7, #26]
 800373a:	2b01      	cmp	r3, #1
 800373c:	d16b      	bne.n	8003816 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	330c      	adds	r3, #12
 8003748:	7812      	ldrb	r2, [r2, #0]
 800374a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003750:	1c5a      	adds	r2, r3, #1
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800375a:	b29b      	uxth	r3, r3
 800375c:	3b01      	subs	r3, #1
 800375e:	b29a      	uxth	r2, r3
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003764:	e057      	b.n	8003816 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	f003 0302 	and.w	r3, r3, #2
 8003770:	2b02      	cmp	r3, #2
 8003772:	d11c      	bne.n	80037ae <HAL_SPI_TransmitReceive+0x26c>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003778:	b29b      	uxth	r3, r3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d017      	beq.n	80037ae <HAL_SPI_TransmitReceive+0x26c>
 800377e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003780:	2b01      	cmp	r3, #1
 8003782:	d114      	bne.n	80037ae <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	330c      	adds	r3, #12
 800378e:	7812      	ldrb	r2, [r2, #0]
 8003790:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003796:	1c5a      	adds	r2, r3, #1
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	3b01      	subs	r3, #1
 80037a4:	b29a      	uxth	r2, r3
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80037aa:	2300      	movs	r3, #0
 80037ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f003 0301 	and.w	r3, r3, #1
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d119      	bne.n	80037f0 <HAL_SPI_TransmitReceive+0x2ae>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d014      	beq.n	80037f0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68da      	ldr	r2, [r3, #12]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d0:	b2d2      	uxtb	r2, r2
 80037d2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d8:	1c5a      	adds	r2, r3, #1
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	3b01      	subs	r3, #1
 80037e6:	b29a      	uxth	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80037ec:	2301      	movs	r3, #1
 80037ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80037f0:	f7fe f988 	bl	8001b04 <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d803      	bhi.n	8003808 <HAL_SPI_TransmitReceive+0x2c6>
 8003800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003806:	d102      	bne.n	800380e <HAL_SPI_TransmitReceive+0x2cc>
 8003808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800380a:	2b00      	cmp	r3, #0
 800380c:	d103      	bne.n	8003816 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003814:	e029      	b.n	800386a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800381a:	b29b      	uxth	r3, r3
 800381c:	2b00      	cmp	r3, #0
 800381e:	d1a2      	bne.n	8003766 <HAL_SPI_TransmitReceive+0x224>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003824:	b29b      	uxth	r3, r3
 8003826:	2b00      	cmp	r3, #0
 8003828:	d19d      	bne.n	8003766 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800382a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800382c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	f000 fb12 	bl	8003e58 <SPI_EndRxTxTransaction>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d006      	beq.n	8003848 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2220      	movs	r2, #32
 8003844:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003846:	e010      	b.n	800386a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d10b      	bne.n	8003868 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003850:	2300      	movs	r3, #0
 8003852:	617b      	str	r3, [r7, #20]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	617b      	str	r3, [r7, #20]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	617b      	str	r3, [r7, #20]
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	e000      	b.n	800386a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003868:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800387a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800387e:	4618      	mov	r0, r3
 8003880:	3730      	adds	r7, #48	; 0x30
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
	...

08003888 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b086      	sub	sp, #24
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	4613      	mov	r3, r2
 8003894:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003896:	2300      	movs	r3, #0
 8003898:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d101      	bne.n	80038a8 <HAL_SPI_Transmit_DMA+0x20>
 80038a4:	2302      	movs	r3, #2
 80038a6:	e09b      	b.n	80039e0 <HAL_SPI_Transmit_DMA+0x158>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d002      	beq.n	80038c2 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80038bc:	2302      	movs	r3, #2
 80038be:	75fb      	strb	r3, [r7, #23]
    goto error;
 80038c0:	e089      	b.n	80039d6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d002      	beq.n	80038ce <HAL_SPI_Transmit_DMA+0x46>
 80038c8:	88fb      	ldrh	r3, [r7, #6]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d102      	bne.n	80038d4 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80038d2:	e080      	b.n	80039d6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2203      	movs	r2, #3
 80038d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2200      	movs	r2, #0
 80038e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	68ba      	ldr	r2, [r7, #8]
 80038e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	88fa      	ldrh	r2, [r7, #6]
 80038ec:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	88fa      	ldrh	r2, [r7, #6]
 80038f2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2200      	movs	r2, #0
 80038f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800391a:	d10f      	bne.n	800393c <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800392a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800393a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003940:	4a29      	ldr	r2, [pc, #164]	; (80039e8 <HAL_SPI_Transmit_DMA+0x160>)
 8003942:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003948:	4a28      	ldr	r2, [pc, #160]	; (80039ec <HAL_SPI_Transmit_DMA+0x164>)
 800394a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003950:	4a27      	ldr	r2, [pc, #156]	; (80039f0 <HAL_SPI_Transmit_DMA+0x168>)
 8003952:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003958:	2200      	movs	r2, #0
 800395a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003964:	4619      	mov	r1, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	330c      	adds	r3, #12
 800396c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003972:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003974:	f7fe fa92 	bl	8001e9c <HAL_DMA_Start_IT>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00c      	beq.n	8003998 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003982:	f043 0210 	orr.w	r2, r3, #16
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2201      	movs	r2, #1
 8003992:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8003996:	e01e      	b.n	80039d6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a2:	2b40      	cmp	r3, #64	; 0x40
 80039a4:	d007      	beq.n	80039b6 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039b4:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	685a      	ldr	r2, [r3, #4]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f042 0220 	orr.w	r2, r2, #32
 80039c4:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	685a      	ldr	r2, [r3, #4]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f042 0202 	orr.w	r2, r2, #2
 80039d4:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80039de:	7dfb      	ldrb	r3, [r7, #23]
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3718      	adds	r7, #24
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	08003cc5 	.word	0x08003cc5
 80039ec:	08003c1d 	.word	0x08003c1d
 80039f0:	08003ce1 	.word	0x08003ce1

080039f4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b088      	sub	sp, #32
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	099b      	lsrs	r3, r3, #6
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d10f      	bne.n	8003a38 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00a      	beq.n	8003a38 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	099b      	lsrs	r3, r3, #6
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d004      	beq.n	8003a38 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	4798      	blx	r3
    return;
 8003a36:	e0d7      	b.n	8003be8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	085b      	lsrs	r3, r3, #1
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d00a      	beq.n	8003a5a <HAL_SPI_IRQHandler+0x66>
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	09db      	lsrs	r3, r3, #7
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d004      	beq.n	8003a5a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	4798      	blx	r3
    return;
 8003a58:	e0c6      	b.n	8003be8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	095b      	lsrs	r3, r3, #5
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d10c      	bne.n	8003a80 <HAL_SPI_IRQHandler+0x8c>
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	099b      	lsrs	r3, r3, #6
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d106      	bne.n	8003a80 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	0a1b      	lsrs	r3, r3, #8
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	f000 80b4 	beq.w	8003be8 <HAL_SPI_IRQHandler+0x1f4>
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	095b      	lsrs	r3, r3, #5
 8003a84:	f003 0301 	and.w	r3, r3, #1
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	f000 80ad 	beq.w	8003be8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	099b      	lsrs	r3, r3, #6
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d023      	beq.n	8003ae2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b03      	cmp	r3, #3
 8003aa4:	d011      	beq.n	8003aca <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aaa:	f043 0204 	orr.w	r2, r3, #4
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	617b      	str	r3, [r7, #20]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	617b      	str	r3, [r7, #20]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	617b      	str	r3, [r7, #20]
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	e00b      	b.n	8003ae2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003aca:	2300      	movs	r3, #0
 8003acc:	613b      	str	r3, [r7, #16]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	613b      	str	r3, [r7, #16]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	613b      	str	r3, [r7, #16]
 8003ade:	693b      	ldr	r3, [r7, #16]
        return;
 8003ae0:	e082      	b.n	8003be8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	095b      	lsrs	r3, r3, #5
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d014      	beq.n	8003b18 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003af2:	f043 0201 	orr.w	r2, r3, #1
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003afa:	2300      	movs	r3, #0
 8003afc:	60fb      	str	r3, [r7, #12]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	60fb      	str	r3, [r7, #12]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b14:	601a      	str	r2, [r3, #0]
 8003b16:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	0a1b      	lsrs	r3, r3, #8
 8003b1c:	f003 0301 	and.w	r3, r3, #1
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d00c      	beq.n	8003b3e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b28:	f043 0208 	orr.w	r2, r3, #8
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003b30:	2300      	movs	r3, #0
 8003b32:	60bb      	str	r3, [r7, #8]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	60bb      	str	r3, [r7, #8]
 8003b3c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d04f      	beq.n	8003be6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	685a      	ldr	r2, [r3, #4]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b54:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2201      	movs	r2, #1
 8003b5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	f003 0302 	and.w	r3, r3, #2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d104      	bne.n	8003b72 <HAL_SPI_IRQHandler+0x17e>
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d034      	beq.n	8003bdc <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	685a      	ldr	r2, [r3, #4]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f022 0203 	bic.w	r2, r2, #3
 8003b80:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d011      	beq.n	8003bae <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b8e:	4a18      	ldr	r2, [pc, #96]	; (8003bf0 <HAL_SPI_IRQHandler+0x1fc>)
 8003b90:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7fe f9d8 	bl	8001f4c <HAL_DMA_Abort_IT>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d005      	beq.n	8003bae <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ba6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d016      	beq.n	8003be4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bba:	4a0d      	ldr	r2, [pc, #52]	; (8003bf0 <HAL_SPI_IRQHandler+0x1fc>)
 8003bbc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f7fe f9c2 	bl	8001f4c <HAL_DMA_Abort_IT>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d00a      	beq.n	8003be4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bd2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003bda:	e003      	b.n	8003be4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f000 f813 	bl	8003c08 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003be2:	e000      	b.n	8003be6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003be4:	bf00      	nop
    return;
 8003be6:	bf00      	nop
  }
}
 8003be8:	3720      	adds	r7, #32
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	08003d21 	.word	0x08003d21

08003bf4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8003bfc:	bf00      	nop
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003c10:	bf00      	nop
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b086      	sub	sp, #24
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c28:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c2a:	f7fd ff6b 	bl	8001b04 <HAL_GetTick>
 8003c2e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c3e:	d03b      	beq.n	8003cb8 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	685a      	ldr	r2, [r3, #4]
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f022 0220 	bic.w	r2, r2, #32
 8003c4e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	685a      	ldr	r2, [r3, #4]
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f022 0202 	bic.w	r2, r2, #2
 8003c5e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003c60:	693a      	ldr	r2, [r7, #16]
 8003c62:	2164      	movs	r1, #100	; 0x64
 8003c64:	6978      	ldr	r0, [r7, #20]
 8003c66:	f000 f8f7 	bl	8003e58 <SPI_EndRxTxTransaction>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d005      	beq.n	8003c7c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c74:	f043 0220 	orr.w	r2, r3, #32
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d10a      	bne.n	8003c9a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c84:	2300      	movs	r3, #0
 8003c86:	60fb      	str	r3, [r7, #12]
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	60fb      	str	r3, [r7, #12]
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	60fb      	str	r3, [r7, #12]
 8003c98:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d003      	beq.n	8003cb8 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003cb0:	6978      	ldr	r0, [r7, #20]
 8003cb2:	f7ff ffa9 	bl	8003c08 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003cb6:	e002      	b.n	8003cbe <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8003cb8:	6978      	ldr	r0, [r7, #20]
 8003cba:	f7fc fccb 	bl	8000654 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003cbe:	3718      	adds	r7, #24
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd0:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003cd2:	68f8      	ldr	r0, [r7, #12]
 8003cd4:	f7ff ff8e 	bl	8003bf4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003cd8:	bf00      	nop
 8003cda:	3710      	adds	r7, #16
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cec:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	685a      	ldr	r2, [r3, #4]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f022 0203 	bic.w	r2, r2, #3
 8003cfc:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d02:	f043 0210 	orr.w	r2, r3, #16
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003d12:	68f8      	ldr	r0, [r7, #12]
 8003d14:	f7ff ff78 	bl	8003c08 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003d18:	bf00      	nop
 8003d1a:	3710      	adds	r7, #16
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d2c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2200      	movs	r2, #0
 8003d32:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003d3a:	68f8      	ldr	r0, [r7, #12]
 8003d3c:	f7ff ff64 	bl	8003c08 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003d40:	bf00      	nop
 8003d42:	3710      	adds	r7, #16
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b088      	sub	sp, #32
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	603b      	str	r3, [r7, #0]
 8003d54:	4613      	mov	r3, r2
 8003d56:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d58:	f7fd fed4 	bl	8001b04 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d60:	1a9b      	subs	r3, r3, r2
 8003d62:	683a      	ldr	r2, [r7, #0]
 8003d64:	4413      	add	r3, r2
 8003d66:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d68:	f7fd fecc 	bl	8001b04 <HAL_GetTick>
 8003d6c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d6e:	4b39      	ldr	r3, [pc, #228]	; (8003e54 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	015b      	lsls	r3, r3, #5
 8003d74:	0d1b      	lsrs	r3, r3, #20
 8003d76:	69fa      	ldr	r2, [r7, #28]
 8003d78:	fb02 f303 	mul.w	r3, r2, r3
 8003d7c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d7e:	e054      	b.n	8003e2a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d86:	d050      	beq.n	8003e2a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d88:	f7fd febc 	bl	8001b04 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	69fa      	ldr	r2, [r7, #28]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d902      	bls.n	8003d9e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d13d      	bne.n	8003e1a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	685a      	ldr	r2, [r3, #4]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003dac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003db6:	d111      	bne.n	8003ddc <SPI_WaitFlagStateUntilTimeout+0x94>
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dc0:	d004      	beq.n	8003dcc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dca:	d107      	bne.n	8003ddc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dda:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003de4:	d10f      	bne.n	8003e06 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003df4:	601a      	str	r2, [r3, #0]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e04:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e017      	b.n	8003e4a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d101      	bne.n	8003e24 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003e20:	2300      	movs	r3, #0
 8003e22:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	3b01      	subs	r3, #1
 8003e28:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	689a      	ldr	r2, [r3, #8]
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	4013      	ands	r3, r2
 8003e34:	68ba      	ldr	r2, [r7, #8]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	bf0c      	ite	eq
 8003e3a:	2301      	moveq	r3, #1
 8003e3c:	2300      	movne	r3, #0
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	461a      	mov	r2, r3
 8003e42:	79fb      	ldrb	r3, [r7, #7]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d19b      	bne.n	8003d80 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3720      	adds	r7, #32
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	2000000c 	.word	0x2000000c

08003e58 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b088      	sub	sp, #32
 8003e5c:	af02      	add	r7, sp, #8
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003e64:	4b1b      	ldr	r3, [pc, #108]	; (8003ed4 <SPI_EndRxTxTransaction+0x7c>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a1b      	ldr	r2, [pc, #108]	; (8003ed8 <SPI_EndRxTxTransaction+0x80>)
 8003e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6e:	0d5b      	lsrs	r3, r3, #21
 8003e70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e74:	fb02 f303 	mul.w	r3, r2, r3
 8003e78:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e82:	d112      	bne.n	8003eaa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	9300      	str	r3, [sp, #0]
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	2180      	movs	r1, #128	; 0x80
 8003e8e:	68f8      	ldr	r0, [r7, #12]
 8003e90:	f7ff ff5a 	bl	8003d48 <SPI_WaitFlagStateUntilTimeout>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d016      	beq.n	8003ec8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e9e:	f043 0220 	orr.w	r2, r3, #32
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e00f      	b.n	8003eca <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00a      	beq.n	8003ec6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ec0:	2b80      	cmp	r3, #128	; 0x80
 8003ec2:	d0f2      	beq.n	8003eaa <SPI_EndRxTxTransaction+0x52>
 8003ec4:	e000      	b.n	8003ec8 <SPI_EndRxTxTransaction+0x70>
        break;
 8003ec6:	bf00      	nop
  }

  return HAL_OK;
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3718      	adds	r7, #24
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	2000000c 	.word	0x2000000c
 8003ed8:	165e9f81 	.word	0x165e9f81

08003edc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d101      	bne.n	8003eee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e03f      	b.n	8003f6e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d106      	bne.n	8003f08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f7fd fc9a 	bl	800183c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2224      	movs	r2, #36	; 0x24
 8003f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68da      	ldr	r2, [r3, #12]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f000 f9cb 	bl	80042bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	691a      	ldr	r2, [r3, #16]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	695a      	ldr	r2, [r3, #20]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68da      	ldr	r2, [r3, #12]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2220      	movs	r2, #32
 8003f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2220      	movs	r2, #32
 8003f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3708      	adds	r7, #8
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}

08003f76 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f76:	b580      	push	{r7, lr}
 8003f78:	b08a      	sub	sp, #40	; 0x28
 8003f7a:	af02      	add	r7, sp, #8
 8003f7c:	60f8      	str	r0, [r7, #12]
 8003f7e:	60b9      	str	r1, [r7, #8]
 8003f80:	603b      	str	r3, [r7, #0]
 8003f82:	4613      	mov	r3, r2
 8003f84:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f86:	2300      	movs	r3, #0
 8003f88:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	2b20      	cmp	r3, #32
 8003f94:	d17c      	bne.n	8004090 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d002      	beq.n	8003fa2 <HAL_UART_Transmit+0x2c>
 8003f9c:	88fb      	ldrh	r3, [r7, #6]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d101      	bne.n	8003fa6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e075      	b.n	8004092 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d101      	bne.n	8003fb4 <HAL_UART_Transmit+0x3e>
 8003fb0:	2302      	movs	r3, #2
 8003fb2:	e06e      	b.n	8004092 <HAL_UART_Transmit+0x11c>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2221      	movs	r2, #33	; 0x21
 8003fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fca:	f7fd fd9b 	bl	8001b04 <HAL_GetTick>
 8003fce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	88fa      	ldrh	r2, [r7, #6]
 8003fd4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	88fa      	ldrh	r2, [r7, #6]
 8003fda:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fe4:	d108      	bne.n	8003ff8 <HAL_UART_Transmit+0x82>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d104      	bne.n	8003ff8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	61bb      	str	r3, [r7, #24]
 8003ff6:	e003      	b.n	8004000 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004008:	e02a      	b.n	8004060 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	9300      	str	r3, [sp, #0]
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	2200      	movs	r2, #0
 8004012:	2180      	movs	r1, #128	; 0x80
 8004014:	68f8      	ldr	r0, [r7, #12]
 8004016:	f000 f8e2 	bl	80041de <UART_WaitOnFlagUntilTimeout>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d001      	beq.n	8004024 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004020:	2303      	movs	r3, #3
 8004022:	e036      	b.n	8004092 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d10b      	bne.n	8004042 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	881b      	ldrh	r3, [r3, #0]
 800402e:	461a      	mov	r2, r3
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004038:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	3302      	adds	r3, #2
 800403e:	61bb      	str	r3, [r7, #24]
 8004040:	e007      	b.n	8004052 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	781a      	ldrb	r2, [r3, #0]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	3301      	adds	r3, #1
 8004050:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004056:	b29b      	uxth	r3, r3
 8004058:	3b01      	subs	r3, #1
 800405a:	b29a      	uxth	r2, r3
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004064:	b29b      	uxth	r3, r3
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1cf      	bne.n	800400a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	9300      	str	r3, [sp, #0]
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	2200      	movs	r2, #0
 8004072:	2140      	movs	r1, #64	; 0x40
 8004074:	68f8      	ldr	r0, [r7, #12]
 8004076:	f000 f8b2 	bl	80041de <UART_WaitOnFlagUntilTimeout>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d001      	beq.n	8004084 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e006      	b.n	8004092 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2220      	movs	r2, #32
 8004088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800408c:	2300      	movs	r3, #0
 800408e:	e000      	b.n	8004092 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004090:	2302      	movs	r3, #2
  }
}
 8004092:	4618      	mov	r0, r3
 8004094:	3720      	adds	r7, #32
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}

0800409a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800409a:	b580      	push	{r7, lr}
 800409c:	b08a      	sub	sp, #40	; 0x28
 800409e:	af02      	add	r7, sp, #8
 80040a0:	60f8      	str	r0, [r7, #12]
 80040a2:	60b9      	str	r1, [r7, #8]
 80040a4:	603b      	str	r3, [r7, #0]
 80040a6:	4613      	mov	r3, r2
 80040a8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80040aa:	2300      	movs	r3, #0
 80040ac:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	2b20      	cmp	r3, #32
 80040b8:	f040 808c 	bne.w	80041d4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d002      	beq.n	80040c8 <HAL_UART_Receive+0x2e>
 80040c2:	88fb      	ldrh	r3, [r7, #6]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d101      	bne.n	80040cc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e084      	b.n	80041d6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d101      	bne.n	80040da <HAL_UART_Receive+0x40>
 80040d6:	2302      	movs	r3, #2
 80040d8:	e07d      	b.n	80041d6 <HAL_UART_Receive+0x13c>
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2201      	movs	r2, #1
 80040de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2200      	movs	r2, #0
 80040e6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2222      	movs	r2, #34	; 0x22
 80040ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2200      	movs	r2, #0
 80040f4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040f6:	f7fd fd05 	bl	8001b04 <HAL_GetTick>
 80040fa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	88fa      	ldrh	r2, [r7, #6]
 8004100:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	88fa      	ldrh	r2, [r7, #6]
 8004106:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004110:	d108      	bne.n	8004124 <HAL_UART_Receive+0x8a>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d104      	bne.n	8004124 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800411a:	2300      	movs	r3, #0
 800411c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	61bb      	str	r3, [r7, #24]
 8004122:	e003      	b.n	800412c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004128:	2300      	movs	r3, #0
 800412a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2200      	movs	r2, #0
 8004130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004134:	e043      	b.n	80041be <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	9300      	str	r3, [sp, #0]
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	2200      	movs	r2, #0
 800413e:	2120      	movs	r1, #32
 8004140:	68f8      	ldr	r0, [r7, #12]
 8004142:	f000 f84c 	bl	80041de <UART_WaitOnFlagUntilTimeout>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d001      	beq.n	8004150 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e042      	b.n	80041d6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d10c      	bne.n	8004170 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	b29b      	uxth	r3, r3
 800415e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004162:	b29a      	uxth	r2, r3
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	3302      	adds	r3, #2
 800416c:	61bb      	str	r3, [r7, #24]
 800416e:	e01f      	b.n	80041b0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004178:	d007      	beq.n	800418a <HAL_UART_Receive+0xf0>
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d10a      	bne.n	8004198 <HAL_UART_Receive+0xfe>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d106      	bne.n	8004198 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	b2da      	uxtb	r2, r3
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	701a      	strb	r2, [r3, #0]
 8004196:	e008      	b.n	80041aa <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041a4:	b2da      	uxtb	r2, r3
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	3301      	adds	r3, #1
 80041ae:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	3b01      	subs	r3, #1
 80041b8:	b29a      	uxth	r2, r3
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d1b6      	bne.n	8004136 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2220      	movs	r2, #32
 80041cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80041d0:	2300      	movs	r3, #0
 80041d2:	e000      	b.n	80041d6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80041d4:	2302      	movs	r3, #2
  }
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3720      	adds	r7, #32
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}

080041de <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80041de:	b580      	push	{r7, lr}
 80041e0:	b090      	sub	sp, #64	; 0x40
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	60f8      	str	r0, [r7, #12]
 80041e6:	60b9      	str	r1, [r7, #8]
 80041e8:	603b      	str	r3, [r7, #0]
 80041ea:	4613      	mov	r3, r2
 80041ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041ee:	e050      	b.n	8004292 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f6:	d04c      	beq.n	8004292 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80041f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d007      	beq.n	800420e <UART_WaitOnFlagUntilTimeout+0x30>
 80041fe:	f7fd fc81 	bl	8001b04 <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800420a:	429a      	cmp	r2, r3
 800420c:	d241      	bcs.n	8004292 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	330c      	adds	r3, #12
 8004214:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004218:	e853 3f00 	ldrex	r3, [r3]
 800421c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800421e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004220:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004224:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	330c      	adds	r3, #12
 800422c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800422e:	637a      	str	r2, [r7, #52]	; 0x34
 8004230:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004232:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004234:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004236:	e841 2300 	strex	r3, r2, [r1]
 800423a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800423c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800423e:	2b00      	cmp	r3, #0
 8004240:	d1e5      	bne.n	800420e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	3314      	adds	r3, #20
 8004248:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	e853 3f00 	ldrex	r3, [r3]
 8004250:	613b      	str	r3, [r7, #16]
   return(result);
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	f023 0301 	bic.w	r3, r3, #1
 8004258:	63bb      	str	r3, [r7, #56]	; 0x38
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	3314      	adds	r3, #20
 8004260:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004262:	623a      	str	r2, [r7, #32]
 8004264:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004266:	69f9      	ldr	r1, [r7, #28]
 8004268:	6a3a      	ldr	r2, [r7, #32]
 800426a:	e841 2300 	strex	r3, r2, [r1]
 800426e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d1e5      	bne.n	8004242 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2220      	movs	r2, #32
 800427a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2220      	movs	r2, #32
 8004282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e00f      	b.n	80042b2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	4013      	ands	r3, r2
 800429c:	68ba      	ldr	r2, [r7, #8]
 800429e:	429a      	cmp	r2, r3
 80042a0:	bf0c      	ite	eq
 80042a2:	2301      	moveq	r3, #1
 80042a4:	2300      	movne	r3, #0
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	461a      	mov	r2, r3
 80042aa:	79fb      	ldrb	r3, [r7, #7]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d09f      	beq.n	80041f0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3740      	adds	r7, #64	; 0x40
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
	...

080042bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042c0:	b09f      	sub	sp, #124	; 0x7c
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80042d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042d2:	68d9      	ldr	r1, [r3, #12]
 80042d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	ea40 0301 	orr.w	r3, r0, r1
 80042dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042e0:	689a      	ldr	r2, [r3, #8]
 80042e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	431a      	orrs	r2, r3
 80042e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042ea:	695b      	ldr	r3, [r3, #20]
 80042ec:	431a      	orrs	r2, r3
 80042ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042f0:	69db      	ldr	r3, [r3, #28]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80042f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004300:	f021 010c 	bic.w	r1, r1, #12
 8004304:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800430a:	430b      	orrs	r3, r1
 800430c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800430e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	695b      	ldr	r3, [r3, #20]
 8004314:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004318:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800431a:	6999      	ldr	r1, [r3, #24]
 800431c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	ea40 0301 	orr.w	r3, r0, r1
 8004324:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004326:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	4bc5      	ldr	r3, [pc, #788]	; (8004640 <UART_SetConfig+0x384>)
 800432c:	429a      	cmp	r2, r3
 800432e:	d004      	beq.n	800433a <UART_SetConfig+0x7e>
 8004330:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	4bc3      	ldr	r3, [pc, #780]	; (8004644 <UART_SetConfig+0x388>)
 8004336:	429a      	cmp	r2, r3
 8004338:	d103      	bne.n	8004342 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800433a:	f7fe feff 	bl	800313c <HAL_RCC_GetPCLK2Freq>
 800433e:	6778      	str	r0, [r7, #116]	; 0x74
 8004340:	e002      	b.n	8004348 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004342:	f7fe fee7 	bl	8003114 <HAL_RCC_GetPCLK1Freq>
 8004346:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004348:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800434a:	69db      	ldr	r3, [r3, #28]
 800434c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004350:	f040 80b6 	bne.w	80044c0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004354:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004356:	461c      	mov	r4, r3
 8004358:	f04f 0500 	mov.w	r5, #0
 800435c:	4622      	mov	r2, r4
 800435e:	462b      	mov	r3, r5
 8004360:	1891      	adds	r1, r2, r2
 8004362:	6439      	str	r1, [r7, #64]	; 0x40
 8004364:	415b      	adcs	r3, r3
 8004366:	647b      	str	r3, [r7, #68]	; 0x44
 8004368:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800436c:	1912      	adds	r2, r2, r4
 800436e:	eb45 0303 	adc.w	r3, r5, r3
 8004372:	f04f 0000 	mov.w	r0, #0
 8004376:	f04f 0100 	mov.w	r1, #0
 800437a:	00d9      	lsls	r1, r3, #3
 800437c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004380:	00d0      	lsls	r0, r2, #3
 8004382:	4602      	mov	r2, r0
 8004384:	460b      	mov	r3, r1
 8004386:	1911      	adds	r1, r2, r4
 8004388:	6639      	str	r1, [r7, #96]	; 0x60
 800438a:	416b      	adcs	r3, r5
 800438c:	667b      	str	r3, [r7, #100]	; 0x64
 800438e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	461a      	mov	r2, r3
 8004394:	f04f 0300 	mov.w	r3, #0
 8004398:	1891      	adds	r1, r2, r2
 800439a:	63b9      	str	r1, [r7, #56]	; 0x38
 800439c:	415b      	adcs	r3, r3
 800439e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80043a4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80043a8:	f7fb ff1a 	bl	80001e0 <__aeabi_uldivmod>
 80043ac:	4602      	mov	r2, r0
 80043ae:	460b      	mov	r3, r1
 80043b0:	4ba5      	ldr	r3, [pc, #660]	; (8004648 <UART_SetConfig+0x38c>)
 80043b2:	fba3 2302 	umull	r2, r3, r3, r2
 80043b6:	095b      	lsrs	r3, r3, #5
 80043b8:	011e      	lsls	r6, r3, #4
 80043ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043bc:	461c      	mov	r4, r3
 80043be:	f04f 0500 	mov.w	r5, #0
 80043c2:	4622      	mov	r2, r4
 80043c4:	462b      	mov	r3, r5
 80043c6:	1891      	adds	r1, r2, r2
 80043c8:	6339      	str	r1, [r7, #48]	; 0x30
 80043ca:	415b      	adcs	r3, r3
 80043cc:	637b      	str	r3, [r7, #52]	; 0x34
 80043ce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80043d2:	1912      	adds	r2, r2, r4
 80043d4:	eb45 0303 	adc.w	r3, r5, r3
 80043d8:	f04f 0000 	mov.w	r0, #0
 80043dc:	f04f 0100 	mov.w	r1, #0
 80043e0:	00d9      	lsls	r1, r3, #3
 80043e2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80043e6:	00d0      	lsls	r0, r2, #3
 80043e8:	4602      	mov	r2, r0
 80043ea:	460b      	mov	r3, r1
 80043ec:	1911      	adds	r1, r2, r4
 80043ee:	65b9      	str	r1, [r7, #88]	; 0x58
 80043f0:	416b      	adcs	r3, r5
 80043f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	461a      	mov	r2, r3
 80043fa:	f04f 0300 	mov.w	r3, #0
 80043fe:	1891      	adds	r1, r2, r2
 8004400:	62b9      	str	r1, [r7, #40]	; 0x28
 8004402:	415b      	adcs	r3, r3
 8004404:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004406:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800440a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800440e:	f7fb fee7 	bl	80001e0 <__aeabi_uldivmod>
 8004412:	4602      	mov	r2, r0
 8004414:	460b      	mov	r3, r1
 8004416:	4b8c      	ldr	r3, [pc, #560]	; (8004648 <UART_SetConfig+0x38c>)
 8004418:	fba3 1302 	umull	r1, r3, r3, r2
 800441c:	095b      	lsrs	r3, r3, #5
 800441e:	2164      	movs	r1, #100	; 0x64
 8004420:	fb01 f303 	mul.w	r3, r1, r3
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	00db      	lsls	r3, r3, #3
 8004428:	3332      	adds	r3, #50	; 0x32
 800442a:	4a87      	ldr	r2, [pc, #540]	; (8004648 <UART_SetConfig+0x38c>)
 800442c:	fba2 2303 	umull	r2, r3, r2, r3
 8004430:	095b      	lsrs	r3, r3, #5
 8004432:	005b      	lsls	r3, r3, #1
 8004434:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004438:	441e      	add	r6, r3
 800443a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800443c:	4618      	mov	r0, r3
 800443e:	f04f 0100 	mov.w	r1, #0
 8004442:	4602      	mov	r2, r0
 8004444:	460b      	mov	r3, r1
 8004446:	1894      	adds	r4, r2, r2
 8004448:	623c      	str	r4, [r7, #32]
 800444a:	415b      	adcs	r3, r3
 800444c:	627b      	str	r3, [r7, #36]	; 0x24
 800444e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004452:	1812      	adds	r2, r2, r0
 8004454:	eb41 0303 	adc.w	r3, r1, r3
 8004458:	f04f 0400 	mov.w	r4, #0
 800445c:	f04f 0500 	mov.w	r5, #0
 8004460:	00dd      	lsls	r5, r3, #3
 8004462:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004466:	00d4      	lsls	r4, r2, #3
 8004468:	4622      	mov	r2, r4
 800446a:	462b      	mov	r3, r5
 800446c:	1814      	adds	r4, r2, r0
 800446e:	653c      	str	r4, [r7, #80]	; 0x50
 8004470:	414b      	adcs	r3, r1
 8004472:	657b      	str	r3, [r7, #84]	; 0x54
 8004474:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	461a      	mov	r2, r3
 800447a:	f04f 0300 	mov.w	r3, #0
 800447e:	1891      	adds	r1, r2, r2
 8004480:	61b9      	str	r1, [r7, #24]
 8004482:	415b      	adcs	r3, r3
 8004484:	61fb      	str	r3, [r7, #28]
 8004486:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800448a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800448e:	f7fb fea7 	bl	80001e0 <__aeabi_uldivmod>
 8004492:	4602      	mov	r2, r0
 8004494:	460b      	mov	r3, r1
 8004496:	4b6c      	ldr	r3, [pc, #432]	; (8004648 <UART_SetConfig+0x38c>)
 8004498:	fba3 1302 	umull	r1, r3, r3, r2
 800449c:	095b      	lsrs	r3, r3, #5
 800449e:	2164      	movs	r1, #100	; 0x64
 80044a0:	fb01 f303 	mul.w	r3, r1, r3
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	00db      	lsls	r3, r3, #3
 80044a8:	3332      	adds	r3, #50	; 0x32
 80044aa:	4a67      	ldr	r2, [pc, #412]	; (8004648 <UART_SetConfig+0x38c>)
 80044ac:	fba2 2303 	umull	r2, r3, r2, r3
 80044b0:	095b      	lsrs	r3, r3, #5
 80044b2:	f003 0207 	and.w	r2, r3, #7
 80044b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4432      	add	r2, r6
 80044bc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80044be:	e0b9      	b.n	8004634 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044c2:	461c      	mov	r4, r3
 80044c4:	f04f 0500 	mov.w	r5, #0
 80044c8:	4622      	mov	r2, r4
 80044ca:	462b      	mov	r3, r5
 80044cc:	1891      	adds	r1, r2, r2
 80044ce:	6139      	str	r1, [r7, #16]
 80044d0:	415b      	adcs	r3, r3
 80044d2:	617b      	str	r3, [r7, #20]
 80044d4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80044d8:	1912      	adds	r2, r2, r4
 80044da:	eb45 0303 	adc.w	r3, r5, r3
 80044de:	f04f 0000 	mov.w	r0, #0
 80044e2:	f04f 0100 	mov.w	r1, #0
 80044e6:	00d9      	lsls	r1, r3, #3
 80044e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80044ec:	00d0      	lsls	r0, r2, #3
 80044ee:	4602      	mov	r2, r0
 80044f0:	460b      	mov	r3, r1
 80044f2:	eb12 0804 	adds.w	r8, r2, r4
 80044f6:	eb43 0905 	adc.w	r9, r3, r5
 80044fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	4618      	mov	r0, r3
 8004500:	f04f 0100 	mov.w	r1, #0
 8004504:	f04f 0200 	mov.w	r2, #0
 8004508:	f04f 0300 	mov.w	r3, #0
 800450c:	008b      	lsls	r3, r1, #2
 800450e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004512:	0082      	lsls	r2, r0, #2
 8004514:	4640      	mov	r0, r8
 8004516:	4649      	mov	r1, r9
 8004518:	f7fb fe62 	bl	80001e0 <__aeabi_uldivmod>
 800451c:	4602      	mov	r2, r0
 800451e:	460b      	mov	r3, r1
 8004520:	4b49      	ldr	r3, [pc, #292]	; (8004648 <UART_SetConfig+0x38c>)
 8004522:	fba3 2302 	umull	r2, r3, r3, r2
 8004526:	095b      	lsrs	r3, r3, #5
 8004528:	011e      	lsls	r6, r3, #4
 800452a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800452c:	4618      	mov	r0, r3
 800452e:	f04f 0100 	mov.w	r1, #0
 8004532:	4602      	mov	r2, r0
 8004534:	460b      	mov	r3, r1
 8004536:	1894      	adds	r4, r2, r2
 8004538:	60bc      	str	r4, [r7, #8]
 800453a:	415b      	adcs	r3, r3
 800453c:	60fb      	str	r3, [r7, #12]
 800453e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004542:	1812      	adds	r2, r2, r0
 8004544:	eb41 0303 	adc.w	r3, r1, r3
 8004548:	f04f 0400 	mov.w	r4, #0
 800454c:	f04f 0500 	mov.w	r5, #0
 8004550:	00dd      	lsls	r5, r3, #3
 8004552:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004556:	00d4      	lsls	r4, r2, #3
 8004558:	4622      	mov	r2, r4
 800455a:	462b      	mov	r3, r5
 800455c:	1814      	adds	r4, r2, r0
 800455e:	64bc      	str	r4, [r7, #72]	; 0x48
 8004560:	414b      	adcs	r3, r1
 8004562:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004564:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	4618      	mov	r0, r3
 800456a:	f04f 0100 	mov.w	r1, #0
 800456e:	f04f 0200 	mov.w	r2, #0
 8004572:	f04f 0300 	mov.w	r3, #0
 8004576:	008b      	lsls	r3, r1, #2
 8004578:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800457c:	0082      	lsls	r2, r0, #2
 800457e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004582:	f7fb fe2d 	bl	80001e0 <__aeabi_uldivmod>
 8004586:	4602      	mov	r2, r0
 8004588:	460b      	mov	r3, r1
 800458a:	4b2f      	ldr	r3, [pc, #188]	; (8004648 <UART_SetConfig+0x38c>)
 800458c:	fba3 1302 	umull	r1, r3, r3, r2
 8004590:	095b      	lsrs	r3, r3, #5
 8004592:	2164      	movs	r1, #100	; 0x64
 8004594:	fb01 f303 	mul.w	r3, r1, r3
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	011b      	lsls	r3, r3, #4
 800459c:	3332      	adds	r3, #50	; 0x32
 800459e:	4a2a      	ldr	r2, [pc, #168]	; (8004648 <UART_SetConfig+0x38c>)
 80045a0:	fba2 2303 	umull	r2, r3, r2, r3
 80045a4:	095b      	lsrs	r3, r3, #5
 80045a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045aa:	441e      	add	r6, r3
 80045ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045ae:	4618      	mov	r0, r3
 80045b0:	f04f 0100 	mov.w	r1, #0
 80045b4:	4602      	mov	r2, r0
 80045b6:	460b      	mov	r3, r1
 80045b8:	1894      	adds	r4, r2, r2
 80045ba:	603c      	str	r4, [r7, #0]
 80045bc:	415b      	adcs	r3, r3
 80045be:	607b      	str	r3, [r7, #4]
 80045c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045c4:	1812      	adds	r2, r2, r0
 80045c6:	eb41 0303 	adc.w	r3, r1, r3
 80045ca:	f04f 0400 	mov.w	r4, #0
 80045ce:	f04f 0500 	mov.w	r5, #0
 80045d2:	00dd      	lsls	r5, r3, #3
 80045d4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80045d8:	00d4      	lsls	r4, r2, #3
 80045da:	4622      	mov	r2, r4
 80045dc:	462b      	mov	r3, r5
 80045de:	eb12 0a00 	adds.w	sl, r2, r0
 80045e2:	eb43 0b01 	adc.w	fp, r3, r1
 80045e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	4618      	mov	r0, r3
 80045ec:	f04f 0100 	mov.w	r1, #0
 80045f0:	f04f 0200 	mov.w	r2, #0
 80045f4:	f04f 0300 	mov.w	r3, #0
 80045f8:	008b      	lsls	r3, r1, #2
 80045fa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80045fe:	0082      	lsls	r2, r0, #2
 8004600:	4650      	mov	r0, sl
 8004602:	4659      	mov	r1, fp
 8004604:	f7fb fdec 	bl	80001e0 <__aeabi_uldivmod>
 8004608:	4602      	mov	r2, r0
 800460a:	460b      	mov	r3, r1
 800460c:	4b0e      	ldr	r3, [pc, #56]	; (8004648 <UART_SetConfig+0x38c>)
 800460e:	fba3 1302 	umull	r1, r3, r3, r2
 8004612:	095b      	lsrs	r3, r3, #5
 8004614:	2164      	movs	r1, #100	; 0x64
 8004616:	fb01 f303 	mul.w	r3, r1, r3
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	011b      	lsls	r3, r3, #4
 800461e:	3332      	adds	r3, #50	; 0x32
 8004620:	4a09      	ldr	r2, [pc, #36]	; (8004648 <UART_SetConfig+0x38c>)
 8004622:	fba2 2303 	umull	r2, r3, r2, r3
 8004626:	095b      	lsrs	r3, r3, #5
 8004628:	f003 020f 	and.w	r2, r3, #15
 800462c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4432      	add	r2, r6
 8004632:	609a      	str	r2, [r3, #8]
}
 8004634:	bf00      	nop
 8004636:	377c      	adds	r7, #124	; 0x7c
 8004638:	46bd      	mov	sp, r7
 800463a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800463e:	bf00      	nop
 8004640:	40011000 	.word	0x40011000
 8004644:	40011400 	.word	0x40011400
 8004648:	51eb851f 	.word	0x51eb851f

0800464c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f103 0208 	add.w	r2, r3, #8
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f04f 32ff 	mov.w	r2, #4294967295
 8004664:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f103 0208 	add.w	r2, r3, #8
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f103 0208 	add.w	r2, r3, #8
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004680:	bf00      	nop
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800469a:	bf00      	nop
 800469c:	370c      	adds	r7, #12
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr

080046a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80046a6:	b480      	push	{r7}
 80046a8:	b085      	sub	sp, #20
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
 80046ae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	68fa      	ldr	r2, [r7, #12]
 80046ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	689a      	ldr	r2, [r3, #8]
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	683a      	ldr	r2, [r7, #0]
 80046ca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	683a      	ldr	r2, [r7, #0]
 80046d0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	1c5a      	adds	r2, r3, #1
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	601a      	str	r2, [r3, #0]
}
 80046e2:	bf00      	nop
 80046e4:	3714      	adds	r7, #20
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr

080046ee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80046ee:	b480      	push	{r7}
 80046f0:	b085      	sub	sp, #20
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
 80046f6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004704:	d103      	bne.n	800470e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	60fb      	str	r3, [r7, #12]
 800470c:	e00c      	b.n	8004728 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	3308      	adds	r3, #8
 8004712:	60fb      	str	r3, [r7, #12]
 8004714:	e002      	b.n	800471c <vListInsert+0x2e>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	60fb      	str	r3, [r7, #12]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68ba      	ldr	r2, [r7, #8]
 8004724:	429a      	cmp	r2, r3
 8004726:	d2f6      	bcs.n	8004716 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	685a      	ldr	r2, [r3, #4]
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	683a      	ldr	r2, [r7, #0]
 8004736:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	68fa      	ldr	r2, [r7, #12]
 800473c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	683a      	ldr	r2, [r7, #0]
 8004742:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	1c5a      	adds	r2, r3, #1
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	601a      	str	r2, [r3, #0]
}
 8004754:	bf00      	nop
 8004756:	3714      	adds	r7, #20
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004760:	b480      	push	{r7}
 8004762:	b085      	sub	sp, #20
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	6892      	ldr	r2, [r2, #8]
 8004776:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	6852      	ldr	r2, [r2, #4]
 8004780:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	429a      	cmp	r2, r3
 800478a:	d103      	bne.n	8004794 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	689a      	ldr	r2, [r3, #8]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	1e5a      	subs	r2, r3, #1
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3714      	adds	r7, #20
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d10a      	bne.n	80047de <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80047c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047cc:	f383 8811 	msr	BASEPRI, r3
 80047d0:	f3bf 8f6f 	isb	sy
 80047d4:	f3bf 8f4f 	dsb	sy
 80047d8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80047da:	bf00      	nop
 80047dc:	e7fe      	b.n	80047dc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80047de:	f001 ff69 	bl	80066b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ea:	68f9      	ldr	r1, [r7, #12]
 80047ec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80047ee:	fb01 f303 	mul.w	r3, r1, r3
 80047f2:	441a      	add	r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2200      	movs	r2, #0
 80047fc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800480e:	3b01      	subs	r3, #1
 8004810:	68f9      	ldr	r1, [r7, #12]
 8004812:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004814:	fb01 f303 	mul.w	r3, r1, r3
 8004818:	441a      	add	r2, r3
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	22ff      	movs	r2, #255	; 0xff
 8004822:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	22ff      	movs	r2, #255	; 0xff
 800482a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d114      	bne.n	800485e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d01a      	beq.n	8004872 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	3310      	adds	r3, #16
 8004840:	4618      	mov	r0, r3
 8004842:	f001 f841 	bl	80058c8 <xTaskRemoveFromEventList>
 8004846:	4603      	mov	r3, r0
 8004848:	2b00      	cmp	r3, #0
 800484a:	d012      	beq.n	8004872 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800484c:	4b0c      	ldr	r3, [pc, #48]	; (8004880 <xQueueGenericReset+0xcc>)
 800484e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004852:	601a      	str	r2, [r3, #0]
 8004854:	f3bf 8f4f 	dsb	sy
 8004858:	f3bf 8f6f 	isb	sy
 800485c:	e009      	b.n	8004872 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	3310      	adds	r3, #16
 8004862:	4618      	mov	r0, r3
 8004864:	f7ff fef2 	bl	800464c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	3324      	adds	r3, #36	; 0x24
 800486c:	4618      	mov	r0, r3
 800486e:	f7ff feed 	bl	800464c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004872:	f001 ff4f 	bl	8006714 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004876:	2301      	movs	r3, #1
}
 8004878:	4618      	mov	r0, r3
 800487a:	3710      	adds	r7, #16
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	e000ed04 	.word	0xe000ed04

08004884 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004884:	b580      	push	{r7, lr}
 8004886:	b08a      	sub	sp, #40	; 0x28
 8004888:	af02      	add	r7, sp, #8
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	4613      	mov	r3, r2
 8004890:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d10a      	bne.n	80048ae <xQueueGenericCreate+0x2a>
	__asm volatile
 8004898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800489c:	f383 8811 	msr	BASEPRI, r3
 80048a0:	f3bf 8f6f 	isb	sy
 80048a4:	f3bf 8f4f 	dsb	sy
 80048a8:	613b      	str	r3, [r7, #16]
}
 80048aa:	bf00      	nop
 80048ac:	e7fe      	b.n	80048ac <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d102      	bne.n	80048ba <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80048b4:	2300      	movs	r3, #0
 80048b6:	61fb      	str	r3, [r7, #28]
 80048b8:	e004      	b.n	80048c4 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	68ba      	ldr	r2, [r7, #8]
 80048be:	fb02 f303 	mul.w	r3, r2, r3
 80048c2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	3350      	adds	r3, #80	; 0x50
 80048c8:	4618      	mov	r0, r3
 80048ca:	f002 f815 	bl	80068f8 <pvPortMalloc>
 80048ce:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d00d      	beq.n	80048f2 <xQueueGenericCreate+0x6e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	3350      	adds	r3, #80	; 0x50
 80048de:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80048e0:	79fa      	ldrb	r2, [r7, #7]
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	9300      	str	r3, [sp, #0]
 80048e6:	4613      	mov	r3, r2
 80048e8:	697a      	ldr	r2, [r7, #20]
 80048ea:	68b9      	ldr	r1, [r7, #8]
 80048ec:	68f8      	ldr	r0, [r7, #12]
 80048ee:	f000 f805 	bl	80048fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80048f2:	69bb      	ldr	r3, [r7, #24]
	}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3720      	adds	r7, #32
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	607a      	str	r2, [r7, #4]
 8004908:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d103      	bne.n	8004918 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	69ba      	ldr	r2, [r7, #24]
 8004914:	601a      	str	r2, [r3, #0]
 8004916:	e002      	b.n	800491e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	68ba      	ldr	r2, [r7, #8]
 8004928:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800492a:	2101      	movs	r1, #1
 800492c:	69b8      	ldr	r0, [r7, #24]
 800492e:	f7ff ff41 	bl	80047b4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	78fa      	ldrb	r2, [r7, #3]
 8004936:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800493a:	bf00      	nop
 800493c:	3710      	adds	r7, #16
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
	...

08004944 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b08e      	sub	sp, #56	; 0x38
 8004948:	af00      	add	r7, sp, #0
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	607a      	str	r2, [r7, #4]
 8004950:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004952:	2300      	movs	r3, #0
 8004954:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800495a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800495c:	2b00      	cmp	r3, #0
 800495e:	d10a      	bne.n	8004976 <xQueueGenericSend+0x32>
	__asm volatile
 8004960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004964:	f383 8811 	msr	BASEPRI, r3
 8004968:	f3bf 8f6f 	isb	sy
 800496c:	f3bf 8f4f 	dsb	sy
 8004970:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004972:	bf00      	nop
 8004974:	e7fe      	b.n	8004974 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d103      	bne.n	8004984 <xQueueGenericSend+0x40>
 800497c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800497e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004980:	2b00      	cmp	r3, #0
 8004982:	d101      	bne.n	8004988 <xQueueGenericSend+0x44>
 8004984:	2301      	movs	r3, #1
 8004986:	e000      	b.n	800498a <xQueueGenericSend+0x46>
 8004988:	2300      	movs	r3, #0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d10a      	bne.n	80049a4 <xQueueGenericSend+0x60>
	__asm volatile
 800498e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004992:	f383 8811 	msr	BASEPRI, r3
 8004996:	f3bf 8f6f 	isb	sy
 800499a:	f3bf 8f4f 	dsb	sy
 800499e:	627b      	str	r3, [r7, #36]	; 0x24
}
 80049a0:	bf00      	nop
 80049a2:	e7fe      	b.n	80049a2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d103      	bne.n	80049b2 <xQueueGenericSend+0x6e>
 80049aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d101      	bne.n	80049b6 <xQueueGenericSend+0x72>
 80049b2:	2301      	movs	r3, #1
 80049b4:	e000      	b.n	80049b8 <xQueueGenericSend+0x74>
 80049b6:	2300      	movs	r3, #0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d10a      	bne.n	80049d2 <xQueueGenericSend+0x8e>
	__asm volatile
 80049bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c0:	f383 8811 	msr	BASEPRI, r3
 80049c4:	f3bf 8f6f 	isb	sy
 80049c8:	f3bf 8f4f 	dsb	sy
 80049cc:	623b      	str	r3, [r7, #32]
}
 80049ce:	bf00      	nop
 80049d0:	e7fe      	b.n	80049d0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80049d2:	f001 f915 	bl	8005c00 <xTaskGetSchedulerState>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d102      	bne.n	80049e2 <xQueueGenericSend+0x9e>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d101      	bne.n	80049e6 <xQueueGenericSend+0xa2>
 80049e2:	2301      	movs	r3, #1
 80049e4:	e000      	b.n	80049e8 <xQueueGenericSend+0xa4>
 80049e6:	2300      	movs	r3, #0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d10a      	bne.n	8004a02 <xQueueGenericSend+0xbe>
	__asm volatile
 80049ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f0:	f383 8811 	msr	BASEPRI, r3
 80049f4:	f3bf 8f6f 	isb	sy
 80049f8:	f3bf 8f4f 	dsb	sy
 80049fc:	61fb      	str	r3, [r7, #28]
}
 80049fe:	bf00      	nop
 8004a00:	e7fe      	b.n	8004a00 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a02:	f001 fe57 	bl	80066b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d302      	bcc.n	8004a18 <xQueueGenericSend+0xd4>
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d129      	bne.n	8004a6c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004a18:	683a      	ldr	r2, [r7, #0]
 8004a1a:	68b9      	ldr	r1, [r7, #8]
 8004a1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a1e:	f000 fa07 	bl	8004e30 <prvCopyDataToQueue>
 8004a22:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d010      	beq.n	8004a4e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a2e:	3324      	adds	r3, #36	; 0x24
 8004a30:	4618      	mov	r0, r3
 8004a32:	f000 ff49 	bl	80058c8 <xTaskRemoveFromEventList>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d013      	beq.n	8004a64 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004a3c:	4b3f      	ldr	r3, [pc, #252]	; (8004b3c <xQueueGenericSend+0x1f8>)
 8004a3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a42:	601a      	str	r2, [r3, #0]
 8004a44:	f3bf 8f4f 	dsb	sy
 8004a48:	f3bf 8f6f 	isb	sy
 8004a4c:	e00a      	b.n	8004a64 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d007      	beq.n	8004a64 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004a54:	4b39      	ldr	r3, [pc, #228]	; (8004b3c <xQueueGenericSend+0x1f8>)
 8004a56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a5a:	601a      	str	r2, [r3, #0]
 8004a5c:	f3bf 8f4f 	dsb	sy
 8004a60:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004a64:	f001 fe56 	bl	8006714 <vPortExitCritical>
				return pdPASS;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e063      	b.n	8004b34 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d103      	bne.n	8004a7a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004a72:	f001 fe4f 	bl	8006714 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004a76:	2300      	movs	r3, #0
 8004a78:	e05c      	b.n	8004b34 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d106      	bne.n	8004a8e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a80:	f107 0314 	add.w	r3, r7, #20
 8004a84:	4618      	mov	r0, r3
 8004a86:	f000 ff81 	bl	800598c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a8e:	f001 fe41 	bl	8006714 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a92:	f000 fcfb 	bl	800548c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a96:	f001 fe0d 	bl	80066b4 <vPortEnterCritical>
 8004a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004aa0:	b25b      	sxtb	r3, r3
 8004aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa6:	d103      	bne.n	8004ab0 <xQueueGenericSend+0x16c>
 8004aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ab6:	b25b      	sxtb	r3, r3
 8004ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004abc:	d103      	bne.n	8004ac6 <xQueueGenericSend+0x182>
 8004abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ac6:	f001 fe25 	bl	8006714 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004aca:	1d3a      	adds	r2, r7, #4
 8004acc:	f107 0314 	add.w	r3, r7, #20
 8004ad0:	4611      	mov	r1, r2
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f000 ff70 	bl	80059b8 <xTaskCheckForTimeOut>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d124      	bne.n	8004b28 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004ade:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ae0:	f000 fa9e 	bl	8005020 <prvIsQueueFull>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d018      	beq.n	8004b1c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aec:	3310      	adds	r3, #16
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	4611      	mov	r1, r2
 8004af2:	4618      	mov	r0, r3
 8004af4:	f000 fe98 	bl	8005828 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004af8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004afa:	f000 fa29 	bl	8004f50 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004afe:	f000 fcd3 	bl	80054a8 <xTaskResumeAll>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	f47f af7c 	bne.w	8004a02 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004b0a:	4b0c      	ldr	r3, [pc, #48]	; (8004b3c <xQueueGenericSend+0x1f8>)
 8004b0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b10:	601a      	str	r2, [r3, #0]
 8004b12:	f3bf 8f4f 	dsb	sy
 8004b16:	f3bf 8f6f 	isb	sy
 8004b1a:	e772      	b.n	8004a02 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004b1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b1e:	f000 fa17 	bl	8004f50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b22:	f000 fcc1 	bl	80054a8 <xTaskResumeAll>
 8004b26:	e76c      	b.n	8004a02 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004b28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b2a:	f000 fa11 	bl	8004f50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b2e:	f000 fcbb 	bl	80054a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004b32:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3738      	adds	r7, #56	; 0x38
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	e000ed04 	.word	0xe000ed04

08004b40 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b08e      	sub	sp, #56	; 0x38
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]
 8004b4c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d10a      	bne.n	8004b6e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b5c:	f383 8811 	msr	BASEPRI, r3
 8004b60:	f3bf 8f6f 	isb	sy
 8004b64:	f3bf 8f4f 	dsb	sy
 8004b68:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004b6a:	bf00      	nop
 8004b6c:	e7fe      	b.n	8004b6c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d103      	bne.n	8004b7c <xQueueGenericSendFromISR+0x3c>
 8004b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d101      	bne.n	8004b80 <xQueueGenericSendFromISR+0x40>
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e000      	b.n	8004b82 <xQueueGenericSendFromISR+0x42>
 8004b80:	2300      	movs	r3, #0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d10a      	bne.n	8004b9c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b8a:	f383 8811 	msr	BASEPRI, r3
 8004b8e:	f3bf 8f6f 	isb	sy
 8004b92:	f3bf 8f4f 	dsb	sy
 8004b96:	623b      	str	r3, [r7, #32]
}
 8004b98:	bf00      	nop
 8004b9a:	e7fe      	b.n	8004b9a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d103      	bne.n	8004baa <xQueueGenericSendFromISR+0x6a>
 8004ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d101      	bne.n	8004bae <xQueueGenericSendFromISR+0x6e>
 8004baa:	2301      	movs	r3, #1
 8004bac:	e000      	b.n	8004bb0 <xQueueGenericSendFromISR+0x70>
 8004bae:	2300      	movs	r3, #0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d10a      	bne.n	8004bca <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb8:	f383 8811 	msr	BASEPRI, r3
 8004bbc:	f3bf 8f6f 	isb	sy
 8004bc0:	f3bf 8f4f 	dsb	sy
 8004bc4:	61fb      	str	r3, [r7, #28]
}
 8004bc6:	bf00      	nop
 8004bc8:	e7fe      	b.n	8004bc8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004bca:	f001 fe55 	bl	8006878 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004bce:	f3ef 8211 	mrs	r2, BASEPRI
 8004bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd6:	f383 8811 	msr	BASEPRI, r3
 8004bda:	f3bf 8f6f 	isb	sy
 8004bde:	f3bf 8f4f 	dsb	sy
 8004be2:	61ba      	str	r2, [r7, #24]
 8004be4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004be6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004be8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d302      	bcc.n	8004bfc <xQueueGenericSendFromISR+0xbc>
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	d12c      	bne.n	8004c56 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bfe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c06:	683a      	ldr	r2, [r7, #0]
 8004c08:	68b9      	ldr	r1, [r7, #8]
 8004c0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c0c:	f000 f910 	bl	8004e30 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004c10:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c18:	d112      	bne.n	8004c40 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d016      	beq.n	8004c50 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c24:	3324      	adds	r3, #36	; 0x24
 8004c26:	4618      	mov	r0, r3
 8004c28:	f000 fe4e 	bl	80058c8 <xTaskRemoveFromEventList>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00e      	beq.n	8004c50 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d00b      	beq.n	8004c50 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	601a      	str	r2, [r3, #0]
 8004c3e:	e007      	b.n	8004c50 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004c40:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004c44:	3301      	adds	r3, #1
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	b25a      	sxtb	r2, r3
 8004c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004c50:	2301      	movs	r3, #1
 8004c52:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004c54:	e001      	b.n	8004c5a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004c56:	2300      	movs	r3, #0
 8004c58:	637b      	str	r3, [r7, #52]	; 0x34
 8004c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c5c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004c64:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3738      	adds	r7, #56	; 0x38
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b08c      	sub	sp, #48	; 0x30
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d10a      	bne.n	8004ca0 <xQueueReceive+0x30>
	__asm volatile
 8004c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c8e:	f383 8811 	msr	BASEPRI, r3
 8004c92:	f3bf 8f6f 	isb	sy
 8004c96:	f3bf 8f4f 	dsb	sy
 8004c9a:	623b      	str	r3, [r7, #32]
}
 8004c9c:	bf00      	nop
 8004c9e:	e7fe      	b.n	8004c9e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d103      	bne.n	8004cae <xQueueReceive+0x3e>
 8004ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d101      	bne.n	8004cb2 <xQueueReceive+0x42>
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e000      	b.n	8004cb4 <xQueueReceive+0x44>
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d10a      	bne.n	8004cce <xQueueReceive+0x5e>
	__asm volatile
 8004cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cbc:	f383 8811 	msr	BASEPRI, r3
 8004cc0:	f3bf 8f6f 	isb	sy
 8004cc4:	f3bf 8f4f 	dsb	sy
 8004cc8:	61fb      	str	r3, [r7, #28]
}
 8004cca:	bf00      	nop
 8004ccc:	e7fe      	b.n	8004ccc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004cce:	f000 ff97 	bl	8005c00 <xTaskGetSchedulerState>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d102      	bne.n	8004cde <xQueueReceive+0x6e>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d101      	bne.n	8004ce2 <xQueueReceive+0x72>
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e000      	b.n	8004ce4 <xQueueReceive+0x74>
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d10a      	bne.n	8004cfe <xQueueReceive+0x8e>
	__asm volatile
 8004ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cec:	f383 8811 	msr	BASEPRI, r3
 8004cf0:	f3bf 8f6f 	isb	sy
 8004cf4:	f3bf 8f4f 	dsb	sy
 8004cf8:	61bb      	str	r3, [r7, #24]
}
 8004cfa:	bf00      	nop
 8004cfc:	e7fe      	b.n	8004cfc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004cfe:	f001 fcd9 	bl	80066b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d06:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d01f      	beq.n	8004d4e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004d0e:	68b9      	ldr	r1, [r7, #8]
 8004d10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d12:	f000 f8f7 	bl	8004f04 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d18:	1e5a      	subs	r2, r3, #1
 8004d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d1c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00f      	beq.n	8004d46 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d28:	3310      	adds	r3, #16
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f000 fdcc 	bl	80058c8 <xTaskRemoveFromEventList>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d007      	beq.n	8004d46 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004d36:	4b3d      	ldr	r3, [pc, #244]	; (8004e2c <xQueueReceive+0x1bc>)
 8004d38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d3c:	601a      	str	r2, [r3, #0]
 8004d3e:	f3bf 8f4f 	dsb	sy
 8004d42:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004d46:	f001 fce5 	bl	8006714 <vPortExitCritical>
				return pdPASS;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e069      	b.n	8004e22 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d103      	bne.n	8004d5c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004d54:	f001 fcde 	bl	8006714 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	e062      	b.n	8004e22 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d106      	bne.n	8004d70 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004d62:	f107 0310 	add.w	r3, r7, #16
 8004d66:	4618      	mov	r0, r3
 8004d68:	f000 fe10 	bl	800598c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004d70:	f001 fcd0 	bl	8006714 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004d74:	f000 fb8a 	bl	800548c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d78:	f001 fc9c 	bl	80066b4 <vPortEnterCritical>
 8004d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d82:	b25b      	sxtb	r3, r3
 8004d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d88:	d103      	bne.n	8004d92 <xQueueReceive+0x122>
 8004d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d98:	b25b      	sxtb	r3, r3
 8004d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d9e:	d103      	bne.n	8004da8 <xQueueReceive+0x138>
 8004da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004da8:	f001 fcb4 	bl	8006714 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004dac:	1d3a      	adds	r2, r7, #4
 8004dae:	f107 0310 	add.w	r3, r7, #16
 8004db2:	4611      	mov	r1, r2
 8004db4:	4618      	mov	r0, r3
 8004db6:	f000 fdff 	bl	80059b8 <xTaskCheckForTimeOut>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d123      	bne.n	8004e08 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004dc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dc2:	f000 f917 	bl	8004ff4 <prvIsQueueEmpty>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d017      	beq.n	8004dfc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dce:	3324      	adds	r3, #36	; 0x24
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	4611      	mov	r1, r2
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f000 fd27 	bl	8005828 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004dda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ddc:	f000 f8b8 	bl	8004f50 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004de0:	f000 fb62 	bl	80054a8 <xTaskResumeAll>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d189      	bne.n	8004cfe <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004dea:	4b10      	ldr	r3, [pc, #64]	; (8004e2c <xQueueReceive+0x1bc>)
 8004dec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004df0:	601a      	str	r2, [r3, #0]
 8004df2:	f3bf 8f4f 	dsb	sy
 8004df6:	f3bf 8f6f 	isb	sy
 8004dfa:	e780      	b.n	8004cfe <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004dfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dfe:	f000 f8a7 	bl	8004f50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e02:	f000 fb51 	bl	80054a8 <xTaskResumeAll>
 8004e06:	e77a      	b.n	8004cfe <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004e08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e0a:	f000 f8a1 	bl	8004f50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e0e:	f000 fb4b 	bl	80054a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e14:	f000 f8ee 	bl	8004ff4 <prvIsQueueEmpty>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	f43f af6f 	beq.w	8004cfe <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004e20:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3730      	adds	r7, #48	; 0x30
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	e000ed04 	.word	0xe000ed04

08004e30 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b086      	sub	sp, #24
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	60b9      	str	r1, [r7, #8]
 8004e3a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e44:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d10d      	bne.n	8004e6a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d14d      	bne.n	8004ef2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f000 feee 	bl	8005c3c <xTaskPriorityDisinherit>
 8004e60:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2200      	movs	r2, #0
 8004e66:	609a      	str	r2, [r3, #8]
 8004e68:	e043      	b.n	8004ef2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d119      	bne.n	8004ea4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6858      	ldr	r0, [r3, #4]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e78:	461a      	mov	r2, r3
 8004e7a:	68b9      	ldr	r1, [r7, #8]
 8004e7c:	f001 ff3a 	bl	8006cf4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	685a      	ldr	r2, [r3, #4]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e88:	441a      	add	r2, r3
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	685a      	ldr	r2, [r3, #4]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d32b      	bcc.n	8004ef2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	605a      	str	r2, [r3, #4]
 8004ea2:	e026      	b.n	8004ef2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	68d8      	ldr	r0, [r3, #12]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eac:	461a      	mov	r2, r3
 8004eae:	68b9      	ldr	r1, [r7, #8]
 8004eb0:	f001 ff20 	bl	8006cf4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	68da      	ldr	r2, [r3, #12]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ebc:	425b      	negs	r3, r3
 8004ebe:	441a      	add	r2, r3
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	68da      	ldr	r2, [r3, #12]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d207      	bcs.n	8004ee0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	689a      	ldr	r2, [r3, #8]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed8:	425b      	negs	r3, r3
 8004eda:	441a      	add	r2, r3
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d105      	bne.n	8004ef2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d002      	beq.n	8004ef2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	3b01      	subs	r3, #1
 8004ef0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	1c5a      	adds	r2, r3, #1
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004efa:	697b      	ldr	r3, [r7, #20]
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3718      	adds	r7, #24
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b082      	sub	sp, #8
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d018      	beq.n	8004f48 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	68da      	ldr	r2, [r3, #12]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1e:	441a      	add	r2, r3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	68da      	ldr	r2, [r3, #12]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d303      	bcc.n	8004f38 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	68d9      	ldr	r1, [r3, #12]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f40:	461a      	mov	r2, r3
 8004f42:	6838      	ldr	r0, [r7, #0]
 8004f44:	f001 fed6 	bl	8006cf4 <memcpy>
	}
}
 8004f48:	bf00      	nop
 8004f4a:	3708      	adds	r7, #8
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004f58:	f001 fbac 	bl	80066b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f62:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f64:	e011      	b.n	8004f8a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d012      	beq.n	8004f94 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	3324      	adds	r3, #36	; 0x24
 8004f72:	4618      	mov	r0, r3
 8004f74:	f000 fca8 	bl	80058c8 <xTaskRemoveFromEventList>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d001      	beq.n	8004f82 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004f7e:	f000 fd7d 	bl	8005a7c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004f82:	7bfb      	ldrb	r3, [r7, #15]
 8004f84:	3b01      	subs	r3, #1
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	dce9      	bgt.n	8004f66 <prvUnlockQueue+0x16>
 8004f92:	e000      	b.n	8004f96 <prvUnlockQueue+0x46>
					break;
 8004f94:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	22ff      	movs	r2, #255	; 0xff
 8004f9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004f9e:	f001 fbb9 	bl	8006714 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004fa2:	f001 fb87 	bl	80066b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004fae:	e011      	b.n	8004fd4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d012      	beq.n	8004fde <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	3310      	adds	r3, #16
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f000 fc83 	bl	80058c8 <xTaskRemoveFromEventList>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d001      	beq.n	8004fcc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004fc8:	f000 fd58 	bl	8005a7c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004fcc:	7bbb      	ldrb	r3, [r7, #14]
 8004fce:	3b01      	subs	r3, #1
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004fd4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	dce9      	bgt.n	8004fb0 <prvUnlockQueue+0x60>
 8004fdc:	e000      	b.n	8004fe0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004fde:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	22ff      	movs	r2, #255	; 0xff
 8004fe4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004fe8:	f001 fb94 	bl	8006714 <vPortExitCritical>
}
 8004fec:	bf00      	nop
 8004fee:	3710      	adds	r7, #16
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}

08004ff4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004ffc:	f001 fb5a 	bl	80066b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005004:	2b00      	cmp	r3, #0
 8005006:	d102      	bne.n	800500e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005008:	2301      	movs	r3, #1
 800500a:	60fb      	str	r3, [r7, #12]
 800500c:	e001      	b.n	8005012 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800500e:	2300      	movs	r3, #0
 8005010:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005012:	f001 fb7f 	bl	8006714 <vPortExitCritical>

	return xReturn;
 8005016:	68fb      	ldr	r3, [r7, #12]
}
 8005018:	4618      	mov	r0, r3
 800501a:	3710      	adds	r7, #16
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005028:	f001 fb44 	bl	80066b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005034:	429a      	cmp	r2, r3
 8005036:	d102      	bne.n	800503e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005038:	2301      	movs	r3, #1
 800503a:	60fb      	str	r3, [r7, #12]
 800503c:	e001      	b.n	8005042 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800503e:	2300      	movs	r3, #0
 8005040:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005042:	f001 fb67 	bl	8006714 <vPortExitCritical>

	return xReturn;
 8005046:	68fb      	ldr	r3, [r7, #12]
}
 8005048:	4618      	mov	r0, r3
 800504a:	3710      	adds	r7, #16
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005050:	b480      	push	{r7}
 8005052:	b085      	sub	sp, #20
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800505a:	2300      	movs	r3, #0
 800505c:	60fb      	str	r3, [r7, #12]
 800505e:	e014      	b.n	800508a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005060:	4a0f      	ldr	r2, [pc, #60]	; (80050a0 <vQueueAddToRegistry+0x50>)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d10b      	bne.n	8005084 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800506c:	490c      	ldr	r1, [pc, #48]	; (80050a0 <vQueueAddToRegistry+0x50>)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	683a      	ldr	r2, [r7, #0]
 8005072:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005076:	4a0a      	ldr	r2, [pc, #40]	; (80050a0 <vQueueAddToRegistry+0x50>)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	00db      	lsls	r3, r3, #3
 800507c:	4413      	add	r3, r2
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005082:	e006      	b.n	8005092 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	3301      	adds	r3, #1
 8005088:	60fb      	str	r3, [r7, #12]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2b07      	cmp	r3, #7
 800508e:	d9e7      	bls.n	8005060 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005090:	bf00      	nop
 8005092:	bf00      	nop
 8005094:	3714      	adds	r7, #20
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
 800509e:	bf00      	nop
 80050a0:	20012efc 	.word	0x20012efc

080050a4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b086      	sub	sp, #24
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80050b4:	f001 fafe 	bl	80066b4 <vPortEnterCritical>
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050be:	b25b      	sxtb	r3, r3
 80050c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050c4:	d103      	bne.n	80050ce <vQueueWaitForMessageRestricted+0x2a>
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050d4:	b25b      	sxtb	r3, r3
 80050d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050da:	d103      	bne.n	80050e4 <vQueueWaitForMessageRestricted+0x40>
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	2200      	movs	r2, #0
 80050e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050e4:	f001 fb16 	bl	8006714 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d106      	bne.n	80050fe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	3324      	adds	r3, #36	; 0x24
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	68b9      	ldr	r1, [r7, #8]
 80050f8:	4618      	mov	r0, r3
 80050fa:	f000 fbb9 	bl	8005870 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80050fe:	6978      	ldr	r0, [r7, #20]
 8005100:	f7ff ff26 	bl	8004f50 <prvUnlockQueue>
	}
 8005104:	bf00      	nop
 8005106:	3718      	adds	r7, #24
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800510c:	b580      	push	{r7, lr}
 800510e:	b08c      	sub	sp, #48	; 0x30
 8005110:	af04      	add	r7, sp, #16
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	603b      	str	r3, [r7, #0]
 8005118:	4613      	mov	r3, r2
 800511a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800511c:	88fb      	ldrh	r3, [r7, #6]
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	4618      	mov	r0, r3
 8005122:	f001 fbe9 	bl	80068f8 <pvPortMalloc>
 8005126:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00e      	beq.n	800514c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800512e:	2058      	movs	r0, #88	; 0x58
 8005130:	f001 fbe2 	bl	80068f8 <pvPortMalloc>
 8005134:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d003      	beq.n	8005144 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	697a      	ldr	r2, [r7, #20]
 8005140:	631a      	str	r2, [r3, #48]	; 0x30
 8005142:	e005      	b.n	8005150 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005144:	6978      	ldr	r0, [r7, #20]
 8005146:	f001 fc9b 	bl	8006a80 <vPortFree>
 800514a:	e001      	b.n	8005150 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800514c:	2300      	movs	r3, #0
 800514e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d013      	beq.n	800517e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005156:	88fa      	ldrh	r2, [r7, #6]
 8005158:	2300      	movs	r3, #0
 800515a:	9303      	str	r3, [sp, #12]
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	9302      	str	r3, [sp, #8]
 8005160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005162:	9301      	str	r3, [sp, #4]
 8005164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005166:	9300      	str	r3, [sp, #0]
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	68b9      	ldr	r1, [r7, #8]
 800516c:	68f8      	ldr	r0, [r7, #12]
 800516e:	f000 f80e 	bl	800518e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005172:	69f8      	ldr	r0, [r7, #28]
 8005174:	f000 f89a 	bl	80052ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005178:	2301      	movs	r3, #1
 800517a:	61bb      	str	r3, [r7, #24]
 800517c:	e002      	b.n	8005184 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800517e:	f04f 33ff 	mov.w	r3, #4294967295
 8005182:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005184:	69bb      	ldr	r3, [r7, #24]
	}
 8005186:	4618      	mov	r0, r3
 8005188:	3720      	adds	r7, #32
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}

0800518e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800518e:	b580      	push	{r7, lr}
 8005190:	b088      	sub	sp, #32
 8005192:	af00      	add	r7, sp, #0
 8005194:	60f8      	str	r0, [r7, #12]
 8005196:	60b9      	str	r1, [r7, #8]
 8005198:	607a      	str	r2, [r7, #4]
 800519a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800519c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800519e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	461a      	mov	r2, r3
 80051a6:	21a5      	movs	r1, #165	; 0xa5
 80051a8:	f001 fdb2 	bl	8006d10 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80051ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80051b6:	3b01      	subs	r3, #1
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	4413      	add	r3, r2
 80051bc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	f023 0307 	bic.w	r3, r3, #7
 80051c4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	f003 0307 	and.w	r3, r3, #7
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d00a      	beq.n	80051e6 <prvInitialiseNewTask+0x58>
	__asm volatile
 80051d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d4:	f383 8811 	msr	BASEPRI, r3
 80051d8:	f3bf 8f6f 	isb	sy
 80051dc:	f3bf 8f4f 	dsb	sy
 80051e0:	617b      	str	r3, [r7, #20]
}
 80051e2:	bf00      	nop
 80051e4:	e7fe      	b.n	80051e4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d01f      	beq.n	800522c <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80051ec:	2300      	movs	r3, #0
 80051ee:	61fb      	str	r3, [r7, #28]
 80051f0:	e012      	b.n	8005218 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80051f2:	68ba      	ldr	r2, [r7, #8]
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	4413      	add	r3, r2
 80051f8:	7819      	ldrb	r1, [r3, #0]
 80051fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051fc:	69fb      	ldr	r3, [r7, #28]
 80051fe:	4413      	add	r3, r2
 8005200:	3334      	adds	r3, #52	; 0x34
 8005202:	460a      	mov	r2, r1
 8005204:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005206:	68ba      	ldr	r2, [r7, #8]
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	4413      	add	r3, r2
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d006      	beq.n	8005220 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	3301      	adds	r3, #1
 8005216:	61fb      	str	r3, [r7, #28]
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	2b09      	cmp	r3, #9
 800521c:	d9e9      	bls.n	80051f2 <prvInitialiseNewTask+0x64>
 800521e:	e000      	b.n	8005222 <prvInitialiseNewTask+0x94>
			{
				break;
 8005220:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005224:	2200      	movs	r2, #0
 8005226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800522a:	e003      	b.n	8005234 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800522c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800522e:	2200      	movs	r2, #0
 8005230:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005236:	2b04      	cmp	r3, #4
 8005238:	d901      	bls.n	800523e <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800523a:	2304      	movs	r3, #4
 800523c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800523e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005240:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005242:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005246:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005248:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 800524a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800524c:	2200      	movs	r2, #0
 800524e:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005252:	3304      	adds	r3, #4
 8005254:	4618      	mov	r0, r3
 8005256:	f7ff fa19 	bl	800468c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800525a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800525c:	3318      	adds	r3, #24
 800525e:	4618      	mov	r0, r3
 8005260:	f7ff fa14 	bl	800468c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005266:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005268:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800526a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800526c:	f1c3 0205 	rsb	r2, r3, #5
 8005270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005272:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005276:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005278:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800527a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800527c:	2200      	movs	r2, #0
 800527e:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005282:	2200      	movs	r2, #0
 8005284:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005288:	683a      	ldr	r2, [r7, #0]
 800528a:	68f9      	ldr	r1, [r7, #12]
 800528c:	69b8      	ldr	r0, [r7, #24]
 800528e:	f001 f8d3 	bl	8006438 <pxPortInitialiseStack>
 8005292:	4602      	mov	r2, r0
 8005294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005296:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800529a:	2b00      	cmp	r3, #0
 800529c:	d002      	beq.n	80052a4 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800529e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052a2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052a4:	bf00      	nop
 80052a6:	3720      	adds	r7, #32
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b082      	sub	sp, #8
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80052b4:	f001 f9fe 	bl	80066b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80052b8:	4b2c      	ldr	r3, [pc, #176]	; (800536c <prvAddNewTaskToReadyList+0xc0>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	3301      	adds	r3, #1
 80052be:	4a2b      	ldr	r2, [pc, #172]	; (800536c <prvAddNewTaskToReadyList+0xc0>)
 80052c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80052c2:	4b2b      	ldr	r3, [pc, #172]	; (8005370 <prvAddNewTaskToReadyList+0xc4>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d109      	bne.n	80052de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80052ca:	4a29      	ldr	r2, [pc, #164]	; (8005370 <prvAddNewTaskToReadyList+0xc4>)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80052d0:	4b26      	ldr	r3, [pc, #152]	; (800536c <prvAddNewTaskToReadyList+0xc0>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d110      	bne.n	80052fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80052d8:	f000 fbf4 	bl	8005ac4 <prvInitialiseTaskLists>
 80052dc:	e00d      	b.n	80052fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80052de:	4b25      	ldr	r3, [pc, #148]	; (8005374 <prvAddNewTaskToReadyList+0xc8>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d109      	bne.n	80052fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80052e6:	4b22      	ldr	r3, [pc, #136]	; (8005370 <prvAddNewTaskToReadyList+0xc4>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d802      	bhi.n	80052fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80052f4:	4a1e      	ldr	r2, [pc, #120]	; (8005370 <prvAddNewTaskToReadyList+0xc4>)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80052fa:	4b1f      	ldr	r3, [pc, #124]	; (8005378 <prvAddNewTaskToReadyList+0xcc>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	3301      	adds	r3, #1
 8005300:	4a1d      	ldr	r2, [pc, #116]	; (8005378 <prvAddNewTaskToReadyList+0xcc>)
 8005302:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005304:	4b1c      	ldr	r3, [pc, #112]	; (8005378 <prvAddNewTaskToReadyList+0xcc>)
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005310:	2201      	movs	r2, #1
 8005312:	409a      	lsls	r2, r3
 8005314:	4b19      	ldr	r3, [pc, #100]	; (800537c <prvAddNewTaskToReadyList+0xd0>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4313      	orrs	r3, r2
 800531a:	4a18      	ldr	r2, [pc, #96]	; (800537c <prvAddNewTaskToReadyList+0xd0>)
 800531c:	6013      	str	r3, [r2, #0]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005322:	4613      	mov	r3, r2
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	4413      	add	r3, r2
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	4a15      	ldr	r2, [pc, #84]	; (8005380 <prvAddNewTaskToReadyList+0xd4>)
 800532c:	441a      	add	r2, r3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	3304      	adds	r3, #4
 8005332:	4619      	mov	r1, r3
 8005334:	4610      	mov	r0, r2
 8005336:	f7ff f9b6 	bl	80046a6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800533a:	f001 f9eb 	bl	8006714 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800533e:	4b0d      	ldr	r3, [pc, #52]	; (8005374 <prvAddNewTaskToReadyList+0xc8>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d00e      	beq.n	8005364 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005346:	4b0a      	ldr	r3, [pc, #40]	; (8005370 <prvAddNewTaskToReadyList+0xc4>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005350:	429a      	cmp	r2, r3
 8005352:	d207      	bcs.n	8005364 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005354:	4b0b      	ldr	r3, [pc, #44]	; (8005384 <prvAddNewTaskToReadyList+0xd8>)
 8005356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800535a:	601a      	str	r2, [r3, #0]
 800535c:	f3bf 8f4f 	dsb	sy
 8005360:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005364:	bf00      	nop
 8005366:	3708      	adds	r7, #8
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	20000120 	.word	0x20000120
 8005370:	20000048 	.word	0x20000048
 8005374:	2000012c 	.word	0x2000012c
 8005378:	2000013c 	.word	0x2000013c
 800537c:	20000128 	.word	0x20000128
 8005380:	2000004c 	.word	0x2000004c
 8005384:	e000ed04 	.word	0xe000ed04

08005388 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005388:	b580      	push	{r7, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005390:	2300      	movs	r3, #0
 8005392:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d017      	beq.n	80053ca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800539a:	4b13      	ldr	r3, [pc, #76]	; (80053e8 <vTaskDelay+0x60>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00a      	beq.n	80053b8 <vTaskDelay+0x30>
	__asm volatile
 80053a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a6:	f383 8811 	msr	BASEPRI, r3
 80053aa:	f3bf 8f6f 	isb	sy
 80053ae:	f3bf 8f4f 	dsb	sy
 80053b2:	60bb      	str	r3, [r7, #8]
}
 80053b4:	bf00      	nop
 80053b6:	e7fe      	b.n	80053b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80053b8:	f000 f868 	bl	800548c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80053bc:	2100      	movs	r1, #0
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 fcc2 	bl	8005d48 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80053c4:	f000 f870 	bl	80054a8 <xTaskResumeAll>
 80053c8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d107      	bne.n	80053e0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80053d0:	4b06      	ldr	r3, [pc, #24]	; (80053ec <vTaskDelay+0x64>)
 80053d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053d6:	601a      	str	r2, [r3, #0]
 80053d8:	f3bf 8f4f 	dsb	sy
 80053dc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80053e0:	bf00      	nop
 80053e2:	3710      	adds	r7, #16
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}
 80053e8:	20000148 	.word	0x20000148
 80053ec:	e000ed04 	.word	0xe000ed04

080053f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b086      	sub	sp, #24
 80053f4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80053f6:	4b1f      	ldr	r3, [pc, #124]	; (8005474 <vTaskStartScheduler+0x84>)
 80053f8:	9301      	str	r3, [sp, #4]
 80053fa:	2300      	movs	r3, #0
 80053fc:	9300      	str	r3, [sp, #0]
 80053fe:	2300      	movs	r3, #0
 8005400:	2282      	movs	r2, #130	; 0x82
 8005402:	491d      	ldr	r1, [pc, #116]	; (8005478 <vTaskStartScheduler+0x88>)
 8005404:	481d      	ldr	r0, [pc, #116]	; (800547c <vTaskStartScheduler+0x8c>)
 8005406:	f7ff fe81 	bl	800510c <xTaskCreate>
 800540a:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2b01      	cmp	r3, #1
 8005410:	d102      	bne.n	8005418 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8005412:	f000 fcff 	bl	8005e14 <xTimerCreateTimerTask>
 8005416:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2b01      	cmp	r3, #1
 800541c:	d116      	bne.n	800544c <vTaskStartScheduler+0x5c>
	__asm volatile
 800541e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005422:	f383 8811 	msr	BASEPRI, r3
 8005426:	f3bf 8f6f 	isb	sy
 800542a:	f3bf 8f4f 	dsb	sy
 800542e:	60bb      	str	r3, [r7, #8]
}
 8005430:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005432:	4b13      	ldr	r3, [pc, #76]	; (8005480 <vTaskStartScheduler+0x90>)
 8005434:	f04f 32ff 	mov.w	r2, #4294967295
 8005438:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800543a:	4b12      	ldr	r3, [pc, #72]	; (8005484 <vTaskStartScheduler+0x94>)
 800543c:	2201      	movs	r2, #1
 800543e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005440:	4b11      	ldr	r3, [pc, #68]	; (8005488 <vTaskStartScheduler+0x98>)
 8005442:	2200      	movs	r2, #0
 8005444:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005446:	f001 f883 	bl	8006550 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800544a:	e00e      	b.n	800546a <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005452:	d10a      	bne.n	800546a <vTaskStartScheduler+0x7a>
	__asm volatile
 8005454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005458:	f383 8811 	msr	BASEPRI, r3
 800545c:	f3bf 8f6f 	isb	sy
 8005460:	f3bf 8f4f 	dsb	sy
 8005464:	607b      	str	r3, [r7, #4]
}
 8005466:	bf00      	nop
 8005468:	e7fe      	b.n	8005468 <vTaskStartScheduler+0x78>
}
 800546a:	bf00      	nop
 800546c:	3710      	adds	r7, #16
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	20000144 	.word	0x20000144
 8005478:	08006d78 	.word	0x08006d78
 800547c:	08005a95 	.word	0x08005a95
 8005480:	20000140 	.word	0x20000140
 8005484:	2000012c 	.word	0x2000012c
 8005488:	20000124 	.word	0x20000124

0800548c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800548c:	b480      	push	{r7}
 800548e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005490:	4b04      	ldr	r3, [pc, #16]	; (80054a4 <vTaskSuspendAll+0x18>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	3301      	adds	r3, #1
 8005496:	4a03      	ldr	r2, [pc, #12]	; (80054a4 <vTaskSuspendAll+0x18>)
 8005498:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800549a:	bf00      	nop
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr
 80054a4:	20000148 	.word	0x20000148

080054a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80054ae:	2300      	movs	r3, #0
 80054b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80054b2:	2300      	movs	r3, #0
 80054b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80054b6:	4b41      	ldr	r3, [pc, #260]	; (80055bc <xTaskResumeAll+0x114>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d10a      	bne.n	80054d4 <xTaskResumeAll+0x2c>
	__asm volatile
 80054be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c2:	f383 8811 	msr	BASEPRI, r3
 80054c6:	f3bf 8f6f 	isb	sy
 80054ca:	f3bf 8f4f 	dsb	sy
 80054ce:	603b      	str	r3, [r7, #0]
}
 80054d0:	bf00      	nop
 80054d2:	e7fe      	b.n	80054d2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80054d4:	f001 f8ee 	bl	80066b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80054d8:	4b38      	ldr	r3, [pc, #224]	; (80055bc <xTaskResumeAll+0x114>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	3b01      	subs	r3, #1
 80054de:	4a37      	ldr	r2, [pc, #220]	; (80055bc <xTaskResumeAll+0x114>)
 80054e0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054e2:	4b36      	ldr	r3, [pc, #216]	; (80055bc <xTaskResumeAll+0x114>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d161      	bne.n	80055ae <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80054ea:	4b35      	ldr	r3, [pc, #212]	; (80055c0 <xTaskResumeAll+0x118>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d05d      	beq.n	80055ae <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80054f2:	e02e      	b.n	8005552 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054f4:	4b33      	ldr	r3, [pc, #204]	; (80055c4 <xTaskResumeAll+0x11c>)
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	3318      	adds	r3, #24
 8005500:	4618      	mov	r0, r3
 8005502:	f7ff f92d 	bl	8004760 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	3304      	adds	r3, #4
 800550a:	4618      	mov	r0, r3
 800550c:	f7ff f928 	bl	8004760 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005514:	2201      	movs	r2, #1
 8005516:	409a      	lsls	r2, r3
 8005518:	4b2b      	ldr	r3, [pc, #172]	; (80055c8 <xTaskResumeAll+0x120>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4313      	orrs	r3, r2
 800551e:	4a2a      	ldr	r2, [pc, #168]	; (80055c8 <xTaskResumeAll+0x120>)
 8005520:	6013      	str	r3, [r2, #0]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005526:	4613      	mov	r3, r2
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	4413      	add	r3, r2
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	4a27      	ldr	r2, [pc, #156]	; (80055cc <xTaskResumeAll+0x124>)
 8005530:	441a      	add	r2, r3
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	3304      	adds	r3, #4
 8005536:	4619      	mov	r1, r3
 8005538:	4610      	mov	r0, r2
 800553a:	f7ff f8b4 	bl	80046a6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005542:	4b23      	ldr	r3, [pc, #140]	; (80055d0 <xTaskResumeAll+0x128>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005548:	429a      	cmp	r2, r3
 800554a:	d302      	bcc.n	8005552 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800554c:	4b21      	ldr	r3, [pc, #132]	; (80055d4 <xTaskResumeAll+0x12c>)
 800554e:	2201      	movs	r2, #1
 8005550:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005552:	4b1c      	ldr	r3, [pc, #112]	; (80055c4 <xTaskResumeAll+0x11c>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d1cc      	bne.n	80054f4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d001      	beq.n	8005564 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005560:	f000 fb2e 	bl	8005bc0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005564:	4b1c      	ldr	r3, [pc, #112]	; (80055d8 <xTaskResumeAll+0x130>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d010      	beq.n	8005592 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005570:	f000 f846 	bl	8005600 <xTaskIncrementTick>
 8005574:	4603      	mov	r3, r0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d002      	beq.n	8005580 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800557a:	4b16      	ldr	r3, [pc, #88]	; (80055d4 <xTaskResumeAll+0x12c>)
 800557c:	2201      	movs	r2, #1
 800557e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	3b01      	subs	r3, #1
 8005584:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d1f1      	bne.n	8005570 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800558c:	4b12      	ldr	r3, [pc, #72]	; (80055d8 <xTaskResumeAll+0x130>)
 800558e:	2200      	movs	r2, #0
 8005590:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005592:	4b10      	ldr	r3, [pc, #64]	; (80055d4 <xTaskResumeAll+0x12c>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d009      	beq.n	80055ae <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800559a:	2301      	movs	r3, #1
 800559c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800559e:	4b0f      	ldr	r3, [pc, #60]	; (80055dc <xTaskResumeAll+0x134>)
 80055a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055a4:	601a      	str	r2, [r3, #0]
 80055a6:	f3bf 8f4f 	dsb	sy
 80055aa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80055ae:	f001 f8b1 	bl	8006714 <vPortExitCritical>

	return xAlreadyYielded;
 80055b2:	68bb      	ldr	r3, [r7, #8]
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3710      	adds	r7, #16
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}
 80055bc:	20000148 	.word	0x20000148
 80055c0:	20000120 	.word	0x20000120
 80055c4:	200000e0 	.word	0x200000e0
 80055c8:	20000128 	.word	0x20000128
 80055cc:	2000004c 	.word	0x2000004c
 80055d0:	20000048 	.word	0x20000048
 80055d4:	20000134 	.word	0x20000134
 80055d8:	20000130 	.word	0x20000130
 80055dc:	e000ed04 	.word	0xe000ed04

080055e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80055e6:	4b05      	ldr	r3, [pc, #20]	; (80055fc <xTaskGetTickCount+0x1c>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80055ec:	687b      	ldr	r3, [r7, #4]
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	370c      	adds	r7, #12
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr
 80055fa:	bf00      	nop
 80055fc:	20000124 	.word	0x20000124

08005600 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b086      	sub	sp, #24
 8005604:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005606:	2300      	movs	r3, #0
 8005608:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800560a:	4b4e      	ldr	r3, [pc, #312]	; (8005744 <xTaskIncrementTick+0x144>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	2b00      	cmp	r3, #0
 8005610:	f040 8088 	bne.w	8005724 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005614:	4b4c      	ldr	r3, [pc, #304]	; (8005748 <xTaskIncrementTick+0x148>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	3301      	adds	r3, #1
 800561a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800561c:	4a4a      	ldr	r2, [pc, #296]	; (8005748 <xTaskIncrementTick+0x148>)
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d120      	bne.n	800566a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005628:	4b48      	ldr	r3, [pc, #288]	; (800574c <xTaskIncrementTick+0x14c>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d00a      	beq.n	8005648 <xTaskIncrementTick+0x48>
	__asm volatile
 8005632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005636:	f383 8811 	msr	BASEPRI, r3
 800563a:	f3bf 8f6f 	isb	sy
 800563e:	f3bf 8f4f 	dsb	sy
 8005642:	603b      	str	r3, [r7, #0]
}
 8005644:	bf00      	nop
 8005646:	e7fe      	b.n	8005646 <xTaskIncrementTick+0x46>
 8005648:	4b40      	ldr	r3, [pc, #256]	; (800574c <xTaskIncrementTick+0x14c>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	60fb      	str	r3, [r7, #12]
 800564e:	4b40      	ldr	r3, [pc, #256]	; (8005750 <xTaskIncrementTick+0x150>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a3e      	ldr	r2, [pc, #248]	; (800574c <xTaskIncrementTick+0x14c>)
 8005654:	6013      	str	r3, [r2, #0]
 8005656:	4a3e      	ldr	r2, [pc, #248]	; (8005750 <xTaskIncrementTick+0x150>)
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6013      	str	r3, [r2, #0]
 800565c:	4b3d      	ldr	r3, [pc, #244]	; (8005754 <xTaskIncrementTick+0x154>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	3301      	adds	r3, #1
 8005662:	4a3c      	ldr	r2, [pc, #240]	; (8005754 <xTaskIncrementTick+0x154>)
 8005664:	6013      	str	r3, [r2, #0]
 8005666:	f000 faab 	bl	8005bc0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800566a:	4b3b      	ldr	r3, [pc, #236]	; (8005758 <xTaskIncrementTick+0x158>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	693a      	ldr	r2, [r7, #16]
 8005670:	429a      	cmp	r2, r3
 8005672:	d348      	bcc.n	8005706 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005674:	4b35      	ldr	r3, [pc, #212]	; (800574c <xTaskIncrementTick+0x14c>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d104      	bne.n	8005688 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800567e:	4b36      	ldr	r3, [pc, #216]	; (8005758 <xTaskIncrementTick+0x158>)
 8005680:	f04f 32ff 	mov.w	r2, #4294967295
 8005684:	601a      	str	r2, [r3, #0]
					break;
 8005686:	e03e      	b.n	8005706 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005688:	4b30      	ldr	r3, [pc, #192]	; (800574c <xTaskIncrementTick+0x14c>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005698:	693a      	ldr	r2, [r7, #16]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	429a      	cmp	r2, r3
 800569e:	d203      	bcs.n	80056a8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80056a0:	4a2d      	ldr	r2, [pc, #180]	; (8005758 <xTaskIncrementTick+0x158>)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80056a6:	e02e      	b.n	8005706 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	3304      	adds	r3, #4
 80056ac:	4618      	mov	r0, r3
 80056ae:	f7ff f857 	bl	8004760 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d004      	beq.n	80056c4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	3318      	adds	r3, #24
 80056be:	4618      	mov	r0, r3
 80056c0:	f7ff f84e 	bl	8004760 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c8:	2201      	movs	r2, #1
 80056ca:	409a      	lsls	r2, r3
 80056cc:	4b23      	ldr	r3, [pc, #140]	; (800575c <xTaskIncrementTick+0x15c>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	4a22      	ldr	r2, [pc, #136]	; (800575c <xTaskIncrementTick+0x15c>)
 80056d4:	6013      	str	r3, [r2, #0]
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056da:	4613      	mov	r3, r2
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	4413      	add	r3, r2
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	4a1f      	ldr	r2, [pc, #124]	; (8005760 <xTaskIncrementTick+0x160>)
 80056e4:	441a      	add	r2, r3
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	3304      	adds	r3, #4
 80056ea:	4619      	mov	r1, r3
 80056ec:	4610      	mov	r0, r2
 80056ee:	f7fe ffda 	bl	80046a6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056f6:	4b1b      	ldr	r3, [pc, #108]	; (8005764 <xTaskIncrementTick+0x164>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d3b9      	bcc.n	8005674 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005700:	2301      	movs	r3, #1
 8005702:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005704:	e7b6      	b.n	8005674 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005706:	4b17      	ldr	r3, [pc, #92]	; (8005764 <xTaskIncrementTick+0x164>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800570c:	4914      	ldr	r1, [pc, #80]	; (8005760 <xTaskIncrementTick+0x160>)
 800570e:	4613      	mov	r3, r2
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	4413      	add	r3, r2
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	440b      	add	r3, r1
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2b01      	cmp	r3, #1
 800571c:	d907      	bls.n	800572e <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800571e:	2301      	movs	r3, #1
 8005720:	617b      	str	r3, [r7, #20]
 8005722:	e004      	b.n	800572e <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005724:	4b10      	ldr	r3, [pc, #64]	; (8005768 <xTaskIncrementTick+0x168>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	3301      	adds	r3, #1
 800572a:	4a0f      	ldr	r2, [pc, #60]	; (8005768 <xTaskIncrementTick+0x168>)
 800572c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800572e:	4b0f      	ldr	r3, [pc, #60]	; (800576c <xTaskIncrementTick+0x16c>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d001      	beq.n	800573a <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8005736:	2301      	movs	r3, #1
 8005738:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800573a:	697b      	ldr	r3, [r7, #20]
}
 800573c:	4618      	mov	r0, r3
 800573e:	3718      	adds	r7, #24
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}
 8005744:	20000148 	.word	0x20000148
 8005748:	20000124 	.word	0x20000124
 800574c:	200000d8 	.word	0x200000d8
 8005750:	200000dc 	.word	0x200000dc
 8005754:	20000138 	.word	0x20000138
 8005758:	20000140 	.word	0x20000140
 800575c:	20000128 	.word	0x20000128
 8005760:	2000004c 	.word	0x2000004c
 8005764:	20000048 	.word	0x20000048
 8005768:	20000130 	.word	0x20000130
 800576c:	20000134 	.word	0x20000134

08005770 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005770:	b480      	push	{r7}
 8005772:	b087      	sub	sp, #28
 8005774:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005776:	4b27      	ldr	r3, [pc, #156]	; (8005814 <vTaskSwitchContext+0xa4>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d003      	beq.n	8005786 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800577e:	4b26      	ldr	r3, [pc, #152]	; (8005818 <vTaskSwitchContext+0xa8>)
 8005780:	2201      	movs	r2, #1
 8005782:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005784:	e03f      	b.n	8005806 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8005786:	4b24      	ldr	r3, [pc, #144]	; (8005818 <vTaskSwitchContext+0xa8>)
 8005788:	2200      	movs	r2, #0
 800578a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800578c:	4b23      	ldr	r3, [pc, #140]	; (800581c <vTaskSwitchContext+0xac>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	fab3 f383 	clz	r3, r3
 8005798:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800579a:	7afb      	ldrb	r3, [r7, #11]
 800579c:	f1c3 031f 	rsb	r3, r3, #31
 80057a0:	617b      	str	r3, [r7, #20]
 80057a2:	491f      	ldr	r1, [pc, #124]	; (8005820 <vTaskSwitchContext+0xb0>)
 80057a4:	697a      	ldr	r2, [r7, #20]
 80057a6:	4613      	mov	r3, r2
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	4413      	add	r3, r2
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	440b      	add	r3, r1
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d10a      	bne.n	80057cc <vTaskSwitchContext+0x5c>
	__asm volatile
 80057b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ba:	f383 8811 	msr	BASEPRI, r3
 80057be:	f3bf 8f6f 	isb	sy
 80057c2:	f3bf 8f4f 	dsb	sy
 80057c6:	607b      	str	r3, [r7, #4]
}
 80057c8:	bf00      	nop
 80057ca:	e7fe      	b.n	80057ca <vTaskSwitchContext+0x5a>
 80057cc:	697a      	ldr	r2, [r7, #20]
 80057ce:	4613      	mov	r3, r2
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	4413      	add	r3, r2
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	4a12      	ldr	r2, [pc, #72]	; (8005820 <vTaskSwitchContext+0xb0>)
 80057d8:	4413      	add	r3, r2
 80057da:	613b      	str	r3, [r7, #16]
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	685a      	ldr	r2, [r3, #4]
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	605a      	str	r2, [r3, #4]
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	685a      	ldr	r2, [r3, #4]
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	3308      	adds	r3, #8
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d104      	bne.n	80057fc <vTaskSwitchContext+0x8c>
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	685a      	ldr	r2, [r3, #4]
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	605a      	str	r2, [r3, #4]
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	4a08      	ldr	r2, [pc, #32]	; (8005824 <vTaskSwitchContext+0xb4>)
 8005804:	6013      	str	r3, [r2, #0]
}
 8005806:	bf00      	nop
 8005808:	371c      	adds	r7, #28
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr
 8005812:	bf00      	nop
 8005814:	20000148 	.word	0x20000148
 8005818:	20000134 	.word	0x20000134
 800581c:	20000128 	.word	0x20000128
 8005820:	2000004c 	.word	0x2000004c
 8005824:	20000048 	.word	0x20000048

08005828 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d10a      	bne.n	800584e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800583c:	f383 8811 	msr	BASEPRI, r3
 8005840:	f3bf 8f6f 	isb	sy
 8005844:	f3bf 8f4f 	dsb	sy
 8005848:	60fb      	str	r3, [r7, #12]
}
 800584a:	bf00      	nop
 800584c:	e7fe      	b.n	800584c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800584e:	4b07      	ldr	r3, [pc, #28]	; (800586c <vTaskPlaceOnEventList+0x44>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	3318      	adds	r3, #24
 8005854:	4619      	mov	r1, r3
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f7fe ff49 	bl	80046ee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800585c:	2101      	movs	r1, #1
 800585e:	6838      	ldr	r0, [r7, #0]
 8005860:	f000 fa72 	bl	8005d48 <prvAddCurrentTaskToDelayedList>
}
 8005864:	bf00      	nop
 8005866:	3710      	adds	r7, #16
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}
 800586c:	20000048 	.word	0x20000048

08005870 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005870:	b580      	push	{r7, lr}
 8005872:	b086      	sub	sp, #24
 8005874:	af00      	add	r7, sp, #0
 8005876:	60f8      	str	r0, [r7, #12]
 8005878:	60b9      	str	r1, [r7, #8]
 800587a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d10a      	bne.n	8005898 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005886:	f383 8811 	msr	BASEPRI, r3
 800588a:	f3bf 8f6f 	isb	sy
 800588e:	f3bf 8f4f 	dsb	sy
 8005892:	617b      	str	r3, [r7, #20]
}
 8005894:	bf00      	nop
 8005896:	e7fe      	b.n	8005896 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005898:	4b0a      	ldr	r3, [pc, #40]	; (80058c4 <vTaskPlaceOnEventListRestricted+0x54>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	3318      	adds	r3, #24
 800589e:	4619      	mov	r1, r3
 80058a0:	68f8      	ldr	r0, [r7, #12]
 80058a2:	f7fe ff00 	bl	80046a6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d002      	beq.n	80058b2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80058ac:	f04f 33ff 	mov.w	r3, #4294967295
 80058b0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80058b2:	6879      	ldr	r1, [r7, #4]
 80058b4:	68b8      	ldr	r0, [r7, #8]
 80058b6:	f000 fa47 	bl	8005d48 <prvAddCurrentTaskToDelayedList>
	}
 80058ba:	bf00      	nop
 80058bc:	3718      	adds	r7, #24
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	bf00      	nop
 80058c4:	20000048 	.word	0x20000048

080058c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b086      	sub	sp, #24
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d10a      	bne.n	80058f4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80058de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e2:	f383 8811 	msr	BASEPRI, r3
 80058e6:	f3bf 8f6f 	isb	sy
 80058ea:	f3bf 8f4f 	dsb	sy
 80058ee:	60fb      	str	r3, [r7, #12]
}
 80058f0:	bf00      	nop
 80058f2:	e7fe      	b.n	80058f2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	3318      	adds	r3, #24
 80058f8:	4618      	mov	r0, r3
 80058fa:	f7fe ff31 	bl	8004760 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058fe:	4b1d      	ldr	r3, [pc, #116]	; (8005974 <xTaskRemoveFromEventList+0xac>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d11c      	bne.n	8005940 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	3304      	adds	r3, #4
 800590a:	4618      	mov	r0, r3
 800590c:	f7fe ff28 	bl	8004760 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005914:	2201      	movs	r2, #1
 8005916:	409a      	lsls	r2, r3
 8005918:	4b17      	ldr	r3, [pc, #92]	; (8005978 <xTaskRemoveFromEventList+0xb0>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4313      	orrs	r3, r2
 800591e:	4a16      	ldr	r2, [pc, #88]	; (8005978 <xTaskRemoveFromEventList+0xb0>)
 8005920:	6013      	str	r3, [r2, #0]
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005926:	4613      	mov	r3, r2
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	4413      	add	r3, r2
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	4a13      	ldr	r2, [pc, #76]	; (800597c <xTaskRemoveFromEventList+0xb4>)
 8005930:	441a      	add	r2, r3
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	3304      	adds	r3, #4
 8005936:	4619      	mov	r1, r3
 8005938:	4610      	mov	r0, r2
 800593a:	f7fe feb4 	bl	80046a6 <vListInsertEnd>
 800593e:	e005      	b.n	800594c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	3318      	adds	r3, #24
 8005944:	4619      	mov	r1, r3
 8005946:	480e      	ldr	r0, [pc, #56]	; (8005980 <xTaskRemoveFromEventList+0xb8>)
 8005948:	f7fe fead 	bl	80046a6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005950:	4b0c      	ldr	r3, [pc, #48]	; (8005984 <xTaskRemoveFromEventList+0xbc>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005956:	429a      	cmp	r2, r3
 8005958:	d905      	bls.n	8005966 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800595a:	2301      	movs	r3, #1
 800595c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800595e:	4b0a      	ldr	r3, [pc, #40]	; (8005988 <xTaskRemoveFromEventList+0xc0>)
 8005960:	2201      	movs	r2, #1
 8005962:	601a      	str	r2, [r3, #0]
 8005964:	e001      	b.n	800596a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005966:	2300      	movs	r3, #0
 8005968:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800596a:	697b      	ldr	r3, [r7, #20]
}
 800596c:	4618      	mov	r0, r3
 800596e:	3718      	adds	r7, #24
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}
 8005974:	20000148 	.word	0x20000148
 8005978:	20000128 	.word	0x20000128
 800597c:	2000004c 	.word	0x2000004c
 8005980:	200000e0 	.word	0x200000e0
 8005984:	20000048 	.word	0x20000048
 8005988:	20000134 	.word	0x20000134

0800598c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800598c:	b480      	push	{r7}
 800598e:	b083      	sub	sp, #12
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005994:	4b06      	ldr	r3, [pc, #24]	; (80059b0 <vTaskInternalSetTimeOutState+0x24>)
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800599c:	4b05      	ldr	r3, [pc, #20]	; (80059b4 <vTaskInternalSetTimeOutState+0x28>)
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	605a      	str	r2, [r3, #4]
}
 80059a4:	bf00      	nop
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr
 80059b0:	20000138 	.word	0x20000138
 80059b4:	20000124 	.word	0x20000124

080059b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b088      	sub	sp, #32
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d10a      	bne.n	80059de <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80059c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059cc:	f383 8811 	msr	BASEPRI, r3
 80059d0:	f3bf 8f6f 	isb	sy
 80059d4:	f3bf 8f4f 	dsb	sy
 80059d8:	613b      	str	r3, [r7, #16]
}
 80059da:	bf00      	nop
 80059dc:	e7fe      	b.n	80059dc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d10a      	bne.n	80059fa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80059e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e8:	f383 8811 	msr	BASEPRI, r3
 80059ec:	f3bf 8f6f 	isb	sy
 80059f0:	f3bf 8f4f 	dsb	sy
 80059f4:	60fb      	str	r3, [r7, #12]
}
 80059f6:	bf00      	nop
 80059f8:	e7fe      	b.n	80059f8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80059fa:	f000 fe5b 	bl	80066b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80059fe:	4b1d      	ldr	r3, [pc, #116]	; (8005a74 <xTaskCheckForTimeOut+0xbc>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	69ba      	ldr	r2, [r7, #24]
 8005a0a:	1ad3      	subs	r3, r2, r3
 8005a0c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a16:	d102      	bne.n	8005a1e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	61fb      	str	r3, [r7, #28]
 8005a1c:	e023      	b.n	8005a66 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	4b15      	ldr	r3, [pc, #84]	; (8005a78 <xTaskCheckForTimeOut+0xc0>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d007      	beq.n	8005a3a <xTaskCheckForTimeOut+0x82>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	69ba      	ldr	r2, [r7, #24]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d302      	bcc.n	8005a3a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005a34:	2301      	movs	r3, #1
 8005a36:	61fb      	str	r3, [r7, #28]
 8005a38:	e015      	b.n	8005a66 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	697a      	ldr	r2, [r7, #20]
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d20b      	bcs.n	8005a5c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	1ad2      	subs	r2, r2, r3
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f7ff ff9b 	bl	800598c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005a56:	2300      	movs	r3, #0
 8005a58:	61fb      	str	r3, [r7, #28]
 8005a5a:	e004      	b.n	8005a66 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005a62:	2301      	movs	r3, #1
 8005a64:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005a66:	f000 fe55 	bl	8006714 <vPortExitCritical>

	return xReturn;
 8005a6a:	69fb      	ldr	r3, [r7, #28]
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3720      	adds	r7, #32
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	20000124 	.word	0x20000124
 8005a78:	20000138 	.word	0x20000138

08005a7c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005a80:	4b03      	ldr	r3, [pc, #12]	; (8005a90 <vTaskMissedYield+0x14>)
 8005a82:	2201      	movs	r2, #1
 8005a84:	601a      	str	r2, [r3, #0]
}
 8005a86:	bf00      	nop
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr
 8005a90:	20000134 	.word	0x20000134

08005a94 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b082      	sub	sp, #8
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005a9c:	f000 f852 	bl	8005b44 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005aa0:	4b06      	ldr	r3, [pc, #24]	; (8005abc <prvIdleTask+0x28>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d9f9      	bls.n	8005a9c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005aa8:	4b05      	ldr	r3, [pc, #20]	; (8005ac0 <prvIdleTask+0x2c>)
 8005aaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005aae:	601a      	str	r2, [r3, #0]
 8005ab0:	f3bf 8f4f 	dsb	sy
 8005ab4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005ab8:	e7f0      	b.n	8005a9c <prvIdleTask+0x8>
 8005aba:	bf00      	nop
 8005abc:	2000004c 	.word	0x2000004c
 8005ac0:	e000ed04 	.word	0xe000ed04

08005ac4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b082      	sub	sp, #8
 8005ac8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005aca:	2300      	movs	r3, #0
 8005acc:	607b      	str	r3, [r7, #4]
 8005ace:	e00c      	b.n	8005aea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	4613      	mov	r3, r2
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	4413      	add	r3, r2
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	4a12      	ldr	r2, [pc, #72]	; (8005b24 <prvInitialiseTaskLists+0x60>)
 8005adc:	4413      	add	r3, r2
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f7fe fdb4 	bl	800464c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	607b      	str	r3, [r7, #4]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2b04      	cmp	r3, #4
 8005aee:	d9ef      	bls.n	8005ad0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005af0:	480d      	ldr	r0, [pc, #52]	; (8005b28 <prvInitialiseTaskLists+0x64>)
 8005af2:	f7fe fdab 	bl	800464c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005af6:	480d      	ldr	r0, [pc, #52]	; (8005b2c <prvInitialiseTaskLists+0x68>)
 8005af8:	f7fe fda8 	bl	800464c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005afc:	480c      	ldr	r0, [pc, #48]	; (8005b30 <prvInitialiseTaskLists+0x6c>)
 8005afe:	f7fe fda5 	bl	800464c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005b02:	480c      	ldr	r0, [pc, #48]	; (8005b34 <prvInitialiseTaskLists+0x70>)
 8005b04:	f7fe fda2 	bl	800464c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005b08:	480b      	ldr	r0, [pc, #44]	; (8005b38 <prvInitialiseTaskLists+0x74>)
 8005b0a:	f7fe fd9f 	bl	800464c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005b0e:	4b0b      	ldr	r3, [pc, #44]	; (8005b3c <prvInitialiseTaskLists+0x78>)
 8005b10:	4a05      	ldr	r2, [pc, #20]	; (8005b28 <prvInitialiseTaskLists+0x64>)
 8005b12:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005b14:	4b0a      	ldr	r3, [pc, #40]	; (8005b40 <prvInitialiseTaskLists+0x7c>)
 8005b16:	4a05      	ldr	r2, [pc, #20]	; (8005b2c <prvInitialiseTaskLists+0x68>)
 8005b18:	601a      	str	r2, [r3, #0]
}
 8005b1a:	bf00      	nop
 8005b1c:	3708      	adds	r7, #8
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	2000004c 	.word	0x2000004c
 8005b28:	200000b0 	.word	0x200000b0
 8005b2c:	200000c4 	.word	0x200000c4
 8005b30:	200000e0 	.word	0x200000e0
 8005b34:	200000f4 	.word	0x200000f4
 8005b38:	2000010c 	.word	0x2000010c
 8005b3c:	200000d8 	.word	0x200000d8
 8005b40:	200000dc 	.word	0x200000dc

08005b44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b082      	sub	sp, #8
 8005b48:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b4a:	e019      	b.n	8005b80 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005b4c:	f000 fdb2 	bl	80066b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b50:	4b10      	ldr	r3, [pc, #64]	; (8005b94 <prvCheckTasksWaitingTermination+0x50>)
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	3304      	adds	r3, #4
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f7fe fdff 	bl	8004760 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005b62:	4b0d      	ldr	r3, [pc, #52]	; (8005b98 <prvCheckTasksWaitingTermination+0x54>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	3b01      	subs	r3, #1
 8005b68:	4a0b      	ldr	r2, [pc, #44]	; (8005b98 <prvCheckTasksWaitingTermination+0x54>)
 8005b6a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005b6c:	4b0b      	ldr	r3, [pc, #44]	; (8005b9c <prvCheckTasksWaitingTermination+0x58>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	3b01      	subs	r3, #1
 8005b72:	4a0a      	ldr	r2, [pc, #40]	; (8005b9c <prvCheckTasksWaitingTermination+0x58>)
 8005b74:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005b76:	f000 fdcd 	bl	8006714 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 f810 	bl	8005ba0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b80:	4b06      	ldr	r3, [pc, #24]	; (8005b9c <prvCheckTasksWaitingTermination+0x58>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d1e1      	bne.n	8005b4c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005b88:	bf00      	nop
 8005b8a:	bf00      	nop
 8005b8c:	3708      	adds	r7, #8
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
 8005b92:	bf00      	nop
 8005b94:	200000f4 	.word	0x200000f4
 8005b98:	20000120 	.word	0x20000120
 8005b9c:	20000108 	.word	0x20000108

08005ba0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b082      	sub	sp, #8
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bac:	4618      	mov	r0, r3
 8005bae:	f000 ff67 	bl	8006a80 <vPortFree>
			vPortFree( pxTCB );
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 ff64 	bl	8006a80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005bb8:	bf00      	nop
 8005bba:	3708      	adds	r7, #8
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b083      	sub	sp, #12
 8005bc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005bc6:	4b0c      	ldr	r3, [pc, #48]	; (8005bf8 <prvResetNextTaskUnblockTime+0x38>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d104      	bne.n	8005bda <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005bd0:	4b0a      	ldr	r3, [pc, #40]	; (8005bfc <prvResetNextTaskUnblockTime+0x3c>)
 8005bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8005bd6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005bd8:	e008      	b.n	8005bec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bda:	4b07      	ldr	r3, [pc, #28]	; (8005bf8 <prvResetNextTaskUnblockTime+0x38>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	68db      	ldr	r3, [r3, #12]
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	4a04      	ldr	r2, [pc, #16]	; (8005bfc <prvResetNextTaskUnblockTime+0x3c>)
 8005bea:	6013      	str	r3, [r2, #0]
}
 8005bec:	bf00      	nop
 8005bee:	370c      	adds	r7, #12
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr
 8005bf8:	200000d8 	.word	0x200000d8
 8005bfc:	20000140 	.word	0x20000140

08005c00 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005c06:	4b0b      	ldr	r3, [pc, #44]	; (8005c34 <xTaskGetSchedulerState+0x34>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d102      	bne.n	8005c14 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	607b      	str	r3, [r7, #4]
 8005c12:	e008      	b.n	8005c26 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c14:	4b08      	ldr	r3, [pc, #32]	; (8005c38 <xTaskGetSchedulerState+0x38>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d102      	bne.n	8005c22 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005c1c:	2302      	movs	r3, #2
 8005c1e:	607b      	str	r3, [r7, #4]
 8005c20:	e001      	b.n	8005c26 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005c22:	2300      	movs	r3, #0
 8005c24:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005c26:	687b      	ldr	r3, [r7, #4]
	}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	370c      	adds	r7, #12
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr
 8005c34:	2000012c 	.word	0x2000012c
 8005c38:	20000148 	.word	0x20000148

08005c3c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b086      	sub	sp, #24
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d06e      	beq.n	8005d30 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005c52:	4b3a      	ldr	r3, [pc, #232]	; (8005d3c <xTaskPriorityDisinherit+0x100>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	693a      	ldr	r2, [r7, #16]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d00a      	beq.n	8005c72 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c60:	f383 8811 	msr	BASEPRI, r3
 8005c64:	f3bf 8f6f 	isb	sy
 8005c68:	f3bf 8f4f 	dsb	sy
 8005c6c:	60fb      	str	r3, [r7, #12]
}
 8005c6e:	bf00      	nop
 8005c70:	e7fe      	b.n	8005c70 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d10a      	bne.n	8005c90 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c7e:	f383 8811 	msr	BASEPRI, r3
 8005c82:	f3bf 8f6f 	isb	sy
 8005c86:	f3bf 8f4f 	dsb	sy
 8005c8a:	60bb      	str	r3, [r7, #8]
}
 8005c8c:	bf00      	nop
 8005c8e:	e7fe      	b.n	8005c8e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c94:	1e5a      	subs	r2, r3, #1
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d044      	beq.n	8005d30 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d140      	bne.n	8005d30 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	3304      	adds	r3, #4
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f7fe fd54 	bl	8004760 <uxListRemove>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d115      	bne.n	8005cea <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cc2:	491f      	ldr	r1, [pc, #124]	; (8005d40 <xTaskPriorityDisinherit+0x104>)
 8005cc4:	4613      	mov	r3, r2
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	4413      	add	r3, r2
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	440b      	add	r3, r1
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d10a      	bne.n	8005cea <xTaskPriorityDisinherit+0xae>
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd8:	2201      	movs	r2, #1
 8005cda:	fa02 f303 	lsl.w	r3, r2, r3
 8005cde:	43da      	mvns	r2, r3
 8005ce0:	4b18      	ldr	r3, [pc, #96]	; (8005d44 <xTaskPriorityDisinherit+0x108>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	4a17      	ldr	r2, [pc, #92]	; (8005d44 <xTaskPriorityDisinherit+0x108>)
 8005ce8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf6:	f1c3 0205 	rsb	r2, r3, #5
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d02:	2201      	movs	r2, #1
 8005d04:	409a      	lsls	r2, r3
 8005d06:	4b0f      	ldr	r3, [pc, #60]	; (8005d44 <xTaskPriorityDisinherit+0x108>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	4a0d      	ldr	r2, [pc, #52]	; (8005d44 <xTaskPriorityDisinherit+0x108>)
 8005d0e:	6013      	str	r3, [r2, #0]
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d14:	4613      	mov	r3, r2
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	4413      	add	r3, r2
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	4a08      	ldr	r2, [pc, #32]	; (8005d40 <xTaskPriorityDisinherit+0x104>)
 8005d1e:	441a      	add	r2, r3
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	3304      	adds	r3, #4
 8005d24:	4619      	mov	r1, r3
 8005d26:	4610      	mov	r0, r2
 8005d28:	f7fe fcbd 	bl	80046a6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005d30:	697b      	ldr	r3, [r7, #20]
	}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3718      	adds	r7, #24
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	bf00      	nop
 8005d3c:	20000048 	.word	0x20000048
 8005d40:	2000004c 	.word	0x2000004c
 8005d44:	20000128 	.word	0x20000128

08005d48 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005d52:	4b29      	ldr	r3, [pc, #164]	; (8005df8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d58:	4b28      	ldr	r3, [pc, #160]	; (8005dfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	3304      	adds	r3, #4
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f7fe fcfe 	bl	8004760 <uxListRemove>
 8005d64:	4603      	mov	r3, r0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d10b      	bne.n	8005d82 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005d6a:	4b24      	ldr	r3, [pc, #144]	; (8005dfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d70:	2201      	movs	r2, #1
 8005d72:	fa02 f303 	lsl.w	r3, r2, r3
 8005d76:	43da      	mvns	r2, r3
 8005d78:	4b21      	ldr	r3, [pc, #132]	; (8005e00 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	4a20      	ldr	r2, [pc, #128]	; (8005e00 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005d80:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d88:	d10a      	bne.n	8005da0 <prvAddCurrentTaskToDelayedList+0x58>
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d007      	beq.n	8005da0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d90:	4b1a      	ldr	r3, [pc, #104]	; (8005dfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	3304      	adds	r3, #4
 8005d96:	4619      	mov	r1, r3
 8005d98:	481a      	ldr	r0, [pc, #104]	; (8005e04 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005d9a:	f7fe fc84 	bl	80046a6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005d9e:	e026      	b.n	8005dee <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005da0:	68fa      	ldr	r2, [r7, #12]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4413      	add	r3, r2
 8005da6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005da8:	4b14      	ldr	r3, [pc, #80]	; (8005dfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	68ba      	ldr	r2, [r7, #8]
 8005dae:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005db0:	68ba      	ldr	r2, [r7, #8]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d209      	bcs.n	8005dcc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005db8:	4b13      	ldr	r3, [pc, #76]	; (8005e08 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	4b0f      	ldr	r3, [pc, #60]	; (8005dfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	3304      	adds	r3, #4
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	4610      	mov	r0, r2
 8005dc6:	f7fe fc92 	bl	80046ee <vListInsert>
}
 8005dca:	e010      	b.n	8005dee <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005dcc:	4b0f      	ldr	r3, [pc, #60]	; (8005e0c <prvAddCurrentTaskToDelayedList+0xc4>)
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	4b0a      	ldr	r3, [pc, #40]	; (8005dfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	3304      	adds	r3, #4
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	4610      	mov	r0, r2
 8005dda:	f7fe fc88 	bl	80046ee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005dde:	4b0c      	ldr	r3, [pc, #48]	; (8005e10 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	68ba      	ldr	r2, [r7, #8]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d202      	bcs.n	8005dee <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005de8:	4a09      	ldr	r2, [pc, #36]	; (8005e10 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	6013      	str	r3, [r2, #0]
}
 8005dee:	bf00      	nop
 8005df0:	3710      	adds	r7, #16
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	20000124 	.word	0x20000124
 8005dfc:	20000048 	.word	0x20000048
 8005e00:	20000128 	.word	0x20000128
 8005e04:	2000010c 	.word	0x2000010c
 8005e08:	200000dc 	.word	0x200000dc
 8005e0c:	200000d8 	.word	0x200000d8
 8005e10:	20000140 	.word	0x20000140

08005e14 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005e1e:	f000 fad5 	bl	80063cc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005e22:	4b11      	ldr	r3, [pc, #68]	; (8005e68 <xTimerCreateTimerTask+0x54>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d00b      	beq.n	8005e42 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8005e2a:	4b10      	ldr	r3, [pc, #64]	; (8005e6c <xTimerCreateTimerTask+0x58>)
 8005e2c:	9301      	str	r3, [sp, #4]
 8005e2e:	2302      	movs	r3, #2
 8005e30:	9300      	str	r3, [sp, #0]
 8005e32:	2300      	movs	r3, #0
 8005e34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005e38:	490d      	ldr	r1, [pc, #52]	; (8005e70 <xTimerCreateTimerTask+0x5c>)
 8005e3a:	480e      	ldr	r0, [pc, #56]	; (8005e74 <xTimerCreateTimerTask+0x60>)
 8005e3c:	f7ff f966 	bl	800510c <xTaskCreate>
 8005e40:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d10a      	bne.n	8005e5e <xTimerCreateTimerTask+0x4a>
	__asm volatile
 8005e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e4c:	f383 8811 	msr	BASEPRI, r3
 8005e50:	f3bf 8f6f 	isb	sy
 8005e54:	f3bf 8f4f 	dsb	sy
 8005e58:	603b      	str	r3, [r7, #0]
}
 8005e5a:	bf00      	nop
 8005e5c:	e7fe      	b.n	8005e5c <xTimerCreateTimerTask+0x48>
	return xReturn;
 8005e5e:	687b      	ldr	r3, [r7, #4]
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3708      	adds	r7, #8
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}
 8005e68:	2000017c 	.word	0x2000017c
 8005e6c:	20000180 	.word	0x20000180
 8005e70:	08006d80 	.word	0x08006d80
 8005e74:	08005fad 	.word	0x08005fad

08005e78 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b08a      	sub	sp, #40	; 0x28
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	607a      	str	r2, [r7, #4]
 8005e84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005e86:	2300      	movs	r3, #0
 8005e88:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d10a      	bne.n	8005ea6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e94:	f383 8811 	msr	BASEPRI, r3
 8005e98:	f3bf 8f6f 	isb	sy
 8005e9c:	f3bf 8f4f 	dsb	sy
 8005ea0:	623b      	str	r3, [r7, #32]
}
 8005ea2:	bf00      	nop
 8005ea4:	e7fe      	b.n	8005ea4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005ea6:	4b1a      	ldr	r3, [pc, #104]	; (8005f10 <xTimerGenericCommand+0x98>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d02a      	beq.n	8005f04 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	2b05      	cmp	r3, #5
 8005ebe:	dc18      	bgt.n	8005ef2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005ec0:	f7ff fe9e 	bl	8005c00 <xTaskGetSchedulerState>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b02      	cmp	r3, #2
 8005ec8:	d109      	bne.n	8005ede <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005eca:	4b11      	ldr	r3, [pc, #68]	; (8005f10 <xTimerGenericCommand+0x98>)
 8005ecc:	6818      	ldr	r0, [r3, #0]
 8005ece:	f107 0114 	add.w	r1, r7, #20
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ed6:	f7fe fd35 	bl	8004944 <xQueueGenericSend>
 8005eda:	6278      	str	r0, [r7, #36]	; 0x24
 8005edc:	e012      	b.n	8005f04 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005ede:	4b0c      	ldr	r3, [pc, #48]	; (8005f10 <xTimerGenericCommand+0x98>)
 8005ee0:	6818      	ldr	r0, [r3, #0]
 8005ee2:	f107 0114 	add.w	r1, r7, #20
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f7fe fd2b 	bl	8004944 <xQueueGenericSend>
 8005eee:	6278      	str	r0, [r7, #36]	; 0x24
 8005ef0:	e008      	b.n	8005f04 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005ef2:	4b07      	ldr	r3, [pc, #28]	; (8005f10 <xTimerGenericCommand+0x98>)
 8005ef4:	6818      	ldr	r0, [r3, #0]
 8005ef6:	f107 0114 	add.w	r1, r7, #20
 8005efa:	2300      	movs	r3, #0
 8005efc:	683a      	ldr	r2, [r7, #0]
 8005efe:	f7fe fe1f 	bl	8004b40 <xQueueGenericSendFromISR>
 8005f02:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3728      	adds	r7, #40	; 0x28
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}
 8005f0e:	bf00      	nop
 8005f10:	2000017c 	.word	0x2000017c

08005f14 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b088      	sub	sp, #32
 8005f18:	af02      	add	r7, sp, #8
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f1e:	4b22      	ldr	r3, [pc, #136]	; (8005fa8 <prvProcessExpiredTimer+0x94>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	3304      	adds	r3, #4
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f7fe fc17 	bl	8004760 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f38:	f003 0304 	and.w	r3, r3, #4
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d022      	beq.n	8005f86 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	699a      	ldr	r2, [r3, #24]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	18d1      	adds	r1, r2, r3
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	683a      	ldr	r2, [r7, #0]
 8005f4c:	6978      	ldr	r0, [r7, #20]
 8005f4e:	f000 f8d1 	bl	80060f4 <prvInsertTimerInActiveList>
 8005f52:	4603      	mov	r3, r0
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d01f      	beq.n	8005f98 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005f58:	2300      	movs	r3, #0
 8005f5a:	9300      	str	r3, [sp, #0]
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	2100      	movs	r1, #0
 8005f62:	6978      	ldr	r0, [r7, #20]
 8005f64:	f7ff ff88 	bl	8005e78 <xTimerGenericCommand>
 8005f68:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d113      	bne.n	8005f98 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f74:	f383 8811 	msr	BASEPRI, r3
 8005f78:	f3bf 8f6f 	isb	sy
 8005f7c:	f3bf 8f4f 	dsb	sy
 8005f80:	60fb      	str	r3, [r7, #12]
}
 8005f82:	bf00      	nop
 8005f84:	e7fe      	b.n	8005f84 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f8c:	f023 0301 	bic.w	r3, r3, #1
 8005f90:	b2da      	uxtb	r2, r3
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	6a1b      	ldr	r3, [r3, #32]
 8005f9c:	6978      	ldr	r0, [r7, #20]
 8005f9e:	4798      	blx	r3
}
 8005fa0:	bf00      	nop
 8005fa2:	3718      	adds	r7, #24
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	20000174 	.word	0x20000174

08005fac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b084      	sub	sp, #16
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005fb4:	f107 0308 	add.w	r3, r7, #8
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f000 f857 	bl	800606c <prvGetNextExpireTime>
 8005fbe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	68f8      	ldr	r0, [r7, #12]
 8005fc6:	f000 f803 	bl	8005fd0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005fca:	f000 f8d5 	bl	8006178 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005fce:	e7f1      	b.n	8005fb4 <prvTimerTask+0x8>

08005fd0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b084      	sub	sp, #16
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005fda:	f7ff fa57 	bl	800548c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005fde:	f107 0308 	add.w	r3, r7, #8
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f000 f866 	bl	80060b4 <prvSampleTimeNow>
 8005fe8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d130      	bne.n	8006052 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d10a      	bne.n	800600c <prvProcessTimerOrBlockTask+0x3c>
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d806      	bhi.n	800600c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005ffe:	f7ff fa53 	bl	80054a8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006002:	68f9      	ldr	r1, [r7, #12]
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f7ff ff85 	bl	8005f14 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800600a:	e024      	b.n	8006056 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d008      	beq.n	8006024 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006012:	4b13      	ldr	r3, [pc, #76]	; (8006060 <prvProcessTimerOrBlockTask+0x90>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d101      	bne.n	8006020 <prvProcessTimerOrBlockTask+0x50>
 800601c:	2301      	movs	r3, #1
 800601e:	e000      	b.n	8006022 <prvProcessTimerOrBlockTask+0x52>
 8006020:	2300      	movs	r3, #0
 8006022:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006024:	4b0f      	ldr	r3, [pc, #60]	; (8006064 <prvProcessTimerOrBlockTask+0x94>)
 8006026:	6818      	ldr	r0, [r3, #0]
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	1ad3      	subs	r3, r2, r3
 800602e:	683a      	ldr	r2, [r7, #0]
 8006030:	4619      	mov	r1, r3
 8006032:	f7ff f837 	bl	80050a4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006036:	f7ff fa37 	bl	80054a8 <xTaskResumeAll>
 800603a:	4603      	mov	r3, r0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d10a      	bne.n	8006056 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006040:	4b09      	ldr	r3, [pc, #36]	; (8006068 <prvProcessTimerOrBlockTask+0x98>)
 8006042:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006046:	601a      	str	r2, [r3, #0]
 8006048:	f3bf 8f4f 	dsb	sy
 800604c:	f3bf 8f6f 	isb	sy
}
 8006050:	e001      	b.n	8006056 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006052:	f7ff fa29 	bl	80054a8 <xTaskResumeAll>
}
 8006056:	bf00      	nop
 8006058:	3710      	adds	r7, #16
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
 800605e:	bf00      	nop
 8006060:	20000178 	.word	0x20000178
 8006064:	2000017c 	.word	0x2000017c
 8006068:	e000ed04 	.word	0xe000ed04

0800606c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800606c:	b480      	push	{r7}
 800606e:	b085      	sub	sp, #20
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006074:	4b0e      	ldr	r3, [pc, #56]	; (80060b0 <prvGetNextExpireTime+0x44>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d101      	bne.n	8006082 <prvGetNextExpireTime+0x16>
 800607e:	2201      	movs	r2, #1
 8006080:	e000      	b.n	8006084 <prvGetNextExpireTime+0x18>
 8006082:	2200      	movs	r2, #0
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d105      	bne.n	800609c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006090:	4b07      	ldr	r3, [pc, #28]	; (80060b0 <prvGetNextExpireTime+0x44>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	60fb      	str	r3, [r7, #12]
 800609a:	e001      	b.n	80060a0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800609c:	2300      	movs	r3, #0
 800609e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80060a0:	68fb      	ldr	r3, [r7, #12]
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3714      	adds	r7, #20
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr
 80060ae:	bf00      	nop
 80060b0:	20000174 	.word	0x20000174

080060b4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b084      	sub	sp, #16
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80060bc:	f7ff fa90 	bl	80055e0 <xTaskGetTickCount>
 80060c0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80060c2:	4b0b      	ldr	r3, [pc, #44]	; (80060f0 <prvSampleTimeNow+0x3c>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	68fa      	ldr	r2, [r7, #12]
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d205      	bcs.n	80060d8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80060cc:	f000 f91a 	bl	8006304 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	601a      	str	r2, [r3, #0]
 80060d6:	e002      	b.n	80060de <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80060de:	4a04      	ldr	r2, [pc, #16]	; (80060f0 <prvSampleTimeNow+0x3c>)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80060e4:	68fb      	ldr	r3, [r7, #12]
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3710      	adds	r7, #16
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	bf00      	nop
 80060f0:	20000184 	.word	0x20000184

080060f4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b086      	sub	sp, #24
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	607a      	str	r2, [r7, #4]
 8006100:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006102:	2300      	movs	r3, #0
 8006104:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	68ba      	ldr	r2, [r7, #8]
 800610a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	68fa      	ldr	r2, [r7, #12]
 8006110:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006112:	68ba      	ldr	r2, [r7, #8]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	429a      	cmp	r2, r3
 8006118:	d812      	bhi.n	8006140 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	1ad2      	subs	r2, r2, r3
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	699b      	ldr	r3, [r3, #24]
 8006124:	429a      	cmp	r2, r3
 8006126:	d302      	bcc.n	800612e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006128:	2301      	movs	r3, #1
 800612a:	617b      	str	r3, [r7, #20]
 800612c:	e01b      	b.n	8006166 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800612e:	4b10      	ldr	r3, [pc, #64]	; (8006170 <prvInsertTimerInActiveList+0x7c>)
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	3304      	adds	r3, #4
 8006136:	4619      	mov	r1, r3
 8006138:	4610      	mov	r0, r2
 800613a:	f7fe fad8 	bl	80046ee <vListInsert>
 800613e:	e012      	b.n	8006166 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	429a      	cmp	r2, r3
 8006146:	d206      	bcs.n	8006156 <prvInsertTimerInActiveList+0x62>
 8006148:	68ba      	ldr	r2, [r7, #8]
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	429a      	cmp	r2, r3
 800614e:	d302      	bcc.n	8006156 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006150:	2301      	movs	r3, #1
 8006152:	617b      	str	r3, [r7, #20]
 8006154:	e007      	b.n	8006166 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006156:	4b07      	ldr	r3, [pc, #28]	; (8006174 <prvInsertTimerInActiveList+0x80>)
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	3304      	adds	r3, #4
 800615e:	4619      	mov	r1, r3
 8006160:	4610      	mov	r0, r2
 8006162:	f7fe fac4 	bl	80046ee <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006166:	697b      	ldr	r3, [r7, #20]
}
 8006168:	4618      	mov	r0, r3
 800616a:	3718      	adds	r7, #24
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}
 8006170:	20000178 	.word	0x20000178
 8006174:	20000174 	.word	0x20000174

08006178 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b08c      	sub	sp, #48	; 0x30
 800617c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800617e:	e0ae      	b.n	80062de <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	2b00      	cmp	r3, #0
 8006184:	f2c0 80aa 	blt.w	80062dc <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800618c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618e:	695b      	ldr	r3, [r3, #20]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d004      	beq.n	800619e <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006196:	3304      	adds	r3, #4
 8006198:	4618      	mov	r0, r3
 800619a:	f7fe fae1 	bl	8004760 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800619e:	1d3b      	adds	r3, r7, #4
 80061a0:	4618      	mov	r0, r3
 80061a2:	f7ff ff87 	bl	80060b4 <prvSampleTimeNow>
 80061a6:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	2b09      	cmp	r3, #9
 80061ac:	f200 8097 	bhi.w	80062de <prvProcessReceivedCommands+0x166>
 80061b0:	a201      	add	r2, pc, #4	; (adr r2, 80061b8 <prvProcessReceivedCommands+0x40>)
 80061b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b6:	bf00      	nop
 80061b8:	080061e1 	.word	0x080061e1
 80061bc:	080061e1 	.word	0x080061e1
 80061c0:	080061e1 	.word	0x080061e1
 80061c4:	08006255 	.word	0x08006255
 80061c8:	08006269 	.word	0x08006269
 80061cc:	080062b3 	.word	0x080062b3
 80061d0:	080061e1 	.word	0x080061e1
 80061d4:	080061e1 	.word	0x080061e1
 80061d8:	08006255 	.word	0x08006255
 80061dc:	08006269 	.word	0x08006269
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80061e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061e6:	f043 0301 	orr.w	r3, r3, #1
 80061ea:	b2da      	uxtb	r2, r3
 80061ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80061f2:	68fa      	ldr	r2, [r7, #12]
 80061f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f6:	699b      	ldr	r3, [r3, #24]
 80061f8:	18d1      	adds	r1, r2, r3
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	6a3a      	ldr	r2, [r7, #32]
 80061fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006200:	f7ff ff78 	bl	80060f4 <prvInsertTimerInActiveList>
 8006204:	4603      	mov	r3, r0
 8006206:	2b00      	cmp	r3, #0
 8006208:	d069      	beq.n	80062de <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800620a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620c:	6a1b      	ldr	r3, [r3, #32]
 800620e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006210:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006214:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006218:	f003 0304 	and.w	r3, r3, #4
 800621c:	2b00      	cmp	r3, #0
 800621e:	d05e      	beq.n	80062de <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006220:	68fa      	ldr	r2, [r7, #12]
 8006222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006224:	699b      	ldr	r3, [r3, #24]
 8006226:	441a      	add	r2, r3
 8006228:	2300      	movs	r3, #0
 800622a:	9300      	str	r3, [sp, #0]
 800622c:	2300      	movs	r3, #0
 800622e:	2100      	movs	r1, #0
 8006230:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006232:	f7ff fe21 	bl	8005e78 <xTimerGenericCommand>
 8006236:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d14f      	bne.n	80062de <prvProcessReceivedCommands+0x166>
	__asm volatile
 800623e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006242:	f383 8811 	msr	BASEPRI, r3
 8006246:	f3bf 8f6f 	isb	sy
 800624a:	f3bf 8f4f 	dsb	sy
 800624e:	61bb      	str	r3, [r7, #24]
}
 8006250:	bf00      	nop
 8006252:	e7fe      	b.n	8006252 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006256:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800625a:	f023 0301 	bic.w	r3, r3, #1
 800625e:	b2da      	uxtb	r2, r3
 8006260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006262:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006266:	e03a      	b.n	80062de <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800626e:	f043 0301 	orr.w	r3, r3, #1
 8006272:	b2da      	uxtb	r2, r3
 8006274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006276:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800627a:	68fa      	ldr	r2, [r7, #12]
 800627c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006282:	699b      	ldr	r3, [r3, #24]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d10a      	bne.n	800629e <prvProcessReceivedCommands+0x126>
	__asm volatile
 8006288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800628c:	f383 8811 	msr	BASEPRI, r3
 8006290:	f3bf 8f6f 	isb	sy
 8006294:	f3bf 8f4f 	dsb	sy
 8006298:	617b      	str	r3, [r7, #20]
}
 800629a:	bf00      	nop
 800629c:	e7fe      	b.n	800629c <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800629e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a0:	699a      	ldr	r2, [r3, #24]
 80062a2:	6a3b      	ldr	r3, [r7, #32]
 80062a4:	18d1      	adds	r1, r2, r3
 80062a6:	6a3b      	ldr	r3, [r7, #32]
 80062a8:	6a3a      	ldr	r2, [r7, #32]
 80062aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80062ac:	f7ff ff22 	bl	80060f4 <prvInsertTimerInActiveList>
					break;
 80062b0:	e015      	b.n	80062de <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80062b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062b8:	f003 0302 	and.w	r3, r3, #2
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d103      	bne.n	80062c8 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 80062c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80062c2:	f000 fbdd 	bl	8006a80 <vPortFree>
 80062c6:	e00a      	b.n	80062de <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80062c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062ce:	f023 0301 	bic.w	r3, r3, #1
 80062d2:	b2da      	uxtb	r2, r3
 80062d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80062da:	e000      	b.n	80062de <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80062dc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80062de:	4b08      	ldr	r3, [pc, #32]	; (8006300 <prvProcessReceivedCommands+0x188>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f107 0108 	add.w	r1, r7, #8
 80062e6:	2200      	movs	r2, #0
 80062e8:	4618      	mov	r0, r3
 80062ea:	f7fe fcc1 	bl	8004c70 <xQueueReceive>
 80062ee:	4603      	mov	r3, r0
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	f47f af45 	bne.w	8006180 <prvProcessReceivedCommands+0x8>
	}
}
 80062f6:	bf00      	nop
 80062f8:	bf00      	nop
 80062fa:	3728      	adds	r7, #40	; 0x28
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}
 8006300:	2000017c 	.word	0x2000017c

08006304 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b088      	sub	sp, #32
 8006308:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800630a:	e048      	b.n	800639e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800630c:	4b2d      	ldr	r3, [pc, #180]	; (80063c4 <prvSwitchTimerLists+0xc0>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	68db      	ldr	r3, [r3, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006316:	4b2b      	ldr	r3, [pc, #172]	; (80063c4 <prvSwitchTimerLists+0xc0>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	68db      	ldr	r3, [r3, #12]
 800631e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	3304      	adds	r3, #4
 8006324:	4618      	mov	r0, r3
 8006326:	f7fe fa1b 	bl	8004760 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	6a1b      	ldr	r3, [r3, #32]
 800632e:	68f8      	ldr	r0, [r7, #12]
 8006330:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006338:	f003 0304 	and.w	r3, r3, #4
 800633c:	2b00      	cmp	r3, #0
 800633e:	d02e      	beq.n	800639e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	699b      	ldr	r3, [r3, #24]
 8006344:	693a      	ldr	r2, [r7, #16]
 8006346:	4413      	add	r3, r2
 8006348:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800634a:	68ba      	ldr	r2, [r7, #8]
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	429a      	cmp	r2, r3
 8006350:	d90e      	bls.n	8006370 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	68ba      	ldr	r2, [r7, #8]
 8006356:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	68fa      	ldr	r2, [r7, #12]
 800635c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800635e:	4b19      	ldr	r3, [pc, #100]	; (80063c4 <prvSwitchTimerLists+0xc0>)
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	3304      	adds	r3, #4
 8006366:	4619      	mov	r1, r3
 8006368:	4610      	mov	r0, r2
 800636a:	f7fe f9c0 	bl	80046ee <vListInsert>
 800636e:	e016      	b.n	800639e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006370:	2300      	movs	r3, #0
 8006372:	9300      	str	r3, [sp, #0]
 8006374:	2300      	movs	r3, #0
 8006376:	693a      	ldr	r2, [r7, #16]
 8006378:	2100      	movs	r1, #0
 800637a:	68f8      	ldr	r0, [r7, #12]
 800637c:	f7ff fd7c 	bl	8005e78 <xTimerGenericCommand>
 8006380:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d10a      	bne.n	800639e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800638c:	f383 8811 	msr	BASEPRI, r3
 8006390:	f3bf 8f6f 	isb	sy
 8006394:	f3bf 8f4f 	dsb	sy
 8006398:	603b      	str	r3, [r7, #0]
}
 800639a:	bf00      	nop
 800639c:	e7fe      	b.n	800639c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800639e:	4b09      	ldr	r3, [pc, #36]	; (80063c4 <prvSwitchTimerLists+0xc0>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d1b1      	bne.n	800630c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80063a8:	4b06      	ldr	r3, [pc, #24]	; (80063c4 <prvSwitchTimerLists+0xc0>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80063ae:	4b06      	ldr	r3, [pc, #24]	; (80063c8 <prvSwitchTimerLists+0xc4>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a04      	ldr	r2, [pc, #16]	; (80063c4 <prvSwitchTimerLists+0xc0>)
 80063b4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80063b6:	4a04      	ldr	r2, [pc, #16]	; (80063c8 <prvSwitchTimerLists+0xc4>)
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	6013      	str	r3, [r2, #0]
}
 80063bc:	bf00      	nop
 80063be:	3718      	adds	r7, #24
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}
 80063c4:	20000174 	.word	0x20000174
 80063c8:	20000178 	.word	0x20000178

080063cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80063d0:	f000 f970 	bl	80066b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80063d4:	4b12      	ldr	r3, [pc, #72]	; (8006420 <prvCheckForValidListAndQueue+0x54>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d11d      	bne.n	8006418 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 80063dc:	4811      	ldr	r0, [pc, #68]	; (8006424 <prvCheckForValidListAndQueue+0x58>)
 80063de:	f7fe f935 	bl	800464c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80063e2:	4811      	ldr	r0, [pc, #68]	; (8006428 <prvCheckForValidListAndQueue+0x5c>)
 80063e4:	f7fe f932 	bl	800464c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80063e8:	4b10      	ldr	r3, [pc, #64]	; (800642c <prvCheckForValidListAndQueue+0x60>)
 80063ea:	4a0e      	ldr	r2, [pc, #56]	; (8006424 <prvCheckForValidListAndQueue+0x58>)
 80063ec:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80063ee:	4b10      	ldr	r3, [pc, #64]	; (8006430 <prvCheckForValidListAndQueue+0x64>)
 80063f0:	4a0d      	ldr	r2, [pc, #52]	; (8006428 <prvCheckForValidListAndQueue+0x5c>)
 80063f2:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80063f4:	2200      	movs	r2, #0
 80063f6:	210c      	movs	r1, #12
 80063f8:	200a      	movs	r0, #10
 80063fa:	f7fe fa43 	bl	8004884 <xQueueGenericCreate>
 80063fe:	4603      	mov	r3, r0
 8006400:	4a07      	ldr	r2, [pc, #28]	; (8006420 <prvCheckForValidListAndQueue+0x54>)
 8006402:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006404:	4b06      	ldr	r3, [pc, #24]	; (8006420 <prvCheckForValidListAndQueue+0x54>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d005      	beq.n	8006418 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800640c:	4b04      	ldr	r3, [pc, #16]	; (8006420 <prvCheckForValidListAndQueue+0x54>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4908      	ldr	r1, [pc, #32]	; (8006434 <prvCheckForValidListAndQueue+0x68>)
 8006412:	4618      	mov	r0, r3
 8006414:	f7fe fe1c 	bl	8005050 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006418:	f000 f97c 	bl	8006714 <vPortExitCritical>
}
 800641c:	bf00      	nop
 800641e:	bd80      	pop	{r7, pc}
 8006420:	2000017c 	.word	0x2000017c
 8006424:	2000014c 	.word	0x2000014c
 8006428:	20000160 	.word	0x20000160
 800642c:	20000174 	.word	0x20000174
 8006430:	20000178 	.word	0x20000178
 8006434:	08006d88 	.word	0x08006d88

08006438 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006438:	b480      	push	{r7}
 800643a:	b085      	sub	sp, #20
 800643c:	af00      	add	r7, sp, #0
 800643e:	60f8      	str	r0, [r7, #12]
 8006440:	60b9      	str	r1, [r7, #8]
 8006442:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	3b04      	subs	r3, #4
 8006448:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006450:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	3b04      	subs	r3, #4
 8006456:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	f023 0201 	bic.w	r2, r3, #1
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	3b04      	subs	r3, #4
 8006466:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006468:	4a0c      	ldr	r2, [pc, #48]	; (800649c <pxPortInitialiseStack+0x64>)
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	3b14      	subs	r3, #20
 8006472:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	3b04      	subs	r3, #4
 800647e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f06f 0202 	mvn.w	r2, #2
 8006486:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	3b20      	subs	r3, #32
 800648c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800648e:	68fb      	ldr	r3, [r7, #12]
}
 8006490:	4618      	mov	r0, r3
 8006492:	3714      	adds	r7, #20
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr
 800649c:	080064a1 	.word	0x080064a1

080064a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80064a0:	b480      	push	{r7}
 80064a2:	b085      	sub	sp, #20
 80064a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80064a6:	2300      	movs	r3, #0
 80064a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80064aa:	4b12      	ldr	r3, [pc, #72]	; (80064f4 <prvTaskExitError+0x54>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064b2:	d00a      	beq.n	80064ca <prvTaskExitError+0x2a>
	__asm volatile
 80064b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b8:	f383 8811 	msr	BASEPRI, r3
 80064bc:	f3bf 8f6f 	isb	sy
 80064c0:	f3bf 8f4f 	dsb	sy
 80064c4:	60fb      	str	r3, [r7, #12]
}
 80064c6:	bf00      	nop
 80064c8:	e7fe      	b.n	80064c8 <prvTaskExitError+0x28>
	__asm volatile
 80064ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ce:	f383 8811 	msr	BASEPRI, r3
 80064d2:	f3bf 8f6f 	isb	sy
 80064d6:	f3bf 8f4f 	dsb	sy
 80064da:	60bb      	str	r3, [r7, #8]
}
 80064dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80064de:	bf00      	nop
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d0fc      	beq.n	80064e0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80064e6:	bf00      	nop
 80064e8:	bf00      	nop
 80064ea:	3714      	adds	r7, #20
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr
 80064f4:	20000018 	.word	0x20000018
	...

08006500 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006500:	4b07      	ldr	r3, [pc, #28]	; (8006520 <pxCurrentTCBConst2>)
 8006502:	6819      	ldr	r1, [r3, #0]
 8006504:	6808      	ldr	r0, [r1, #0]
 8006506:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800650a:	f380 8809 	msr	PSP, r0
 800650e:	f3bf 8f6f 	isb	sy
 8006512:	f04f 0000 	mov.w	r0, #0
 8006516:	f380 8811 	msr	BASEPRI, r0
 800651a:	4770      	bx	lr
 800651c:	f3af 8000 	nop.w

08006520 <pxCurrentTCBConst2>:
 8006520:	20000048 	.word	0x20000048
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006524:	bf00      	nop
 8006526:	bf00      	nop

08006528 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006528:	4808      	ldr	r0, [pc, #32]	; (800654c <prvPortStartFirstTask+0x24>)
 800652a:	6800      	ldr	r0, [r0, #0]
 800652c:	6800      	ldr	r0, [r0, #0]
 800652e:	f380 8808 	msr	MSP, r0
 8006532:	f04f 0000 	mov.w	r0, #0
 8006536:	f380 8814 	msr	CONTROL, r0
 800653a:	b662      	cpsie	i
 800653c:	b661      	cpsie	f
 800653e:	f3bf 8f4f 	dsb	sy
 8006542:	f3bf 8f6f 	isb	sy
 8006546:	df00      	svc	0
 8006548:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800654a:	bf00      	nop
 800654c:	e000ed08 	.word	0xe000ed08

08006550 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b088      	sub	sp, #32
 8006554:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006556:	4b4e      	ldr	r3, [pc, #312]	; (8006690 <xPortStartScheduler+0x140>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a4e      	ldr	r2, [pc, #312]	; (8006694 <xPortStartScheduler+0x144>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d10a      	bne.n	8006576 <xPortStartScheduler+0x26>
	__asm volatile
 8006560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006564:	f383 8811 	msr	BASEPRI, r3
 8006568:	f3bf 8f6f 	isb	sy
 800656c:	f3bf 8f4f 	dsb	sy
 8006570:	61bb      	str	r3, [r7, #24]
}
 8006572:	bf00      	nop
 8006574:	e7fe      	b.n	8006574 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006576:	4b46      	ldr	r3, [pc, #280]	; (8006690 <xPortStartScheduler+0x140>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a47      	ldr	r2, [pc, #284]	; (8006698 <xPortStartScheduler+0x148>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d10a      	bne.n	8006596 <xPortStartScheduler+0x46>
	__asm volatile
 8006580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006584:	f383 8811 	msr	BASEPRI, r3
 8006588:	f3bf 8f6f 	isb	sy
 800658c:	f3bf 8f4f 	dsb	sy
 8006590:	617b      	str	r3, [r7, #20]
}
 8006592:	bf00      	nop
 8006594:	e7fe      	b.n	8006594 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006596:	4b41      	ldr	r3, [pc, #260]	; (800669c <xPortStartScheduler+0x14c>)
 8006598:	61fb      	str	r3, [r7, #28]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800659a:	69fb      	ldr	r3, [r7, #28]
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80065a2:	69fb      	ldr	r3, [r7, #28]
 80065a4:	22ff      	movs	r2, #255	; 0xff
 80065a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80065a8:	69fb      	ldr	r3, [r7, #28]
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80065b0:	79fb      	ldrb	r3, [r7, #7]
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80065b8:	b2da      	uxtb	r2, r3
 80065ba:	4b39      	ldr	r3, [pc, #228]	; (80066a0 <xPortStartScheduler+0x150>)
 80065bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80065be:	4b39      	ldr	r3, [pc, #228]	; (80066a4 <xPortStartScheduler+0x154>)
 80065c0:	2207      	movs	r2, #7
 80065c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80065c4:	e009      	b.n	80065da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80065c6:	4b37      	ldr	r3, [pc, #220]	; (80066a4 <xPortStartScheduler+0x154>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	3b01      	subs	r3, #1
 80065cc:	4a35      	ldr	r2, [pc, #212]	; (80066a4 <xPortStartScheduler+0x154>)
 80065ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80065d0:	79fb      	ldrb	r3, [r7, #7]
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	005b      	lsls	r3, r3, #1
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80065da:	79fb      	ldrb	r3, [r7, #7]
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065e2:	2b80      	cmp	r3, #128	; 0x80
 80065e4:	d0ef      	beq.n	80065c6 <xPortStartScheduler+0x76>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 80065e6:	4b2f      	ldr	r3, [pc, #188]	; (80066a4 <xPortStartScheduler+0x154>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f1c3 0307 	rsb	r3, r3, #7
 80065ee:	2b04      	cmp	r3, #4
 80065f0:	d00a      	beq.n	8006608 <xPortStartScheduler+0xb8>
	__asm volatile
 80065f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f6:	f383 8811 	msr	BASEPRI, r3
 80065fa:	f3bf 8f6f 	isb	sy
 80065fe:	f3bf 8f4f 	dsb	sy
 8006602:	613b      	str	r3, [r7, #16]
}
 8006604:	bf00      	nop
 8006606:	e7fe      	b.n	8006606 <xPortStartScheduler+0xb6>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006608:	4b26      	ldr	r3, [pc, #152]	; (80066a4 <xPortStartScheduler+0x154>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f1c3 0307 	rsb	r3, r3, #7
 8006610:	2b04      	cmp	r3, #4
 8006612:	d00a      	beq.n	800662a <xPortStartScheduler+0xda>
	__asm volatile
 8006614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006618:	f383 8811 	msr	BASEPRI, r3
 800661c:	f3bf 8f6f 	isb	sy
 8006620:	f3bf 8f4f 	dsb	sy
 8006624:	60fb      	str	r3, [r7, #12]
}
 8006626:	bf00      	nop
 8006628:	e7fe      	b.n	8006628 <xPortStartScheduler+0xd8>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800662a:	4b1e      	ldr	r3, [pc, #120]	; (80066a4 <xPortStartScheduler+0x154>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	021b      	lsls	r3, r3, #8
 8006630:	4a1c      	ldr	r2, [pc, #112]	; (80066a4 <xPortStartScheduler+0x154>)
 8006632:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006634:	4b1b      	ldr	r3, [pc, #108]	; (80066a4 <xPortStartScheduler+0x154>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800663c:	4a19      	ldr	r2, [pc, #100]	; (80066a4 <xPortStartScheduler+0x154>)
 800663e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	b2da      	uxtb	r2, r3
 8006644:	69fb      	ldr	r3, [r7, #28]
 8006646:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006648:	4b17      	ldr	r3, [pc, #92]	; (80066a8 <xPortStartScheduler+0x158>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a16      	ldr	r2, [pc, #88]	; (80066a8 <xPortStartScheduler+0x158>)
 800664e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006652:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006654:	4b14      	ldr	r3, [pc, #80]	; (80066a8 <xPortStartScheduler+0x158>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a13      	ldr	r2, [pc, #76]	; (80066a8 <xPortStartScheduler+0x158>)
 800665a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800665e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006660:	f000 f8dc 	bl	800681c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006664:	4b11      	ldr	r3, [pc, #68]	; (80066ac <xPortStartScheduler+0x15c>)
 8006666:	2200      	movs	r2, #0
 8006668:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800666a:	f000 f8fb 	bl	8006864 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800666e:	4b10      	ldr	r3, [pc, #64]	; (80066b0 <xPortStartScheduler+0x160>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a0f      	ldr	r2, [pc, #60]	; (80066b0 <xPortStartScheduler+0x160>)
 8006674:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006678:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800667a:	f7ff ff55 	bl	8006528 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800667e:	f7ff f877 	bl	8005770 <vTaskSwitchContext>
	prvTaskExitError();
 8006682:	f7ff ff0d 	bl	80064a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006686:	2300      	movs	r3, #0
}
 8006688:	4618      	mov	r0, r3
 800668a:	3720      	adds	r7, #32
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}
 8006690:	e000ed00 	.word	0xe000ed00
 8006694:	410fc271 	.word	0x410fc271
 8006698:	410fc270 	.word	0x410fc270
 800669c:	e000e400 	.word	0xe000e400
 80066a0:	20000188 	.word	0x20000188
 80066a4:	2000018c 	.word	0x2000018c
 80066a8:	e000ed20 	.word	0xe000ed20
 80066ac:	20000018 	.word	0x20000018
 80066b0:	e000ef34 	.word	0xe000ef34

080066b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
	__asm volatile
 80066ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066be:	f383 8811 	msr	BASEPRI, r3
 80066c2:	f3bf 8f6f 	isb	sy
 80066c6:	f3bf 8f4f 	dsb	sy
 80066ca:	607b      	str	r3, [r7, #4]
}
 80066cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80066ce:	4b0f      	ldr	r3, [pc, #60]	; (800670c <vPortEnterCritical+0x58>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	3301      	adds	r3, #1
 80066d4:	4a0d      	ldr	r2, [pc, #52]	; (800670c <vPortEnterCritical+0x58>)
 80066d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80066d8:	4b0c      	ldr	r3, [pc, #48]	; (800670c <vPortEnterCritical+0x58>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d10f      	bne.n	8006700 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80066e0:	4b0b      	ldr	r3, [pc, #44]	; (8006710 <vPortEnterCritical+0x5c>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d00a      	beq.n	8006700 <vPortEnterCritical+0x4c>
	__asm volatile
 80066ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ee:	f383 8811 	msr	BASEPRI, r3
 80066f2:	f3bf 8f6f 	isb	sy
 80066f6:	f3bf 8f4f 	dsb	sy
 80066fa:	603b      	str	r3, [r7, #0]
}
 80066fc:	bf00      	nop
 80066fe:	e7fe      	b.n	80066fe <vPortEnterCritical+0x4a>
	}
}
 8006700:	bf00      	nop
 8006702:	370c      	adds	r7, #12
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr
 800670c:	20000018 	.word	0x20000018
 8006710:	e000ed04 	.word	0xe000ed04

08006714 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800671a:	4b12      	ldr	r3, [pc, #72]	; (8006764 <vPortExitCritical+0x50>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d10a      	bne.n	8006738 <vPortExitCritical+0x24>
	__asm volatile
 8006722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006726:	f383 8811 	msr	BASEPRI, r3
 800672a:	f3bf 8f6f 	isb	sy
 800672e:	f3bf 8f4f 	dsb	sy
 8006732:	607b      	str	r3, [r7, #4]
}
 8006734:	bf00      	nop
 8006736:	e7fe      	b.n	8006736 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006738:	4b0a      	ldr	r3, [pc, #40]	; (8006764 <vPortExitCritical+0x50>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	3b01      	subs	r3, #1
 800673e:	4a09      	ldr	r2, [pc, #36]	; (8006764 <vPortExitCritical+0x50>)
 8006740:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006742:	4b08      	ldr	r3, [pc, #32]	; (8006764 <vPortExitCritical+0x50>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d105      	bne.n	8006756 <vPortExitCritical+0x42>
 800674a:	2300      	movs	r3, #0
 800674c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	f383 8811 	msr	BASEPRI, r3
}
 8006754:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006756:	bf00      	nop
 8006758:	370c      	adds	r7, #12
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr
 8006762:	bf00      	nop
 8006764:	20000018 	.word	0x20000018
	...

08006770 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006770:	f3ef 8009 	mrs	r0, PSP
 8006774:	f3bf 8f6f 	isb	sy
 8006778:	4b15      	ldr	r3, [pc, #84]	; (80067d0 <pxCurrentTCBConst>)
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	f01e 0f10 	tst.w	lr, #16
 8006780:	bf08      	it	eq
 8006782:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006786:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800678a:	6010      	str	r0, [r2, #0]
 800678c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006790:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006794:	f380 8811 	msr	BASEPRI, r0
 8006798:	f3bf 8f4f 	dsb	sy
 800679c:	f3bf 8f6f 	isb	sy
 80067a0:	f7fe ffe6 	bl	8005770 <vTaskSwitchContext>
 80067a4:	f04f 0000 	mov.w	r0, #0
 80067a8:	f380 8811 	msr	BASEPRI, r0
 80067ac:	bc09      	pop	{r0, r3}
 80067ae:	6819      	ldr	r1, [r3, #0]
 80067b0:	6808      	ldr	r0, [r1, #0]
 80067b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067b6:	f01e 0f10 	tst.w	lr, #16
 80067ba:	bf08      	it	eq
 80067bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80067c0:	f380 8809 	msr	PSP, r0
 80067c4:	f3bf 8f6f 	isb	sy
 80067c8:	4770      	bx	lr
 80067ca:	bf00      	nop
 80067cc:	f3af 8000 	nop.w

080067d0 <pxCurrentTCBConst>:
 80067d0:	20000048 	.word	0x20000048
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80067d4:	bf00      	nop
 80067d6:	bf00      	nop

080067d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b082      	sub	sp, #8
 80067dc:	af00      	add	r7, sp, #0
	__asm volatile
 80067de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e2:	f383 8811 	msr	BASEPRI, r3
 80067e6:	f3bf 8f6f 	isb	sy
 80067ea:	f3bf 8f4f 	dsb	sy
 80067ee:	607b      	str	r3, [r7, #4]
}
 80067f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80067f2:	f7fe ff05 	bl	8005600 <xTaskIncrementTick>
 80067f6:	4603      	mov	r3, r0
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d003      	beq.n	8006804 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80067fc:	4b06      	ldr	r3, [pc, #24]	; (8006818 <SysTick_Handler+0x40>)
 80067fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006802:	601a      	str	r2, [r3, #0]
 8006804:	2300      	movs	r3, #0
 8006806:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	f383 8811 	msr	BASEPRI, r3
}
 800680e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006810:	bf00      	nop
 8006812:	3708      	adds	r7, #8
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}
 8006818:	e000ed04 	.word	0xe000ed04

0800681c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800681c:	b480      	push	{r7}
 800681e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006820:	4b0b      	ldr	r3, [pc, #44]	; (8006850 <vPortSetupTimerInterrupt+0x34>)
 8006822:	2200      	movs	r2, #0
 8006824:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006826:	4b0b      	ldr	r3, [pc, #44]	; (8006854 <vPortSetupTimerInterrupt+0x38>)
 8006828:	2200      	movs	r2, #0
 800682a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800682c:	4b0a      	ldr	r3, [pc, #40]	; (8006858 <vPortSetupTimerInterrupt+0x3c>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a0a      	ldr	r2, [pc, #40]	; (800685c <vPortSetupTimerInterrupt+0x40>)
 8006832:	fba2 2303 	umull	r2, r3, r2, r3
 8006836:	099b      	lsrs	r3, r3, #6
 8006838:	4a09      	ldr	r2, [pc, #36]	; (8006860 <vPortSetupTimerInterrupt+0x44>)
 800683a:	3b01      	subs	r3, #1
 800683c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800683e:	4b04      	ldr	r3, [pc, #16]	; (8006850 <vPortSetupTimerInterrupt+0x34>)
 8006840:	2207      	movs	r2, #7
 8006842:	601a      	str	r2, [r3, #0]
}
 8006844:	bf00      	nop
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr
 800684e:	bf00      	nop
 8006850:	e000e010 	.word	0xe000e010
 8006854:	e000e018 	.word	0xe000e018
 8006858:	2000000c 	.word	0x2000000c
 800685c:	10624dd3 	.word	0x10624dd3
 8006860:	e000e014 	.word	0xe000e014

08006864 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006864:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006874 <vPortEnableVFP+0x10>
 8006868:	6801      	ldr	r1, [r0, #0]
 800686a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800686e:	6001      	str	r1, [r0, #0]
 8006870:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006872:	bf00      	nop
 8006874:	e000ed88 	.word	0xe000ed88

08006878 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006878:	b480      	push	{r7}
 800687a:	b085      	sub	sp, #20
 800687c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800687e:	f3ef 8305 	mrs	r3, IPSR
 8006882:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2b0f      	cmp	r3, #15
 8006888:	d914      	bls.n	80068b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800688a:	4a17      	ldr	r2, [pc, #92]	; (80068e8 <vPortValidateInterruptPriority+0x70>)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	4413      	add	r3, r2
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006894:	4b15      	ldr	r3, [pc, #84]	; (80068ec <vPortValidateInterruptPriority+0x74>)
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	7afa      	ldrb	r2, [r7, #11]
 800689a:	429a      	cmp	r2, r3
 800689c:	d20a      	bcs.n	80068b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800689e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a2:	f383 8811 	msr	BASEPRI, r3
 80068a6:	f3bf 8f6f 	isb	sy
 80068aa:	f3bf 8f4f 	dsb	sy
 80068ae:	607b      	str	r3, [r7, #4]
}
 80068b0:	bf00      	nop
 80068b2:	e7fe      	b.n	80068b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80068b4:	4b0e      	ldr	r3, [pc, #56]	; (80068f0 <vPortValidateInterruptPriority+0x78>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80068bc:	4b0d      	ldr	r3, [pc, #52]	; (80068f4 <vPortValidateInterruptPriority+0x7c>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d90a      	bls.n	80068da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80068c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c8:	f383 8811 	msr	BASEPRI, r3
 80068cc:	f3bf 8f6f 	isb	sy
 80068d0:	f3bf 8f4f 	dsb	sy
 80068d4:	603b      	str	r3, [r7, #0]
}
 80068d6:	bf00      	nop
 80068d8:	e7fe      	b.n	80068d8 <vPortValidateInterruptPriority+0x60>
	}
 80068da:	bf00      	nop
 80068dc:	3714      	adds	r7, #20
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr
 80068e6:	bf00      	nop
 80068e8:	e000e3f0 	.word	0xe000e3f0
 80068ec:	20000188 	.word	0x20000188
 80068f0:	e000ed0c 	.word	0xe000ed0c
 80068f4:	2000018c 	.word	0x2000018c

080068f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b08a      	sub	sp, #40	; 0x28
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006900:	2300      	movs	r3, #0
 8006902:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006904:	f7fe fdc2 	bl	800548c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006908:	4b58      	ldr	r3, [pc, #352]	; (8006a6c <pvPortMalloc+0x174>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d101      	bne.n	8006914 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006910:	f000 f910 	bl	8006b34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006914:	4b56      	ldr	r3, [pc, #344]	; (8006a70 <pvPortMalloc+0x178>)
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4013      	ands	r3, r2
 800691c:	2b00      	cmp	r3, #0
 800691e:	f040 808e 	bne.w	8006a3e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d01d      	beq.n	8006964 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006928:	2208      	movs	r2, #8
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	4413      	add	r3, r2
 800692e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f003 0307 	and.w	r3, r3, #7
 8006936:	2b00      	cmp	r3, #0
 8006938:	d014      	beq.n	8006964 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f023 0307 	bic.w	r3, r3, #7
 8006940:	3308      	adds	r3, #8
 8006942:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f003 0307 	and.w	r3, r3, #7
 800694a:	2b00      	cmp	r3, #0
 800694c:	d00a      	beq.n	8006964 <pvPortMalloc+0x6c>
	__asm volatile
 800694e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006952:	f383 8811 	msr	BASEPRI, r3
 8006956:	f3bf 8f6f 	isb	sy
 800695a:	f3bf 8f4f 	dsb	sy
 800695e:	617b      	str	r3, [r7, #20]
}
 8006960:	bf00      	nop
 8006962:	e7fe      	b.n	8006962 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d069      	beq.n	8006a3e <pvPortMalloc+0x146>
 800696a:	4b42      	ldr	r3, [pc, #264]	; (8006a74 <pvPortMalloc+0x17c>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	429a      	cmp	r2, r3
 8006972:	d864      	bhi.n	8006a3e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006974:	4b40      	ldr	r3, [pc, #256]	; (8006a78 <pvPortMalloc+0x180>)
 8006976:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006978:	4b3f      	ldr	r3, [pc, #252]	; (8006a78 <pvPortMalloc+0x180>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800697e:	e004      	b.n	800698a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006982:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800698a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	429a      	cmp	r2, r3
 8006992:	d903      	bls.n	800699c <pvPortMalloc+0xa4>
 8006994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d1f1      	bne.n	8006980 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800699c:	4b33      	ldr	r3, [pc, #204]	; (8006a6c <pvPortMalloc+0x174>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d04b      	beq.n	8006a3e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80069a6:	6a3b      	ldr	r3, [r7, #32]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	2208      	movs	r2, #8
 80069ac:	4413      	add	r3, r2
 80069ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80069b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	6a3b      	ldr	r3, [r7, #32]
 80069b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80069b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ba:	685a      	ldr	r2, [r3, #4]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	1ad2      	subs	r2, r2, r3
 80069c0:	2308      	movs	r3, #8
 80069c2:	005b      	lsls	r3, r3, #1
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d91f      	bls.n	8006a08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80069c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	4413      	add	r3, r2
 80069ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80069d0:	69bb      	ldr	r3, [r7, #24]
 80069d2:	f003 0307 	and.w	r3, r3, #7
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d00a      	beq.n	80069f0 <pvPortMalloc+0xf8>
	__asm volatile
 80069da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069de:	f383 8811 	msr	BASEPRI, r3
 80069e2:	f3bf 8f6f 	isb	sy
 80069e6:	f3bf 8f4f 	dsb	sy
 80069ea:	613b      	str	r3, [r7, #16]
}
 80069ec:	bf00      	nop
 80069ee:	e7fe      	b.n	80069ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80069f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f2:	685a      	ldr	r2, [r3, #4]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	1ad2      	subs	r2, r2, r3
 80069f8:	69bb      	ldr	r3, [r7, #24]
 80069fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80069fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006a02:	69b8      	ldr	r0, [r7, #24]
 8006a04:	f000 f8f8 	bl	8006bf8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006a08:	4b1a      	ldr	r3, [pc, #104]	; (8006a74 <pvPortMalloc+0x17c>)
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	1ad3      	subs	r3, r2, r3
 8006a12:	4a18      	ldr	r2, [pc, #96]	; (8006a74 <pvPortMalloc+0x17c>)
 8006a14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006a16:	4b17      	ldr	r3, [pc, #92]	; (8006a74 <pvPortMalloc+0x17c>)
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	4b18      	ldr	r3, [pc, #96]	; (8006a7c <pvPortMalloc+0x184>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d203      	bcs.n	8006a2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006a22:	4b14      	ldr	r3, [pc, #80]	; (8006a74 <pvPortMalloc+0x17c>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a15      	ldr	r2, [pc, #84]	; (8006a7c <pvPortMalloc+0x184>)
 8006a28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2c:	685a      	ldr	r2, [r3, #4]
 8006a2e:	4b10      	ldr	r3, [pc, #64]	; (8006a70 <pvPortMalloc+0x178>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	431a      	orrs	r2, r3
 8006a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006a3e:	f7fe fd33 	bl	80054a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	f003 0307 	and.w	r3, r3, #7
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d00a      	beq.n	8006a62 <pvPortMalloc+0x16a>
	__asm volatile
 8006a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a50:	f383 8811 	msr	BASEPRI, r3
 8006a54:	f3bf 8f6f 	isb	sy
 8006a58:	f3bf 8f4f 	dsb	sy
 8006a5c:	60fb      	str	r3, [r7, #12]
}
 8006a5e:	bf00      	nop
 8006a60:	e7fe      	b.n	8006a60 <pvPortMalloc+0x168>
	return pvReturn;
 8006a62:	69fb      	ldr	r3, [r7, #28]
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3728      	adds	r7, #40	; 0x28
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}
 8006a6c:	20012d98 	.word	0x20012d98
 8006a70:	20012da4 	.word	0x20012da4
 8006a74:	20012d9c 	.word	0x20012d9c
 8006a78:	20012d90 	.word	0x20012d90
 8006a7c:	20012da0 	.word	0x20012da0

08006a80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b086      	sub	sp, #24
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d048      	beq.n	8006b24 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006a92:	2308      	movs	r3, #8
 8006a94:	425b      	negs	r3, r3
 8006a96:	697a      	ldr	r2, [r7, #20]
 8006a98:	4413      	add	r3, r2
 8006a9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	685a      	ldr	r2, [r3, #4]
 8006aa4:	4b21      	ldr	r3, [pc, #132]	; (8006b2c <vPortFree+0xac>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4013      	ands	r3, r2
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d10a      	bne.n	8006ac4 <vPortFree+0x44>
	__asm volatile
 8006aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab2:	f383 8811 	msr	BASEPRI, r3
 8006ab6:	f3bf 8f6f 	isb	sy
 8006aba:	f3bf 8f4f 	dsb	sy
 8006abe:	60fb      	str	r3, [r7, #12]
}
 8006ac0:	bf00      	nop
 8006ac2:	e7fe      	b.n	8006ac2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d00a      	beq.n	8006ae2 <vPortFree+0x62>
	__asm volatile
 8006acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad0:	f383 8811 	msr	BASEPRI, r3
 8006ad4:	f3bf 8f6f 	isb	sy
 8006ad8:	f3bf 8f4f 	dsb	sy
 8006adc:	60bb      	str	r3, [r7, #8]
}
 8006ade:	bf00      	nop
 8006ae0:	e7fe      	b.n	8006ae0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	685a      	ldr	r2, [r3, #4]
 8006ae6:	4b11      	ldr	r3, [pc, #68]	; (8006b2c <vPortFree+0xac>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4013      	ands	r3, r2
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d019      	beq.n	8006b24 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d115      	bne.n	8006b24 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	685a      	ldr	r2, [r3, #4]
 8006afc:	4b0b      	ldr	r3, [pc, #44]	; (8006b2c <vPortFree+0xac>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	43db      	mvns	r3, r3
 8006b02:	401a      	ands	r2, r3
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006b08:	f7fe fcc0 	bl	800548c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	685a      	ldr	r2, [r3, #4]
 8006b10:	4b07      	ldr	r3, [pc, #28]	; (8006b30 <vPortFree+0xb0>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4413      	add	r3, r2
 8006b16:	4a06      	ldr	r2, [pc, #24]	; (8006b30 <vPortFree+0xb0>)
 8006b18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006b1a:	6938      	ldr	r0, [r7, #16]
 8006b1c:	f000 f86c 	bl	8006bf8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006b20:	f7fe fcc2 	bl	80054a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006b24:	bf00      	nop
 8006b26:	3718      	adds	r7, #24
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}
 8006b2c:	20012da4 	.word	0x20012da4
 8006b30:	20012d9c 	.word	0x20012d9c

08006b34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006b34:	b480      	push	{r7}
 8006b36:	b085      	sub	sp, #20
 8006b38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006b3a:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8006b3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006b40:	4b27      	ldr	r3, [pc, #156]	; (8006be0 <prvHeapInit+0xac>)
 8006b42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f003 0307 	and.w	r3, r3, #7
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d00c      	beq.n	8006b68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	3307      	adds	r3, #7
 8006b52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f023 0307 	bic.w	r3, r3, #7
 8006b5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006b5c:	68ba      	ldr	r2, [r7, #8]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	1ad3      	subs	r3, r2, r3
 8006b62:	4a1f      	ldr	r2, [pc, #124]	; (8006be0 <prvHeapInit+0xac>)
 8006b64:	4413      	add	r3, r2
 8006b66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006b6c:	4a1d      	ldr	r2, [pc, #116]	; (8006be4 <prvHeapInit+0xb0>)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006b72:	4b1c      	ldr	r3, [pc, #112]	; (8006be4 <prvHeapInit+0xb0>)
 8006b74:	2200      	movs	r2, #0
 8006b76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	68ba      	ldr	r2, [r7, #8]
 8006b7c:	4413      	add	r3, r2
 8006b7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006b80:	2208      	movs	r2, #8
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	1a9b      	subs	r3, r3, r2
 8006b86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f023 0307 	bic.w	r3, r3, #7
 8006b8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	4a15      	ldr	r2, [pc, #84]	; (8006be8 <prvHeapInit+0xb4>)
 8006b94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006b96:	4b14      	ldr	r3, [pc, #80]	; (8006be8 <prvHeapInit+0xb4>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006b9e:	4b12      	ldr	r3, [pc, #72]	; (8006be8 <prvHeapInit+0xb4>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	68fa      	ldr	r2, [r7, #12]
 8006bae:	1ad2      	subs	r2, r2, r3
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006bb4:	4b0c      	ldr	r3, [pc, #48]	; (8006be8 <prvHeapInit+0xb4>)
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	4a0a      	ldr	r2, [pc, #40]	; (8006bec <prvHeapInit+0xb8>)
 8006bc2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	4a09      	ldr	r2, [pc, #36]	; (8006bf0 <prvHeapInit+0xbc>)
 8006bca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006bcc:	4b09      	ldr	r3, [pc, #36]	; (8006bf4 <prvHeapInit+0xc0>)
 8006bce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006bd2:	601a      	str	r2, [r3, #0]
}
 8006bd4:	bf00      	nop
 8006bd6:	3714      	adds	r7, #20
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr
 8006be0:	20000190 	.word	0x20000190
 8006be4:	20012d90 	.word	0x20012d90
 8006be8:	20012d98 	.word	0x20012d98
 8006bec:	20012da0 	.word	0x20012da0
 8006bf0:	20012d9c 	.word	0x20012d9c
 8006bf4:	20012da4 	.word	0x20012da4

08006bf8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b085      	sub	sp, #20
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006c00:	4b28      	ldr	r3, [pc, #160]	; (8006ca4 <prvInsertBlockIntoFreeList+0xac>)
 8006c02:	60fb      	str	r3, [r7, #12]
 8006c04:	e002      	b.n	8006c0c <prvInsertBlockIntoFreeList+0x14>
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	60fb      	str	r3, [r7, #12]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d8f7      	bhi.n	8006c06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	68ba      	ldr	r2, [r7, #8]
 8006c20:	4413      	add	r3, r2
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d108      	bne.n	8006c3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	685a      	ldr	r2, [r3, #4]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	441a      	add	r2, r3
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	68ba      	ldr	r2, [r7, #8]
 8006c44:	441a      	add	r2, r3
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d118      	bne.n	8006c80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	4b15      	ldr	r3, [pc, #84]	; (8006ca8 <prvInsertBlockIntoFreeList+0xb0>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d00d      	beq.n	8006c76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	685a      	ldr	r2, [r3, #4]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	441a      	add	r2, r3
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	601a      	str	r2, [r3, #0]
 8006c74:	e008      	b.n	8006c88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006c76:	4b0c      	ldr	r3, [pc, #48]	; (8006ca8 <prvInsertBlockIntoFreeList+0xb0>)
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	601a      	str	r2, [r3, #0]
 8006c7e:	e003      	b.n	8006c88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006c88:	68fa      	ldr	r2, [r7, #12]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d002      	beq.n	8006c96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c96:	bf00      	nop
 8006c98:	3714      	adds	r7, #20
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr
 8006ca2:	bf00      	nop
 8006ca4:	20012d90 	.word	0x20012d90
 8006ca8:	20012d98 	.word	0x20012d98

08006cac <__libc_init_array>:
 8006cac:	b570      	push	{r4, r5, r6, lr}
 8006cae:	4d0d      	ldr	r5, [pc, #52]	; (8006ce4 <__libc_init_array+0x38>)
 8006cb0:	4c0d      	ldr	r4, [pc, #52]	; (8006ce8 <__libc_init_array+0x3c>)
 8006cb2:	1b64      	subs	r4, r4, r5
 8006cb4:	10a4      	asrs	r4, r4, #2
 8006cb6:	2600      	movs	r6, #0
 8006cb8:	42a6      	cmp	r6, r4
 8006cba:	d109      	bne.n	8006cd0 <__libc_init_array+0x24>
 8006cbc:	4d0b      	ldr	r5, [pc, #44]	; (8006cec <__libc_init_array+0x40>)
 8006cbe:	4c0c      	ldr	r4, [pc, #48]	; (8006cf0 <__libc_init_array+0x44>)
 8006cc0:	f000 f82e 	bl	8006d20 <_init>
 8006cc4:	1b64      	subs	r4, r4, r5
 8006cc6:	10a4      	asrs	r4, r4, #2
 8006cc8:	2600      	movs	r6, #0
 8006cca:	42a6      	cmp	r6, r4
 8006ccc:	d105      	bne.n	8006cda <__libc_init_array+0x2e>
 8006cce:	bd70      	pop	{r4, r5, r6, pc}
 8006cd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cd4:	4798      	blx	r3
 8006cd6:	3601      	adds	r6, #1
 8006cd8:	e7ee      	b.n	8006cb8 <__libc_init_array+0xc>
 8006cda:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cde:	4798      	blx	r3
 8006ce0:	3601      	adds	r6, #1
 8006ce2:	e7f2      	b.n	8006cca <__libc_init_array+0x1e>
 8006ce4:	08007f00 	.word	0x08007f00
 8006ce8:	08007f00 	.word	0x08007f00
 8006cec:	08007f00 	.word	0x08007f00
 8006cf0:	08007f04 	.word	0x08007f04

08006cf4 <memcpy>:
 8006cf4:	440a      	add	r2, r1
 8006cf6:	4291      	cmp	r1, r2
 8006cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8006cfc:	d100      	bne.n	8006d00 <memcpy+0xc>
 8006cfe:	4770      	bx	lr
 8006d00:	b510      	push	{r4, lr}
 8006d02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d0a:	4291      	cmp	r1, r2
 8006d0c:	d1f9      	bne.n	8006d02 <memcpy+0xe>
 8006d0e:	bd10      	pop	{r4, pc}

08006d10 <memset>:
 8006d10:	4402      	add	r2, r0
 8006d12:	4603      	mov	r3, r0
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d100      	bne.n	8006d1a <memset+0xa>
 8006d18:	4770      	bx	lr
 8006d1a:	f803 1b01 	strb.w	r1, [r3], #1
 8006d1e:	e7f9      	b.n	8006d14 <memset+0x4>

08006d20 <_init>:
 8006d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d22:	bf00      	nop
 8006d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d26:	bc08      	pop	{r3}
 8006d28:	469e      	mov	lr, r3
 8006d2a:	4770      	bx	lr

08006d2c <_fini>:
 8006d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d2e:	bf00      	nop
 8006d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d32:	bc08      	pop	{r3}
 8006d34:	469e      	mov	lr, r3
 8006d36:	4770      	bx	lr
